// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: api/v1beta1/diagnostic.proto

package v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiagnosticServiceClient is the client API for DiagnosticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiagnosticServiceClient interface {
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	ChangeLogLevel(ctx context.Context, in *ChangeLogLevelRequest, opts ...grpc.CallOption) (*ChangeLogLevelResponse, error)
	GetStacktrace(ctx context.Context, in *GetStacktraceRequest, opts ...grpc.CallOption) (*GetStacktraceResponse, error)
}

type diagnosticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiagnosticServiceClient(cc grpc.ClientConnInterface) DiagnosticServiceClient {
	return &diagnosticServiceClient{cc}
}

func (c *diagnosticServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/tracee.v1beta1.DiagnosticService/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) ChangeLogLevel(ctx context.Context, in *ChangeLogLevelRequest, opts ...grpc.CallOption) (*ChangeLogLevelResponse, error) {
	out := new(ChangeLogLevelResponse)
	err := c.cc.Invoke(ctx, "/tracee.v1beta1.DiagnosticService/ChangeLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) GetStacktrace(ctx context.Context, in *GetStacktraceRequest, opts ...grpc.CallOption) (*GetStacktraceResponse, error) {
	out := new(GetStacktraceResponse)
	err := c.cc.Invoke(ctx, "/tracee.v1beta1.DiagnosticService/GetStacktrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiagnosticServiceServer is the server API for DiagnosticService service.
// All implementations must embed UnimplementedDiagnosticServiceServer
// for forward compatibility
type DiagnosticServiceServer interface {
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	ChangeLogLevel(context.Context, *ChangeLogLevelRequest) (*ChangeLogLevelResponse, error)
	GetStacktrace(context.Context, *GetStacktraceRequest) (*GetStacktraceResponse, error)
	mustEmbedUnimplementedDiagnosticServiceServer()
}

// UnimplementedDiagnosticServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiagnosticServiceServer struct {
}

func (UnimplementedDiagnosticServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedDiagnosticServiceServer) ChangeLogLevel(context.Context, *ChangeLogLevelRequest) (*ChangeLogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLogLevel not implemented")
}
func (UnimplementedDiagnosticServiceServer) GetStacktrace(context.Context, *GetStacktraceRequest) (*GetStacktraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStacktrace not implemented")
}
func (UnimplementedDiagnosticServiceServer) mustEmbedUnimplementedDiagnosticServiceServer() {}

// UnsafeDiagnosticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiagnosticServiceServer will
// result in compilation errors.
type UnsafeDiagnosticServiceServer interface {
	mustEmbedUnimplementedDiagnosticServiceServer()
}

func RegisterDiagnosticServiceServer(s grpc.ServiceRegistrar, srv DiagnosticServiceServer) {
	s.RegisterService(&DiagnosticService_ServiceDesc, srv)
}

func _DiagnosticService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracee.v1beta1.DiagnosticService/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_ChangeLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).ChangeLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracee.v1beta1.DiagnosticService/ChangeLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).ChangeLogLevel(ctx, req.(*ChangeLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_GetStacktrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStacktraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).GetStacktrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracee.v1beta1.DiagnosticService/GetStacktrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).GetStacktrace(ctx, req.(*GetStacktraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiagnosticService_ServiceDesc is the grpc.ServiceDesc for DiagnosticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiagnosticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracee.v1beta1.DiagnosticService",
	HandlerType: (*DiagnosticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetrics",
			Handler:    _DiagnosticService_GetMetrics_Handler,
		},
		{
			MethodName: "ChangeLogLevel",
			Handler:    _DiagnosticService_ChangeLogLevel_Handler,
		},
		{
			MethodName: "GetStacktrace",
			Handler:    _DiagnosticService_GetStacktrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1beta1/diagnostic.proto",
}
