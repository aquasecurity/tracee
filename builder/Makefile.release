#
# Creates tracee snapshots for testing and releasing.
#

.PHONY: all
all: release

#
# make
#

.ONESHELL:
SHELL = /bin/sh

MAKEFLAGS += --no-print-directory

#
# tools
#

CMD_DOCKER ?= docker
CMD_CHECKSUM ?= sha256sum
CMD_GITHUB ?= gh
CMD_TAR ?= tar
CMD_GIT ?= git
CMD_RM ?= rm
CMD_TOUCH ?= touch
CMD_MKDIR ?= mkdir
CMD_COSIGN ?= cosign

.ONESHELL:
.check_%:
#
	@command -v $* >/dev/null
	if [ $$? -ne 0 ]; then
		echo "missing required tool $*"
		exit 1
	else
		touch $@ # avoid target rebuilds due to inexistent file
	fi

#
# environment
#

UNAME_M := $(shell uname -m)
UNAME_R := $(shell uname -r)

ifeq ($(UNAME_M),x86_64)
	ARCH = x86_64
	ALTARCH = amd64
endif

ifeq ($(UNAME_M),aarch64)
	ARCH = aarch64
	ALTARCH = arm64
endif

ifeq ($(ALTARCH),)
	@echo "can't find architecture"
	exit 1
endif

.PHONY: env
env:
	@echo ---------------------------------------
	@echo "CMD_CHECKSUM          $(CMD_CHECKSUM)"
	@echo "CMD_DOCKER            $(CMD_DOCKER)"
	@echo "CMD_GIT               $(CMD_GIT)"
	@echo "CMD_GITHUB            $(CMD_GITHUB)"
	@echo "CMD_TAR               $(CMD_TAR)"
	@echo "CMD_TOUCH             $(CMD_TOUCH)"
	@echo "CMD_RM                $(CMD_RM)"
	@echo "CMD_MKDIR             $(CMD_MKDIR)"
	@echo ---------------------------------------
	@echo "PUSH_DOCKER_REPO      $(PUSH_DOCKER_REPO)"
	@echo ---------------------------------------

#
# usage
#

.PHONY: help
help:
	@echo ""
	@echo "CREATES TRACEE SNAPSHOTS FOR TESTING AND RELEASING"
	@echo ""
	@echo "To GENERATE a release SNAPSHOT (versioned by latest git SHA):"
	@echo ""
	@echo "  $$ SNAPSHOT=1 make -f builder/Makefile.release"
	@echo ""
	@echo "  > Compiles tracee-ebpf, tracee-rules and rules"
	@echo "  > Creates an archive of build artifacts along with license"
	@echo "  > Takes a checksum of the archive"
	@echo ""
	@echo "Container images are:"
	@echo ""
	@echo "  - aquasec/tracee:latest (embedded eBPF CO-RE obj with BTFHUB support)"
	@echo "  - aquasec/tracee:full   (compiles non CO-RE eBPF object on startup if needed)"
	@echo ""
	@echo "To PUBLISH a release:"
	@echo ""
	@echo "  $$ PUSH_DOCKER_REPO=aquasec/tracee make -f builder/Makefile.release"
	@echo ""
	@echo "  > Pushes artifact found by the latest git tag to docker.io/aquasec/tracee"
	@echo ""
	@echo "Clean leftovers:"
	@echo ""
	@echo "  $$ make -f builder/Makefile.release clean"
	@echo ""

#
# requirements
#

.PHONY: .check_tree
.check_tree:
#
	@if [ ! -d ./builder ]; then
		echo "you must be in the root directory"
		exit 1
	fi

#
# output dir
#

OUTPUT_DIR = ./dist
RELEASE_NOTES ?= $(OUTPUT_DIR)/release_notes.txt

$(OUTPUT_DIR):
#
	$(CMD_MKDIR) -p $@
	$(CMD_TOUCH) $(RELEASE_NOTES)

#
# Create a release snapshot
#

SNAPSHOT_VERSION = $(shell git describe --tags --abbrev=0)
IMAGE_TAG = $(subst v,,$(SNAPSHOT_VERSION))

ifeq ("$(SNAPSHOT)", "1")
	SNAPSHOT_VERSION = $(shell  git rev-parse --short HEAD)
	IMAGE_TAG = $(SNAPSHOT_VERSION)
endif

RELEASE_FILES = LICENSE
RELEASE_FILES += $(OUTPUT_DIR)/tracee-ebpf
RELEASE_FILES += $(OUTPUT_DIR)/tracee-rules
RELEASE_FILES += $(OUTPUT_DIR)/tracee
RELEASE_FILES += $(OUTPUT_DIR)/rules
RELEASE_FILES += $(OUTPUT_DIR)/tracee.bpf.core.o

OUT_ARCHIVE := $(OUTPUT_DIR)/tracee.$(SNAPSHOT_VERSION).tar.gz
OUT_CHECKSUMS := $(OUTPUT_DIR)/checksum.$(SNAPSHOT_VERSION).txt

PUSH_DOCKER_REPO ?= aquasec/tracee

.PHONY: release
release: \
	$(OUTPUT_DIR) \
	| .check_tree \
	.check_$(CMD_DOCKER) \
	.check_$(CMD_TAR) \
	.check_$(CMD_CHECKSUM) \
	.check_$(CMD_GITHUB)
#
# build binaries (tracee-ebpf, tracee-rules, rules)
#
	$(MAKE) -f builder/Makefile.tracee-make ubuntu-prepare
	BTFHUB=0 STATIC=1 $(MAKE) -f builder/Makefile.tracee-make ubuntu-make ARG="clean"
	BTFHUB=0 STATIC=1 $(MAKE) -f builder/Makefile.tracee-make ubuntu-make ARG="all"
#
# create the tar ball and checksum files
#
	$(CMD_TAR) -czf $(OUT_ARCHIVE) $(RELEASE_FILES)
	$(CMD_CHECKSUM) $(OUT_ARCHIVE) > $(OUT_CHECKSUMS)
#
# build official slim container image (CO-RE + BTFHUB)
#
	BTFHUB=0 $(MAKE) -f builder/Makefile.tracee-container build-tracee
ifeq ($(ARCH),x86_64)
	$(CMD_DOCKER) tag tracee:latest $(PUSH_DOCKER_REPO):latest
	$(CMD_DOCKER) tag tracee:latest $(PUSH_DOCKER_REPO):$(IMAGE_TAG)
endif
	$(CMD_DOCKER) tag tracee:latest $(PUSH_DOCKER_REPO):$(ARCH)-latest
	$(CMD_DOCKER) tag tracee:latest $(PUSH_DOCKER_REPO):$(ARCH)-$(IMAGE_TAG)
#
# build official full container image (CO-RE + non CO-RE build)
#
	BTFHUB=0 $(MAKE) -f builder/Makefile.tracee-container build-tracee-full
ifeq ($(ARCH),x86_64)
	$(CMD_DOCKER) tag tracee:full $(PUSH_DOCKER_REPO):full
	$(CMD_DOCKER) tag tracee:full $(PUSH_DOCKER_REPO):full-$(IMAGE_TAG)
endif
	$(CMD_DOCKER) tag tracee:full $(PUSH_DOCKER_REPO):$(ARCH)-full
	$(CMD_DOCKER) tag tracee:full $(PUSH_DOCKER_REPO):$(ARCH)-full-$(IMAGE_TAG)
#
# RELEASE
#
ifneq ("$(SNAPSHOT)", "1")
#
# push container images to docker hub
#
ifeq ($(ARCH),x86_64)
	$(CMD_DOCKER) push $(PUSH_DOCKER_REPO):latest
	$(CMD_DOCKER) push $(PUSH_DOCKER_REPO):$(IMAGE_TAG)
	$(CMD_DOCKER) push $(PUSH_DOCKER_REPO):full
	$(CMD_DOCKER) push $(PUSH_DOCKER_REPO):full-$(IMAGE_TAG)
endif
	$(CMD_DOCKER) push $(PUSH_DOCKER_REPO):$(ARCH)-latest
	$(CMD_DOCKER) push $(PUSH_DOCKER_REPO):$(ARCH)-$(IMAGE_TAG)
	$(CMD_DOCKER) push $(PUSH_DOCKER_REPO):$(ARCH)-full
	$(CMD_DOCKER) push $(PUSH_DOCKER_REPO):$(ARCH)-full-$(IMAGE_TAG)
#
# sign pushed container images (x86_64 only)
#
ifeq ($(ARCH),x86_64)
	COSIGN_EXPERIMENTAL=1 $(CMD_COSIGN) sign $(PUSH_DOCKER_REPO)@$(shell docker inspect --format='{{index .RepoDigests 0}}' $(PUSH_DOCKER_REPO):latest | awk -F'@' '{print $2}')
	COSIGN_EXPERIMENTAL=1 $(CMD_COSIGN) sign $(PUSH_DOCKER_REPO)@$(shell docker inspect --format='{{index .RepoDigests 0}}' $(PUSH_DOCKER_REPO):full | awk -F'@' '{print $2}')
endif
#
# create release notes (x86_64 only, other arches will be added after release)
#
ifeq ($(ARCH),x86_64)
	echo '## Docker images' >> $(RELEASE_NOTES)
	echo '' >> $(RELEASE_NOTES)
	echo '- `docker pull docker.io/$(PUSH_DOCKER_REPO):$(IMAGE_TAG) (embedded eBPF CO-RE obj with BTFHUB support)`' >> $(RELEASE_NOTES);
	echo '- `docker pull docker.io/$(PUSH_DOCKER_REPO):full-$(IMAGE_TAG) (compiles non CO-RE eBPF object on startup)`' >> $(RELEASE_NOTES);
endif
#
# release it (x86_64 only, other arches will be added after release)
#
ifeq ($(ARCH),x86_64)
	$(CMD_GITHUB) release create $(SNAPSHOT_VERSION) $(OUT_ARCHIVE) $(OUT_CHECKSUMS) --title $(SNAPSHOT_VERSION) --notes-file $(RELEASE_NOTES)
endif
#
endif

.PHONY: clean
clean:
#
	$(MAKE) clean
