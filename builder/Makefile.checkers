.PHONY: all
all:
	@$(MAKE) help

#
# make
#

.ONESHELL:
SHELL = /bin/bash

MAKE = make -f $(shell find . -name Makefile.checkers)
GENERAL_MAKE = MAKEFLAGS="-j1 --no-print-directory" make
MAKEFLAGS += --no-print-directory

#
# tools
#

CMD_CLANG ?= clang

.check_%:
#
	@command -v $* >/dev/null
	if [ $$? -ne 0 ]; then
		echo "missing required tool $*"
		exit 1
	else
		touch $@ # avoid target rebuilds due to inexistent file
	fi

#
# usage
#

.PHONY: help
help:
	@echo ""
	@echo "To check formatting you should run:"
	@echo ""
	@echo "    $$ make -f builder/Makefile.checkers fmt-check"
	@echo ""
	@echo "To fix formatting you should run:"
	@echo ""
	@echo "    $$ make -f builder/Makefile.checkers fmt-fix"
	@echo ""
	@echo "To check code you should run:"
	@echo ""
	@echo "    $$ make -f builder/Makefile.checkers code-check"
	@echo ""
	@echo "Note: you should run fmt-fix before doing a git commmit."
	@echo ""

#
# requirements
#

.PHONY: .check_tree
.check_tree:
#
	@if [ ! -d ./builder ]; then
		echo "you must be in the root directory"
		exit 1
	fi

#
# check formatting (clang-format, gofmt)
#

.PHONY: fmt-check
fmt-check: | \
	.check_tree \
	.check_clang-format
#
	@errors=0
	echo "Checking C and eBPF files and headers formatting..."
	clang-format --dry-run -i ./pkg/ebpf/c/* > /tmp/check-c-fmt 2>&1
	clangfmtamount=$$(cat /tmp/check-c-fmt | wc -l)
	if [[ $$clangfmtamount -ne 0 ]]; then
		head -n30 /tmp/check-c-fmt
		errors=1
	fi
	rm -f /tmp/check-c-fmt
#
	echo "Checking golang files formatting..."
	gofmt -l -s -d . | tee /tmp/check-go-fmt
	gofmtamount=$$(cat /tmp/check-go-fmt | wc -l)
	if [[ $$gofmtamount -ne 0 ]]; then
		errors=1
	fi
	if [[ $$errors -ne 0 ]]; then
		echo
		echo "Please fix formatting errors above!"
		echo "Use: $(MAKE) fmt-fix target".
		echo
		exit 1
	fi
	rm -f /tmp/check-go-fmt

#
# fix formatting (clang-format, gofmt)
#

.PHONY: fmt-fix
fmt-fix: | \
	.check_tree \
	.check_clang-format
#
	@echo "Fixing C and eBPF files and headers formatting..."
	clang-format -i --verbose ./pkg/ebpf/c/*
#
	echo "Fixing golang files formatting..."
	gofmt -l -s -d . > /tmp/patch.$$
	patch -p0 < /tmp/patch.$$
	rm /tmp/patch.$$

#
# check code (go vet, static checkers)
#

.PHONY: code-check
code-check: | \
	.check_tree \
#
	@echo "Checking with clang-tidy..."
	clang-tidy -header-filter=.* pkg/ebpf/c/tracee.bpf.c
	@echo "Checking Golang vet..."
	$(GENERAL_MAKE) check-vet
	echo "Checking Golang with StaticChecker..."
	$(GENERAL_MAKE) -j1 check-staticcheck

#
# clean
#

.PHONY: clean
clean:
	rm -f .check_tree
	rm -f .check_clang-format
