.PHONY: all
all:
	@$(MAKE) help

#
# make
#

.ONESHELL:
SHELL = /bin/bash

MAKE = make -f $(shell find . -name Makefile.checkers)
GENERAL_MAKE = make
MAKEFLAGS += --no-print-directory

#
# tools
#

CMD_CLANG ?= clang

.check_%:
#
	@command -v $* >/dev/null
	if [ $$? -ne 0 ]; then
		echo "missing required tool $*"
		exit 1
	else
		touch $@ # avoid target rebuilds due to inexistent file
	fi

#
# usage
#

.PHONY: help
help:
	@echo ""
	@echo "To check formatting you should run:"
	@echo ""
	@echo "    $$ make -f builder/Makefile.checkers fmt-check"
	@echo ""
	@echo "To fix formatting you should run:"
	@echo ""
	@echo "    $$ make -f builder/Makefile.checkers fmt-fix"
	@echo ""
	@echo "To check code you should run:"
	@echo ""
	@echo "    $$ make -f builder/Makefile.checkers code-check"
	@echo ""
	@echo "Note: you should run fmt-fix before doing a git commmit."
	@echo ""

#
# requirements
#

.PHONY: .check_tree
.check_tree:
#
	@if [ ! -d ./builder ]; then
		echo "you must be in the root directory"
		exit 1
	fi

#
# check formatting (astyle, gofmt)
#

astyle_opts = --style=kr
astyle_opts += --indent=spaces=4
astyle_opts += --attach-inlines
astyle_opts += --attach-closing-while
astyle_opts += --indent-modifiers
astyle_opts += --indent-switches
astyle_opts += --indent-cases
astyle_opts += --indent-preproc-block
astyle_opts += --indent-preproc-define
astyle_opts += --indent-preproc-cond
astyle_opts += --indent-col1-comments
astyle_opts += --break-blocks=all
astyle_opts += --pad-oper
astyle_opts += --pad-comma
astyle_opts += --pad-header
astyle_opts += --unpad-paren
astyle_opts += --delete-empty-lines
astyle_opts += --align-pointer=name
astyle_opts += --align-reference=name
astyle_opts += --break-one-line-headers
astyle_opts += --remove-braces
astyle_opts += --break-return-type
astyle_opts += --convert-tabs
astyle_opts += --remove-comment-prefix
astyle_opts += --max-code-length=100
astyle_opts += --break-after-logical
astyle_opts += --mode=c
astyle_opts += --preserve-date
astyle_opts += --formatted

.PHONY: fmt-check
fmt-check: | \
	.check_tree \
	.check_astyle
#
	@errors=0
	echo "Checking C and eBPF files and headers formatting..."
	astyle $(astyle_opts) ./pkg/ebpf/c/*
	files=$$(find . -name "*.orig" | tee /tmp/check-c-fmt | xargs)
	astyleamount=$$(cat /tmp/check-c-fmt | wc -l)
	if [[ $$astyleamount -ne 0 ]]; then
		errors=1
	fi
	for orig in $$files; do
		diff -u $$orig $${orig/\.orig}
		mv $$orig $${orig/\.orig}
	done
	rm -f /tmp/check-c-fmt
#
	echo "Checking golang files formatting..."
	gofmt -l -s -d . | tee /tmp/check-go-fmt
	gofmtamount=$$(cat /tmp/check-go-fmt | wc -l)
	if [[ $$gofmtamount -ne 0 ]]; then
		errors=1
	fi
	if [[ $$errors -ne 0 ]]; then
		echo
		echo "Please fix formatting errors above!"
		echo "Use: $(MAKE) fmt-fix target".
		echo
		exit 1
	fi
	rm -f /tmp/check-go-fmt

#
# fix formatting (astyle, gofmt)
#

.PHONY: fmt-fix
fmt-fix: | \
	.check_tree \
	.check_astyle
#
	@echo "Fixing C and eBPF files and headers formatting..."
	astyle $(astyle_opts) ./pkg/ebpf/c/*
	find ./ -name '*.orig' -exec rm {} \; # we use git, don't need them
#
	echo "Fixing golang files formatting..."
	gofmt -l -s -d . > /tmp/patch.$$
	patch -p0 < /tmp/patch.$$
	rm /tmp/patch.$$

#
# check code (go vet, static checkers)
#

.PHONY: code-check
code-check: | \
	.check_tree \
	.check_astyle
#
	echo "Checking golang vet..."
	$(GENERAL_MAKE) test-vet


#
# clean
#

.PHONY: clean
clean:
	rm -f .check_astyles
