#
# When a PR is opened or updated: Run Tracee Tests
#
name: PR
on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref (branch, tag, or SHA) to checkout"
        required: true
        default: "main"

  pull_request:
    branches:
      - "main"
      - "release-v*.*.*"
    paths:
      - "!docs/**"
      - "!deploy/**"
      - "!packaging/**"
      - "!**.yaml"
      - "!**.md"
      - "!**.txt"
      - "!**.conf"
      # override previous rules:
      - "docs/docs/flags/**"
      - "docs/man/**"
      - "go.mod"
      - "go.sum"
      - "Makefile"
      - "**.c"
      - "**.h"
      - "**.go"
      - "**.sh"
      - "**/pr.yaml"
      - "**/action.yaml"

concurrency:
  group: ${{ github.event.inputs.ref || github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  #
  # DOC VERIFICATION
  #
  verify-docs:
    name: Verify Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.event.inputs.ref || github.event.pull_request.head.sha || github.ref }}

      - name: Ensure updates of *.1.md and *.1 pairs
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            case "${{ github.base_ref }}" in
              main)
                base_ref="origin/main"
                ;;
              release-v*)
                base_ref="origin/${{ github.base_ref }}"
                ;;
              *)
                echo "Unsupported base branch: ${{ github.base_ref }}"
                exit 1
                ;;
            esac
          fi

          ./scripts/verify_man_md_sync.sh --base-ref ${base_ref} --fetch-depth 1

  #
  # CODE VERIFICATION
  #
  verify-analyze-code:
    name: Verify and Analyze Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.event.inputs.ref || github.event.pull_request.head.sha || github.ref }}
          submodules: true

      - name: Install Dependencies
        uses: ./.github/actions/build-dependencies

      - name: Lint
        run: |
          if test -z "$(gofmt -l .)"; then
            echo "Congrats! There is nothing to fix."
          else
            echo "The following lines should be fixed."
            gofmt -s -d .
            exit 1
          fi

      - name: Lint (Revive)
        run: |
          make check-lint

      - name: Check Code Style
        run: |
          make check-fmt

      - name: Check Golang Vet
        run: |
          make check-vet

      - name: Check with StaticCheck
        run: |
          make check-staticcheck

      - name: Check with errcheck
        run: |
          make check-err

  #
  # TOOLS BUILD VERIFICATION
  #
  verify-tools:
    name: Verify Other Tools
    needs:
      - verify-analyze-code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.event.inputs.ref || github.event.pull_request.head.sha || github.ref }}
          submodules: true

      - name: Install Dependencies
        uses: ./.github/actions/build-dependencies

      - name: Build Tracee Benchmark Tool
        run: |
          make clean
          make tracee-bench

      - name: Build Tracee GPT Docs Tool
        run: |
          make clean
          make tracee-gptdocs

      - name: Build E2E Network Signatures
        run: |
          make clean
          make e2e-net-signatures

      - name: Build E2E Instrumentation Signatures
        run: |
          make clean
          make e2e-inst-signatures

  #
  # CODE TESTS
  #
  unit-tests:
    name: Unit Tests
    needs:
      - verify-analyze-code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.event.inputs.ref || github.event.pull_request.head.sha || github.ref }}
          submodules: true

      - name: Install Dependencies
        uses: ./.github/actions/build-dependencies

      - name: Run Unit Tests
        run: |
          make test-unit

      - name: Run Scripts Unit Tests
        run: |
          make run-scripts-test-unit

  #
  # INTEGRATION TESTS
  #
  integration-tests:
    name: Integration Tests
    needs:
      - verify-analyze-code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.event.inputs.ref || github.event.pull_request.head.sha || github.ref }}
          submodules: true

      - name: Install Dependencies
        uses: ./.github/actions/build-dependencies

      - name: Run Integration Tests
        run: |
          sudo env "PATH=$PATH" make test-integration

  #
  # PERFORMANCE TESTS
  #
  performance-tests:
    name: Performance Tests
    needs:
      - verify-analyze-code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.event.inputs.ref || github.event.pull_request.head.sha || github.ref }}
          submodules: true

      - name: Install Dependencies
        uses: ./.github/actions/build-dependencies

      - name: Run Performance Tests
        run: |
          sudo env "PATH=$PATH" make test-performance
  #
  # FUNCTIONAL TESTS AGAINST DIFFERENT KERNELS
  #
  # generate-matrix:
  #   name: Generate Test Matrix
  #   #needs:
  #   #  - verify-signatures
  #   #  - verify-tools
  #   runs-on: ubuntu-latest
  #   outputs:
  #     matrix01: ${{ steps.set-matrix.outputs.matrix01 }}
  #     matrix02: ${{ steps.set-matrix.outputs.matrix02 }}
  #   steps:
  #     - name: Checkout (sparse)
  #       uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
  #       with:
  #         sparse-checkout: .github/kernels.csv
  #         sparse-checkout-cone-mode: false
  #         fetch-depth: 1

  #     - name: Set Matrix
  #       id: set-matrix
  #       shell: sh
  #       run: |
  #         current_job=0
  #         # Count lines but not comments and not the header
  #         total_jobs=$(grep -v '^#' .github/kernels.csv | tail -n +2 | grep -vc '^$')
  #         half_jobs=$(((total_jobs + 1) / 2))

  #         matrix01="["
  #         matrix02="["

  #         tail -n +2 .github/kernels.csv > .kernels.tmp
  #         while IFS=, read -r name arch ami; do
  #           # Skip comment or empty lines
  #           case "$name" in
  #             ""|\#*) continue ;;
  #           esac

  #           job_name="$name $arch"
  #           suffix="$(date +%6N)"
  #           if [ -z "${suffix}" ]; then
  #             suffix="${current_job}"
  #           fi
  #           entry="{\"job_name\": \"${job_name}\", \"arch\": \"$arch\", \"ami\": \"$ami\", \"suffix\": \"${suffix}\"}"
  #           if [ ${current_job} -lt ${half_jobs} ]; then
  #             [ "${matrix01}" != "[" ] && matrix01="${matrix01},"
  #             matrix01="${matrix01}${entry}"
  #           else
  #             [ "${matrix02}" != "[" ] && matrix02="${matrix02},"
  #             matrix02="${matrix02}${entry}"
  #           fi
  #           current_job=$((current_job + 1))
  #         done < .kernels.tmp
  #         rm .kernels.tmp

  #         matrix01="${matrix01}]"
  #         matrix02="${matrix02}]"

  #         if [ "${matrix01}" = "[]" ]; then
  #           echo "No valid entries found for Matrix 01."
  #           exit 1
  #         fi

  #         echo "matrix01=${matrix01}" >> $GITHUB_OUTPUT
  #         echo "matrix02=${matrix02}" >> $GITHUB_OUTPUT

  #     - name: Show Matrix
  #       id: show-matrix
  #       shell: sh
  #       run: |
  #         echo "Matrix 01:"
  #         echo ${{ steps.set-matrix.outputs.matrix01 }}
  #         echo "Matrix 02:"
  #         echo ${{ steps.set-matrix.outputs.matrix02 }}

  # kernel-tests-matrix01:
  #   name: Kernel Tests Matrix 01
  #   needs:
  #     - generate-matrix
  #   uses: ./.github/workflows/kernel-tests-matrix.yaml
  #   with:
  #     matrix: ${{ needs.generate-matrix.outputs.matrix01 }}

  # delay-before-matrix02:
  #   name: Delay before starting Matrix 02
  #   needs:
  #     - generate-matrix
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Wait before triggering Matrix 02
  #       run: sleep 30

  # kernel-tests-matrix02:
  #   name: Kernel Tests Matrix 02
  #   needs:
  #     - generate-matrix
  #     - delay-before-matrix02
  #   uses: ./.github/workflows/kernel-tests-matrix.yaml
  #   with:
  #     matrix: ${{ needs.generate-matrix.outputs.matrix02 }}

  kernel-tests:
    name: Kernel Tests
    uses: ./.github/workflows/kernel-tests-matrix.yaml
    with:
      ref: ${{ github.event.inputs.ref || github.event.pull_request.head.sha || github.ref }}
