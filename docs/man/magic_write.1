.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-MAGIC\-WRITE" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]magic_write\f[R] \- write operation to a file which changed the
file\[cq]s headers
.SS DESCRIPTION
Triggered when a write operation occurs at offset 0 of a file,
indicating either a new file creation or modification of an existing
file\[cq]s headers.
This event is crucial for monitoring file content changes, particularly
focusing on the initial bytes that often contain file type
identification and metadata.
.PP
The event provides detailed information about the written file,
including its path, initial content bytes, and filesystem metadata.
This information is valuable for identifying potential threats through
file type analysis and content inspection.
.PP
This event is useful for:
.IP \[bu] 2
\f[B]File integrity monitoring\f[R]: Track changes to file headers and
content
.IP \[bu] 2
\f[B]Malware detection\f[R]: Identify suspicious file modifications
.IP \[bu] 2
\f[B]File type analysis\f[R]: Monitor file type changes through header
modifications
.IP \[bu] 2
\f[B]Security auditing\f[R]: Track file creation and modification
patterns
.SS EVENT SETS
\f[B]none\f[R]
.SS DATA FIELDS
.TP
\f[B]pathname\f[R] (\f[I]string\f[R])
The path of the file being written
.TP
\f[B]bytes\f[R] (\f[I][]byte\f[R])
The first 20 bytes of the file\[cq]s content
.TP
\f[B]dev\f[R] (\f[I]uint32\f[R])
The device identifier where the file resides
.TP
\f[B]inode\f[R] (\f[I]uint64\f[R])
The inode number of the file in the filesystem
.SS DEPENDENCIES
\f[B]Kernel Probes:\f[R]
.IP \[bu] 2
vfs_write (kprobe + kretprobe, required): Catch write operations via
write syscall
.IP \[bu] 2
vfs_writev (kprobe + kretprobe, required): Catch write operations via
writev syscall
.IP \[bu] 2
__kernel_write (kprobe + kretprobe, required): Catch kernel\-space write
operations
.SS USE CASES
.IP \[bu] 2
\f[B]Malware detection\f[R]: Identify malicious file modifications or
creations
.IP \[bu] 2
\f[B]File integrity monitoring\f[R]: Track changes to critical system
files
.IP \[bu] 2
\f[B]Security analysis\f[R]: Monitor file content modifications for
potential threats
.IP \[bu] 2
\f[B]Compliance monitoring\f[R]: Track file modifications for audit
requirements
.IP \[bu] 2
\f[B]File type verification\f[R]: Ensure files maintain their expected
types
.SS LIMITATIONS
The event has specific limitations to prevent excessive event
generation:
.IP \[bu] 2
Does not trigger for FIFO files
.IP \[bu] 2
Does not trigger for files without persistent offsets
.IP \[bu] 2
Only captures the first 20 bytes of content
.IP \[bu] 2
Subject to TOCTOU (Time of Check, Time of Use) race conditions
.SS WRITE OPERATIONS
The event captures writes from multiple sources:
.IP \[bu] 2
\f[B]User\-space writes\f[R]: Through write() and writev() syscalls
.IP \[bu] 2
\f[B]Kernel\-space writes\f[R]: Through __kernel_write operations
.IP \[bu] 2
\f[B]Zero\-offset writes\f[R]: Only triggers for writes at file offset 0
.SS SECURITY CONSIDERATIONS
.IP \[bu] 2
\f[B]TOCTOU vulnerabilities\f[R]: File content may change between
detection and analysis
.IP \[bu] 2
\f[B]Race conditions\f[R]: Multiple writes may occur between event
triggers
.IP \[bu] 2
\f[B]Header spoofing\f[R]: Malicious files may attempt to masquerade as
other types
.IP \[bu] 2
\f[B]Partial writes\f[R]: Only initial bytes are captured, missing
subsequent modifications
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]write\f[R]: Write system call events
.IP \[bu] 2
\f[B]writev\f[R]: Vectored write system call events
.IP \[bu] 2
\f[B]vfs_write\f[R]: Virtual filesystem write events
.IP \[bu] 2
\f[B]vfs_writev\f[R]: Virtual filesystem vectored write events
.IP \[bu] 2
\f[B]security_file_open\f[R]: File open security events
