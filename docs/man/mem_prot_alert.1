.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-MEM\-PROT\-ALERT" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]mem_prot_alert\f[R] \- suspicious memory protection change
detection
.SS DESCRIPTION
Triggered when memory region protection changes are detected that are
suspicious for malicious activity or that expose memory to potential
exploitation.
This security signature identifies memory access protection changes that
might enable code injection, allow dynamic code execution, or create
other security vulnerabilities.
.PP
Memory protection changes are critical security indicators as they can
indicate exploitation attempts, code injection, or evasion techniques.
This event provides detailed alerts about specific suspicious patterns
in memory protection modifications.
.PP
This signature is useful for:
.IP \[bu] 2
\f[B]Code injection detection\f[R]: Identify attempts to make data pages
executable
.IP \[bu] 2
\f[B]Exploit prevention\f[R]: Detect memory manipulation techniques used
in attacks
.IP \[bu] 2
\f[B]Dynamic analysis\f[R]: Monitor suspicious memory operations during
runtime
.SS SIGNATURE METADATA
.IP \[bu] 2
\f[B]ID\f[R]: TRC\-1019
.IP \[bu] 2
\f[B]Version\f[R]: 1
.IP \[bu] 2
\f[B]Severity\f[R]: 2 (Moderate threat level)
.IP \[bu] 2
\f[B]Category\f[R]: defense\-evasion
.IP \[bu] 2
\f[B]Technique\f[R]: Exploitation for Privilege Escalation
.IP \[bu] 2
\f[B]MITRE ATT&CK\f[R]: T1068
.SS EVENT SETS
\f[B]signatures\f[R], \f[B]memory\f[R], \f[B]defense_evasion\f[R]
.SS DATA FIELDS
.TP
\f[B]alert\f[R] (\f[I]uint32\f[R])
The specific alert identifier (parsed to meaningful string with
parse\-args flag)
.TP
\f[B]addr\f[R] (\f[I]trace.Pointer\f[R])
The start address of the memory region where the alert occurred
.TP
\f[B]len\f[R] (\f[I]uint64\f[R])
The length of the memory region where the alert occurred
.TP
\f[B]prot\f[R] (\f[I]integer\f[R])
The new access protection for the memory region
.TP
\f[B]prev_prot\f[R] (\f[I]integer\f[R])
The previous access protection of the memory region
.TP
\f[B]pathname\f[R] (\f[I]string\f[R], optional)
The path of the file related to the memory region (if file\-backed)
.TP
\f[B]dev\f[R] (\f[I]uint32\f[R], optional)
The device of the file related to the memory region (if file\-backed)
.TP
\f[B]inode\f[R] (\f[I]uint64\f[R], optional)
The inode of the file related to the memory region (if file\-backed)
.TP
\f[B]ctime\f[R] (\f[I]uint64\f[R], optional)
The last change time of the file related to the memory region (if
file\-backed)
.SS DEPENDENCIES
\f[B]LSM Hooks:\f[R]
.IP \[bu] 2
security_mmap_addr (required): Monitors memory mapping operations for
suspicious permissions
.IP \[bu] 2
security_file_mprotect (required): Monitors memory protection changes
.PP
\f[B]Tracepoints:\f[R]
.IP \[bu] 2
sys_enter (required): Extracts syscall arguments for deeper analysis
.SS ALERT TYPES
Current alert categories and their meanings:
.TP
\f[B]\[lq]Mmaped region with W+E permissions!\[rq]\f[R]
Memory mapping operation creating a region with both write and execute
permissions, enabling dynamic code execution
.TP
\f[B]\[lq]Protection changed to Executable!\[rq]\f[R]
Memory region protection changed to allow execution after having
different permissions previously
.TP
\f[B]\[lq]Protection changed from E to W+E!\[rq]\f[R]
Memory region changed from execute\-only to write+execute, enabling
dynamic code modification and execution
.TP
\f[B]\[lq]Protection changed from W to E!\[rq]\f[R]
Memory region changed from write\-only to execute\-only, potentially
indicating evasion attempt after code preparation
.SS USE CASES
.IP \[bu] 2
\f[B]Exploit detection\f[R]: Identify code injection and memory
corruption exploits
.IP \[bu] 2
\f[B]Malware analysis\f[R]: Monitor malware attempting to execute
injected code
.IP \[bu] 2
\f[B]Incident response\f[R]: Investigate suspicious memory operations
during security events
.IP \[bu] 2
\f[B]Vulnerability research\f[R]: Analyze exploitation techniques and
memory manipulation
.IP \[bu] 2
\f[B]Runtime security\f[R]: Detect real\-time attempts to bypass memory
protections
.SS ATTACK SCENARIOS
Common attack patterns triggering alerts:
.IP \[bu] 2
\f[B]Shellcode injection\f[R]: Making heap/stack regions executable for
shellcode
.IP \[bu] 2
\f[B]ROP/JOP preparation\f[R]: Preparing memory regions for
return/jump\-oriented programming
.IP \[bu] 2
\f[B]Process injection\f[R]: Modifying target process memory for code
injection
.IP \[bu] 2
\f[B]Dynamic code loading\f[R]: Malware unpacking and loading additional
payloads
.IP \[bu] 2
\f[B]JIT spraying\f[R]: Preparing just\-in\-time compiled code for
exploitation
.SS MEMORY PROTECTION COMBINATIONS
Suspicious protection combinations:
.IP \[bu] 2
\f[B]W+E (Write+Execute)\f[R]: Most dangerous, allows dynamic code
creation and execution
.IP \[bu] 2
\f[B]W→E transitions\f[R]: Writing code then making it executable
(common in JIT but also exploits)
.IP \[bu] 2
\f[B]E→W+E transitions\f[R]: Adding write permissions to executable
regions
.IP \[bu] 2
\f[B]Large anonymous W+E regions\f[R]: Unusual for legitimate
applications
.SS LEGITIMATE SCENARIOS
Some legitimate uses that may trigger alerts:
.IP \[bu] 2
\f[B]JIT compilers\f[R]: Languages like Java, .NET, JavaScript with
dynamic compilation
.IP \[bu] 2
\f[B]Dynamic code generation\f[R]: Template engines and runtime code
generators
.IP \[bu] 2
\f[B]Debugging tools\f[R]: Debuggers modifying memory for breakpoints
and analysis
.IP \[bu] 2
\f[B]Runtime loaders\f[R]: Dynamic library loading and symbol resolution
.IP \[bu] 2
\f[B]Self\-modifying code\f[R]: Some legitimate applications using code
modification
.SS EVASION TECHNIQUES
Attackers may attempt to evade detection:
.IP \[bu] 2
\f[B]Small region modifications\f[R]: Making small changes to avoid
detection thresholds
.IP \[bu] 2
\f[B]Timing\-based evasion\f[R]: Spacing out protection changes over
time
.IP \[bu] 2
\f[B]Legitimate tool abuse\f[R]: Using debuggers or JIT environments for
malicious purposes
.IP \[bu] 2
\f[B]Memory fragmentation\f[R]: Splitting malicious code across multiple
regions
.SS MITIGATION STRATEGIES
.IP \[bu] 2
\f[B]DEP/NX enforcement\f[R]: Hardware\-based execution prevention for
data pages
.IP \[bu] 2
\f[B]ASLR\f[R]: Address Space Layout Randomization to complicate
exploitation
.IP \[bu] 2
\f[B]CFI\f[R]: Control Flow Integrity to prevent ROP/JOP attacks
.IP \[bu] 2
\f[B]W\[ha]X policies\f[R]: Enforce write\-xor\-execute memory policies
.IP \[bu] 2
\f[B]Memory tagging\f[R]: Hardware memory tagging for exploit detection
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]security_mmap_addr\f[R]: Memory mapping security checks
.IP \[bu] 2
\f[B]security_file_mprotect\f[R]: Memory protection change security
events
.IP \[bu] 2
\f[B]mmap\f[R]: Memory mapping system call
.IP \[bu] 2
\f[B]mprotect\f[R]: Memory protection change system call
