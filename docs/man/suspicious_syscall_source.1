.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-SUSPICIOUS\-SYSCALL\-SOURCE" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]suspicious_syscall_source\f[R] \- syscall invoked from unusual code
location
.SS DESCRIPTION
Triggered when a system call is invoked from an unusual code location
that is not in a dedicated code region (VMA \- Virtual Memory Area)
mapped from executable files.
This event detects potential code injection, shellcode execution, or
other malicious activities where code is executed from unexpected memory
locations.
.PP
Normally, all legitimate code runs from dedicated code regions mapped
from executable files.
When syscalls are invoked from stack, heap, or anonymous memory regions,
it often indicates malicious activity such as shellcode execution or
code injection attacks.
.PP
This event is useful for:
.IP \[bu] 2
\f[B]Shellcode detection\f[R]: Identify code execution from stack, heap,
or anonymous memory
.IP \[bu] 2
\f[B]Code injection detection\f[R]: Detect various code injection
techniques
.IP \[bu] 2
\f[B]Exploit detection\f[R]: Identify exploitation attempts using
unusual code execution
.SS EVENT SETS
\f[B]derived\f[R], \f[B]security_alert\f[R]
.SS DATA FIELDS
.TP
\f[B]syscall\f[R] (\f[I]int32\f[R])
The system call number invoked from the unusual location (parsed to name
if parse\-arguments enabled)
.TP
\f[B]ip\f[R] (\f[I]trace.Pointer\f[R])
The instruction pointer address from which the syscall was invoked
.TP
\f[B]vma_type\f[R] (\f[I]string\f[R])
Description of the VMA type containing the code that triggered the
syscall
.TP
\f[B]vma_start\f[R] (\f[I]trace.Pointer\f[R])
Start address of the VMA containing the triggering code
.TP
\f[B]vma_size\f[R] (\f[I]uint64\f[R])
Size of the VMA containing the triggering code
.TP
\f[B]vma_flags\f[R] (\f[I]uint64\f[R])
VMA flags (parsed to names if parse\-arguments enabled)
.SS DEPENDENCIES
\f[B]Kernel Probes:\f[R]
.IP \[bu] 2
Individual syscall kprobes (configurable): Placed on selected syscalls
for analysis
.SS CONFIGURATION
Use event parameters to specify which syscalls to monitor:
.IP
.EX
tracee \-\-events suspicious_syscall_source.args.syscall=open,openat
.EE
.SS USE CASES
.IP \[bu] 2
\f[B]Shellcode detection\f[R]: Identify execution of injected shellcode
from memory
.IP \[bu] 2
\f[B]Exploit detection\f[R]: Detect code injection and ROP/JOP attacks
.IP \[bu] 2
\f[B]Malware analysis\f[R]: Identify malicious code execution patterns
.IP \[bu] 2
\f[B]Security monitoring\f[R]: Detect unusual code execution locations
.IP \[bu] 2
\f[B]Incident response\f[R]: Investigate code injection during security
incidents
.SS SUSPICIOUS SCENARIOS
Common scenarios triggering this event:
.IP \[bu] 2
\f[B]Stack\-based shellcode\f[R]: Code execution from stack memory
.IP \[bu] 2
\f[B]Heap\-based shellcode\f[R]: Code execution from heap allocations
.IP \[bu] 2
\f[B]Anonymous memory execution\f[R]: Code in non\-file\-backed memory
regions
.IP \[bu] 2
\f[B]Packed executables\f[R]: Self\-modifying or dynamically unpacked
code
.IP \[bu] 2
\f[B]JIT compilation\f[R]: Just\-in\-time compiled code (may be
legitimate)
.SS PERFORMANCE OPTIMIZATION
.IP \[bu] 2
\f[B]Selective monitoring\f[R]: Use syscall parameters to monitor
specific syscalls only
.IP \[bu] 2
\f[B]Deduplication\f[R]: Unique combinations of process, syscall, and
VMA reported only once
.IP \[bu] 2
\f[B]Overhead reduction\f[R]: Focuses on specified syscalls rather than
all syscalls
.SS FALSE POSITIVES
Legitimate scenarios that may trigger this event:
.IP \[bu] 2
\f[B]JIT compilers\f[R]: Languages like Java, .NET, JavaScript with JIT
compilation
.IP \[bu] 2
\f[B]Dynamic code generation\f[R]: Legitimate applications generating
code at runtime
.IP \[bu] 2
\f[B]Packed executables\f[R]: Legitimate software using code
packing/compression
.IP \[bu] 2
\f[B]Self\-modifying code\f[R]: Some legitimate applications modify
their own code
.SS MITIGATION STRATEGIES
.IP \[bu] 2
\f[B]DEP/NX bit\f[R]: Hardware\-based execution prevention for data
pages
.IP \[bu] 2
\f[B]ASLR\f[R]: Address Space Layout Randomization to complicate
exploitation
.IP \[bu] 2
\f[B]CFI\f[R]: Control Flow Integrity to prevent ROP/JOP attacks
.IP \[bu] 2
\f[B]Stack canaries\f[R]: Detection of stack\-based buffer overflows
.SS ANALYSIS TECHNIQUES
When investigating detections:
.IP "1." 3
\f[B]VMA analysis\f[R]: Examine the memory region type and permissions
.IP "2." 3
\f[B]Process context\f[R]: Check if the process is known to use JIT or
dynamic code
.IP "3." 3
\f[B]Syscall patterns\f[R]: Analyze which syscalls are being invoked
unusually
.IP "4." 3
\f[B]Timeline analysis\f[R]: Correlate with other suspicious activities
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]process_vm_write_code_injection\f[R]: Direct code injection
detection
.IP \[bu] 2
\f[B]ptrace_code_injection\f[R]: Ptrace\-based code injection
.IP \[bu] 2
\f[B]mem_prot_alert\f[R]: Memory protection violations
.IP \[bu] 2
\f[B]stack_pivot\f[R]: Stack manipulation detection
