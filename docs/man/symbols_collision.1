.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-SYMBOLS\-COLLISION" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]symbols_collision\f[R] \- detect symbol collisions between shared
objects
.SS DESCRIPTION
This event is triggered when a shared object is loaded into a process
and has symbol collisions with another already\-loaded shared object.
A symbol collision occurs when two shared objects export the same symbol
name, potentially leading to unexpected behavior or security issues.
.PP
The event helps identify cases where a shared object might override
symbols from another library, which could be either legitimate (e.g.,
symbol versioning) or malicious (e.g., library hijacking).
.PP
This event is useful for:
.IP \[bu] 2
\f[B]Library conflict detection\f[R]: Identify symbol naming conflicts
.IP \[bu] 2
\f[B]Security monitoring\f[R]: Detect potential library hijacking
.IP \[bu] 2
\f[B]Debugging\f[R]: Troubleshoot symbol resolution issues
.IP \[bu] 2
\f[B]Quality assurance\f[R]: Verify library compatibility
.SS EVENT SETS
\f[B]lsm_hooks\f[R], \f[B]fs\f[R], \f[B]fs_file_ops\f[R],
\f[B]proc\f[R], \f[B]proc_mem\f[R]
.SS DATA FIELDS
.TP
\f[B]loaded_path\f[R] (\f[I]string\f[R])
The path of the newly loaded shared object file
.TP
\f[B]collision_path\f[R] (\f[I]string\f[R])
The path of the already\-loaded shared object that has symbol collisions
.TP
\f[B]symbols\f[R] (\f[I][]string\f[R])
List of symbol names that collide between the two shared objects
.SS DEPENDENCIES
.IP \[bu] 2
\f[CR]shared_object_loaded\f[R]: Provides information about loaded
shared objects
.IP \[bu] 2
\f[CR]sched_process_exec\f[R]: Used for mount namespace cache and
performance optimization
.SS USE CASES
.IP \[bu] 2
\f[B]Library hijacking detection\f[R]: Identify attempts to override
libc or other critical library functions
.IP \[bu] 2
\f[B]Dependency analysis\f[R]: Understand symbol conflicts in complex
applications
.IP \[bu] 2
\f[B]Security auditing\f[R]: Monitor for unexpected symbol overrides
.IP \[bu] 2
\f[B]Debug symbol resolution\f[R]: Troubleshoot which library version is
actually used
.SS CONFIGURATION
The event can be configured using data filtering:
.IP \[bu] 2
\f[B]symbols\f[R]: Specify which symbols to watch for collisions
.RS 2
.IP \[bu] 2
Uses \f[CR]=\f[R] or \f[CR]!=\f[R] operators
.IP \[bu] 2
No wildcard support
.IP \[bu] 2
Default watches all symbols
.IP \[bu] 2
Example: \f[CR]symbols_collision.data.symbols=malloc,free\f[R]
.RE
.IP \[bu] 2
\f[B]loaded_path/collision_path\f[R]: Filter by specific libraries
.RS 2
.IP \[bu] 2
Example:
\f[CR]symbols_collision.data.loaded_path=/usr/lib/libc.so.6\f[R]
.RE
.SS IMPLEMENTATION NOTES
.IP \[bu] 2
Implemented in user\-mode for deep symbol analysis
.IP \[bu] 2
Uses caching to improve performance
.IP \[bu] 2
May have performance impact due to file operations
.IP \[bu] 2
Event size varies with number of collided symbols
.IP \[bu] 2
Race conditions possible between detection and file access
.SS COMMON PATTERNS
Common legitimate collision scenarios:
.IP \[bu] 2
Standard library variations (e.g., libc and libm)
.IP \[bu] 2
Symbol versioning in newer library versions
.IP \[bu] 2
Intentional symbol overriding for compatibility
.IP \[bu] 2
Debug/profiling library instrumentation
.SS SECURITY IMPLICATIONS
Symbol collisions can indicate:
.IP \[bu] 2
Library hijacking attempts
.IP \[bu] 2
Malicious symbol interposition
.IP \[bu] 2
Supply chain attacks
.IP \[bu] 2
Dynamic linker manipulation
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]shared_object_loaded\f[R]: Track library loading
.IP \[bu] 2
\f[B]symbols_loaded\f[R]: Monitor symbol loading
.IP \[bu] 2
\f[B]file_modification\f[R]: Detect library file changes
.IP \[bu] 2
\f[B]process_vm_write\f[R]: Detect runtime symbol table modifications
