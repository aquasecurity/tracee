.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-SCHED\-PROCESS\-EXEC" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]sched_process_exec\f[R] \- process execution scheduler event
.SS DESCRIPTION
Triggered when a new process is executed, capturing detailed information
about the executed process through the kernel\[cq]s scheduler
tracepoint.
This event provides comprehensive process execution details including
binary information, interpreter details, arguments, environment
variables, and execution context.
.PP
This is a kernel\-level tracepoint that fires whenever the scheduler
handles process execution, providing more detailed information than the
basic \f[CR]execve\f[R] system call.
It\[cq]s particularly useful for understanding the complete execution
context and metadata about executed programs.
.PP
This event is useful for:
.IP \[bu] 2
\f[B]Comprehensive process monitoring\f[R]: Track detailed execution
information including file metadata
.IP \[bu] 2
\f[B]Security analysis\f[R]: Monitor process execution with rich
contextual information
.IP \[bu] 2
\f[B]Binary analysis\f[R]: Understand interpreter usage and executable
characteristics
.SS EVENT SETS
\f[B]none\f[R]
.SS DATA FIELDS
.TP
\f[B]cmdpath\f[R] (\f[I]string\f[R])
The path of the command being executed
.TP
\f[B]pathname\f[R] (\f[I]string\f[R])
Path to the executable binary
.TP
\f[B]dev\f[R] (\f[I]uint32\f[R])
Device number associated with the executable
.TP
\f[B]inode\f[R] (\f[I]uint64\f[R])
Inode number of the executable
.TP
\f[B]ctime\f[R] (\f[I]uint64\f[R])
Creation time of the executable
.TP
\f[B]inode_mode\f[R] (\f[I]uint16\f[R])
Mode of the inode for the executable (permissions and file type)
.TP
\f[B]interpreter_pathname\f[R] (\f[I]string\f[R])
Path of the interpreter for the executable (if applicable)
.TP
\f[B]interpreter_dev\f[R] (\f[I]uint32\f[R])
Device number associated with the interpreter
.TP
\f[B]interpreter_inode\f[R] (\f[I]uint64\f[R])
Inode number of the interpreter
.TP
\f[B]interpreter_ctime\f[R] (\f[I]uint64\f[R])
Creation time of the interpreter
.TP
\f[B]argv\f[R] (\f[I][]string\f[R])
Array of arguments passed to the binary during execution
.TP
\f[B]interp\f[R] (\f[I]string\f[R])
Specifies the interpreter of the binary (from shebang line)
.TP
\f[B]stdin_type\f[R] (\f[I]uint16\f[R])
Mode of the standard input (file type and permissions)
.TP
\f[B]stdin_path\f[R] (\f[I]string\f[R])
Path of the standard input source
.TP
\f[B]invoked_from_kernel\f[R] (\f[I]bool\f[R])
Flag indicating if the process was initiated by the kernel
.TP
\f[B]env\f[R] (\f[I][]string\f[R])
Environment variables associated with the process
.SS DEPENDENCIES
\f[B]Kernel Tracepoint:\f[R]
.IP \[bu] 2
sched_process_exec (required): Raw tracepoint in the kernel scheduler
.SS USE CASES
.IP \[bu] 2
\f[B]Security monitoring\f[R]: Comprehensive tracking of process
execution with metadata
.IP \[bu] 2
\f[B]Digital forensics\f[R]: Detailed process execution analysis with
file system context
.IP \[bu] 2
\f[B]Compliance auditing\f[R]: Complete audit trail of executed programs
and their context
.IP \[bu] 2
\f[B]Malware analysis\f[R]: Understanding execution patterns and binary
characteristics
.IP \[bu] 2
\f[B]Performance analysis\f[R]: Monitoring process creation overhead and
patterns
.SS EXECUTION CONTEXT
This event captures execution at the scheduler level, providing:
.PP
\f[B]Binary Information:\f[R] \- Complete file system metadata (device,
inode, timestamps) \- File permissions and type information \- Path
resolution and location details
.PP
\f[B]Interpreter Details:\f[R] \- Script interpreter information from
shebang lines \- Interpreter binary metadata and location \-
Multi\-level interpretation chains
.PP
\f[B]Execution Environment:\f[R] \- Complete command line arguments \-
Full environment variable set \- Standard I/O configuration and sources
.SS KERNEL VS USER EXECUTION
The \f[CR]invoked_from_kernel\f[R] field distinguishes between:
.PP
\f[B]Kernel\-initiated processes:\f[R] \- Kernel threads and workers \-
System\-initiated tasks and helpers \- Device drivers and subsystem
processes
.PP
\f[B]User\-initiated processes:\f[R] \- User commands and applications
\- Shell\-launched programs \- Application\-spawned child processes
.SS INTERPRETER HANDLING
Special handling for interpreted programs:
.PP
\f[B]Script Execution:\f[R] \- Shebang (#!)
line parsing and interpreter identification \- Interpreter binary
location and metadata \- Script vs binary execution distinction
.PP
\f[B]Dynamic Linking:\f[R] \- Dynamic linker/loader information \-
Shared library resolution context \- Runtime loading characteristics
.SS STDIN ANALYSIS
Standard input source tracking:
.PP
\f[B]Input Types:\f[R] \- Terminal/TTY input for interactive programs \-
File redirection sources \- Pipe and socket input sources \- Device
input (e.g., /dev/null, /dev/zero)
.SS PERFORMANCE CONSIDERATIONS
This event provides extensive information but may impact performance:
.PP
\f[B]High Overhead Scenarios:\f[R] \- Systems with frequent process
creation \- Container environments with many short\-lived processes \-
Build systems and CI/CD pipelines
.PP
\f[B]Optimization Strategies:\f[R] \- Filter by specific processes or
paths when possible \- Use sampling for high\-frequency environments \-
Consider selective field collection
.SS SECURITY ANALYSIS
Rich context enables sophisticated security analysis:
.PP
\f[B]Anomaly Detection:\f[R] \- Unusual execution patterns or locations
\- Unexpected interpreter usage \- Abnormal argument or environment
patterns
.PP
\f[B]Threat Hunting:\f[R] \- Malware execution characteristics \-
Living\-off\-the\-land technique detection \- Supply chain compromise
indicators
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]execve\f[R]: System call level process execution
.IP \[bu] 2
\f[B]sched_process_fork\f[R]: Process creation scheduler event
.IP \[bu] 2
\f[B]sched_process_exit\f[R]: Process termination scheduler event
.IP \[bu] 2
\f[B]security_bprm_check\f[R]: LSM hook for executable security
validation
