.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-PROC\-MEM\-CODE\-INJECTION" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]proc_mem_code_injection\f[R] \- detect code injection through
/proc/[pid]/mem
.SS DESCRIPTION
This event detects attempts to inject code into processes by writing to
their memory through the /proc/[pid]/mem interface.
This technique allows direct manipulation of process memory and is
commonly used by attackers to inject malicious code, modify process
behavior, or establish persistence.
.PP
Code injection through /proc/[pid]/mem is particularly dangerous as it
allows attackers to execute arbitrary code within the context of another
process, potentially bypassing security controls or escalating
privileges by targeting privileged processes.
.SS SIGNATURE METADATA
.IP \[bu] 2
\f[B]ID\f[R]: TRC\-1024
.IP \[bu] 2
\f[B]Version\f[R]: 1
.IP \[bu] 2
\f[B]Severity\f[R]: 3
.IP \[bu] 2
\f[B]Category\f[R]: defense\-evasion
.IP \[bu] 2
\f[B]Technique\f[R]: Proc Memory
.IP \[bu] 2
\f[B]MITRE ID\f[R]:
attack\-pattern\[en]d201d4cc\-214d\-4a74\-a1ba\-b3fa09fd4591
.IP \[bu] 2
\f[B]MITRE External ID\f[R]: T1055.009
.SS EVENT SETS
\f[B]signatures\f[R], \f[B]default\f[R]
.SS DATA FIELDS
This signature event uses fields from the underlying security_file_open
event:
.TP
\f[B]pathname\f[R] (\f[I]string\f[R])
Path to the process memory file being written
.TP
\f[B]flags\f[R] (\f[I]string\f[R])
File access flags indicating write attempt
.TP
\f[B]pid\f[R] (\f[I]int32\f[R])
Process ID performing the injection
.TP
\f[B]target_pid\f[R] (\f[I]int32\f[R])
Process ID being injected into
.SS DEPENDENCIES
.IP \[bu] 2
\f[CR]security_file_open\f[R]: Monitor memory file write attempts
.SS USE CASES
.IP \[bu] 2
\f[B]Code injection detection\f[R]: Identify memory\-based attacks
.IP \[bu] 2
\f[B]Process integrity\f[R]: Monitor unauthorized modifications
.IP \[bu] 2
\f[B]Malware detection\f[R]: Spot injection\-based malware
.IP \[bu] 2
\f[B]Runtime protection\f[R]: Prevent unauthorized code execution
.SS INJECTION TECHNIQUES
Common injection methods:
.IP \[bu] 2
\f[B]Shellcode injection\f[R]: Writing executable code
.IP \[bu] 2
\f[B]Library injection\f[R]: Loading malicious libraries
.IP \[bu] 2
\f[B]Function hooking\f[R]: Modifying function pointers
.IP \[bu] 2
\f[B]Return\-oriented programming\f[R]: Chain existing code
.IP \[bu] 2
\f[B]Thread injection\f[R]: Creating remote threads
.SS ATTACK VECTORS
Common malicious uses include:
.IP \[bu] 2
\f[B]Code execution\f[R]: Running arbitrary code
.IP \[bu] 2
\f[B]Process hollowing\f[R]: Replacing process memory
.IP \[bu] 2
\f[B]Function hooking\f[R]: Intercepting calls
.IP \[bu] 2
\f[B]Persistence\f[R]: Maintaining access
.IP \[bu] 2
\f[B]Privilege escalation\f[R]: Targeting privileged processes
.SS RISK ASSESSMENT
Risk factors to consider:
.IP \[bu] 2
\f[B]Process Context\f[R]: Runs as target process
.IP \[bu] 2
\f[B]Permission Bypass\f[R]: Inherits process privileges
.IP \[bu] 2
\f[B]Detection Evasion\f[R]: Memory\-only execution
.IP \[bu] 2
\f[B]System Impact\f[R]: Affects critical processes
.SS LEGITIMATE USES
Valid memory modification scenarios:
.IP \[bu] 2
Debuggers
.IP \[bu] 2
Profilers
.IP \[bu] 2
Hot patching
.IP \[bu] 2
Runtime instrumentation
.SS MITIGATION
Recommended security controls:
.IP \[bu] 2
Process isolation
.IP \[bu] 2
Memory protection
.IP \[bu] 2
Write restrictions
.IP \[bu] 2
Integrity monitoring
.IP \[bu] 2
Behavior analysis
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]proc_mem_access\f[R]: Process memory access
.IP \[bu] 2
\f[B]process_vm_write_inject\f[R]: Process memory writes
.IP \[bu] 2
\f[B]dynamic_code_loading\f[R]: Runtime code execution
.IP \[bu] 2
\f[B]mem_prot_alert\f[R]: Memory protection alerts
