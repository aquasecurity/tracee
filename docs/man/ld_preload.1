.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-LD\-PRELOAD" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]ld_preload\f[R] \- detect library preload code injection attempts
.SS DESCRIPTION
This event detects potential code injection attempts using library
preloading mechanisms.
It monitors the use of \f[CR]LD_PRELOAD\f[R] and
\f[CR]LD_LIBRARY_PATH\f[R] environment variables, as well as
modifications to \f[CR]/etc/ld.so.preload\f[R].
These mechanisms can be exploited to inject malicious code by forcing
programs to load unauthorized libraries before their legitimate
dependencies.
.PP
The event provides comprehensive monitoring of both environment\-based
and file\-based preloading techniques, helping detect various code
injection and function hooking attempts.
.SS SIGNATURE METADATA
.IP \[bu] 2
\f[B]ID\f[R]: TRC\-107
.IP \[bu] 2
\f[B]Version\f[R]: 1
.IP \[bu] 2
\f[B]Severity\f[R]: 2
.IP \[bu] 2
\f[B]Category\f[R]: persistence
.IP \[bu] 2
\f[B]Technique\f[R]: Hijack Execution Flow
.IP \[bu] 2
\f[B]MITRE ID\f[R]:
attack\-pattern\[en]aedfca76\-3b30\-4866\-b2aa\-0f1d7fd1e4b6
.IP \[bu] 2
\f[B]MITRE External ID\f[R]: T1574
.SS EVENT SETS
\f[B]signatures\f[R], \f[B]default\f[R]
.SS DATA FIELDS
This signature event uses fields from multiple underlying events:
.TP
\f[B]env_vars\f[R] (\f[I]map[string]string\f[R])
Environment variables related to library loading
.TP
\f[B]pathname\f[R] (\f[I]string\f[R])
Path to preload configuration being accessed
.TP
\f[B]flags\f[R] (\f[I]string\f[R])
File access flags for preload operations
.TP
\f[B]old_path\f[R] (\f[I]string\f[R])
Original path in rename operations
.TP
\f[B]new_path\f[R] (\f[I]string\f[R])
New path in rename operations
.SS DEPENDENCIES
.IP \[bu] 2
\f[CR]sched_process_exec\f[R]: Monitor process environment variables
.IP \[bu] 2
\f[CR]security_file_open\f[R]: Track preload file access
.IP \[bu] 2
\f[CR]security_inode_rename\f[R]: Monitor preload file renames
.SS USE CASES
.IP \[bu] 2
\f[B]Code injection detection\f[R]: Identify unauthorized library
loading
.IP \[bu] 2
\f[B]Runtime integrity\f[R]: Monitor library load order tampering
.IP \[bu] 2
\f[B]Function hooking\f[R]: Detect API interception attempts
.IP \[bu] 2
\f[B]Persistence detection\f[R]: Identify malicious library persistence
.SS PRELOAD MECHANISMS
Common preload vectors:
.IP \[bu] 2
\f[B]LD_PRELOAD\f[R]: Environment variable for single library
.IP \[bu] 2
\f[B]LD_LIBRARY_PATH\f[R]: Search path manipulation
.IP \[bu] 2
\f[B]/etc/ld.so.preload\f[R]: System\-wide preload configuration
.IP \[bu] 2
\f[B]RPATH/RUNPATH\f[R]: Binary\-specific library paths
.SS ATTACK VECTORS
Common malicious uses include:
.IP \[bu] 2
\f[B]Function hooking\f[R]: Intercept library calls
.IP \[bu] 2
\f[B]Credential theft\f[R]: Hook authentication functions
.IP \[bu] 2
\f[B]Anti\-debugging\f[R]: Intercept debugging APIs
.IP \[bu] 2
\f[B]Persistence\f[R]: System\-wide library injection
.SS RISK ASSESSMENT
Risk factors to consider:
.IP \[bu] 2
\f[B]System\-Wide Impact\f[R]: Affects all dynamic executables
.IP \[bu] 2
\f[B]Privilege Escalation\f[R]: Potential for elevated access
.IP \[bu] 2
\f[B]Stealth Capability\f[R]: Hard to detect once loaded
.IP \[bu] 2
\f[B]Persistence\f[R]: Survives process restarts
.SS LEGITIMATE USES
Valid preload scenarios:
.IP \[bu] 2
Debugging tools
.IP \[bu] 2
Profiling libraries
.IP \[bu] 2
API compatibility layers
.IP \[bu] 2
System monitoring tools
.SS MITIGATION
Recommended security controls:
.IP \[bu] 2
Restrict environment variables
.IP \[bu] 2
Monitor preload files
.IP \[bu] 2
Use static linking
.IP \[bu] 2
Implement library pinning
.IP \[bu] 2
Regular integrity checks
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]security_bprm_check\f[R]: Binary execution security
.IP \[bu] 2
\f[B]shared_object_loaded\f[R]: Library loading events
.IP \[bu] 2
\f[B]symbols_loaded\f[R]: Symbol resolution tracking
.IP \[bu] 2
\f[B]dynamic_code_loading\f[R]: Runtime code execution
