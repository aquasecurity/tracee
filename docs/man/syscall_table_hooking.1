.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-SYSCALL\-TABLE\-HOOKING" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]syscall_hooking\f[R] \- detect system call table hooking
.SS DESCRIPTION
This event detects malicious hooking of the system call table in the
kernel.
System calls (syscalls) provide the interface between user applications
and the kernel, making them a critical security boundary.
By hooking the syscall table, attackers can intercept, modify, or
redirect system calls, potentially gaining complete control over system
operations.
.PP
This type of manipulation is a common technique used by rootkits and
kernel\-level malware to hide their presence, intercept system
operations, and maintain persistent control.
The presence of syscall table hooks, especially when combined with
hidden kernel modules, strongly indicates kernel compromise.
.SS SIGNATURE METADATA
.IP \[bu] 2
\f[B]ID\f[R]: TRC\-1030
.IP \[bu] 2
\f[B]Version\f[R]: 1
.IP \[bu] 2
\f[B]Severity\f[R]: 3
.IP \[bu] 2
\f[B]Category\f[R]: defense\-evasion
.IP \[bu] 2
\f[B]Technique\f[R]: Rootkit
.IP \[bu] 2
\f[B]MITRE ID\f[R]:
attack\-pattern\[en]0f20e3cb\-245b\-4a61\-8a91\-2d93f7cb0e9b
.IP \[bu] 2
\f[B]MITRE External ID\f[R]: T1014
.SS EVENT SETS
\f[B]signatures\f[R], \f[B]default\f[R]
.SS DATA FIELDS
This signature event uses fields from the underlying hooked_syscalls
event:
.TP
\f[B]syscall_id\f[R] (\f[I]int32\f[R])
ID of the hooked system call
.TP
\f[B]syscall_address\f[R] (\f[I]trace.Pointer\f[R])
Current address of the system call handler
.TP
\f[B]original_address\f[R] (\f[I]trace.Pointer\f[R])
Expected address of the system call handler
.TP
\f[B]hook_owner\f[R] (\f[I]string\f[R])
Module responsible for the hook
.SS DEPENDENCIES
.IP \[bu] 2
\f[CR]hooked_syscalls\f[R]: Monitor syscall table modifications
.SS USE CASES
.IP \[bu] 2
\f[B]Rootkit detection\f[R]: Identify kernel\-level malware
.IP \[bu] 2
\f[B]System integrity\f[R]: Monitor kernel function hooks
.IP \[bu] 2
\f[B]Security monitoring\f[R]: Detect kernel compromises
.IP \[bu] 2
\f[B]Incident response\f[R]: Analyze kernel modifications
.SS SYSCALL HOOKING
Common hooking techniques:
.IP \[bu] 2
\f[B]Table modification\f[R]: Direct syscall table changes
.IP \[bu] 2
\f[B]Jump/trampoline\f[R]: Redirect execution flow
.IP \[bu] 2
\f[B]Inline hooking\f[R]: Modify function code
.IP \[bu] 2
\f[B]IDT/GDT hooks\f[R]: Interrupt table manipulation
.IP \[bu] 2
\f[B]VDSO/VSYSCALL\f[R]: User\-space syscall interception
.SS ATTACK VECTORS
Common malicious uses include:
.IP \[bu] 2
\f[B]Process hiding\f[R]: Conceal malicious processes
.IP \[bu] 2
\f[B]File hiding\f[R]: Hide malware components
.IP \[bu] 2
\f[B]Command interception\f[R]: Modify system operations
.IP \[bu] 2
\f[B]Privilege escalation\f[R]: Bypass security checks
.SS RISK ASSESSMENT
Risk factors to consider:
.IP \[bu] 2
\f[B]Kernel Level\f[R]: Direct kernel manipulation
.IP \[bu] 2
\f[B]System\-Wide\f[R]: Affects all processes
.IP \[bu] 2
\f[B]Persistence\f[R]: Survives user\-space security
.IP \[bu] 2
\f[B]Stealth\f[R]: Hard to detect from userspace
.SS LEGITIMATE USES
Rare but valid scenarios:
.IP \[bu] 2
Security monitoring
.IP \[bu] 2
System tracing
.IP \[bu] 2
Performance profiling
.IP \[bu] 2
Debugging tools
.SS MITIGATION
Recommended security controls:
.IP \[bu] 2
Kernel integrity monitoring
.IP \[bu] 2
Module signing
.IP \[bu] 2
Secure boot
.IP \[bu] 2
Memory protection
.IP \[bu] 2
Regular integrity checks
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]proc_fops_hooking\f[R]: Proc filesystem hooks
.IP \[bu] 2
\f[B]hidden_kernel_module\f[R]: Hidden module detection
.IP \[bu] 2
\f[B]ftrace_hook\f[R]: Function tracing hooks
.IP \[bu] 2
\f[B]hooked_syscall\f[R]: Individual syscall hooks
