.\" Automatically generated by Pandoc 3.1.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "TRACEE-OUTPUT" "1" "2023/10" "" "Tracee Output Flag Manual"
.hy
.SS NAME
.PP
tracee \f[B]--output\f[R] - Control how and where output is printed
.SS SYNOPSIS
.PP
tracee \f[B]--output\f[R] <format[:file,\&...]> |
gotemplate=template[:file,\&...]
| forward:url | webhook:url |
option:{stack-addresses,exec-env,relative-time,exec-hash,parse-arguments,parse-arguments-fds,sort-events}
\&...
.SS DESCRIPTION
.PP
The \f[B]--output\f[R] flag allows you to control how and where the
output is printed.
.PP
Format options:
.IP \[bu] 2
\f[B]table[:/path/to/file,\&...]\f[R]: Output events in table format.
The default path to the file is stdout.
Multiple file paths can be specified, separated by commas.
.IP \[bu] 2
\f[B]table-verbose[:/path/to/file,\&...]\f[R]: Output events in table
format with extra fields per event.
The default path to the file is stdout.
Multiple file paths can be specified, separated by commas.
.IP \[bu] 2
\f[B]json[:/path/to/file,\&...]\f[R]: Output events in JSON format.
The default path to the file is stdout.
Multiple file paths can be specified, separated by commas.
.IP \[bu] 2
\f[B]gob[:/path/to/file,\&...]\f[R]: Output events in gob format.
The default path to the file is stdout.
Multiple file paths can be specified, separated by commas.
.IP \[bu] 2
\f[B]gotemplate=/path/to/template[:/path/to/file,\&...]\f[R]: Output
events formatted using a given Go template file.
The default path to the file is stdout.
Multiple file paths can be specified, separated by commas.
.IP \[bu] 2
\f[B]none\f[R]: Ignore the stream of events output.
This is usually used with the \f[B]--capture\f[R] flag.
.PP
Fluent Forward options:
.IP \[bu] 2
\f[B]forward:url\f[R]: Send events in JSON format using the Forward
protocol to a Fluent receiver.
Specify the URL of the Fluent receiver.
.PP
Webhook options:
.IP \[bu] 2
\f[B]webhook:url\f[R]: Send events in JSON format to the specified
webhook URL.
.PP
Other options:
.IP \[bu] 2
\f[B]option:{stack-addresses,exec-env,relative-time,exec-hash,parse-arguments,sort-events}\f[R]:
Augment output according to the given options.
The default is none.
Multiple options can be specified, separated by commas.
.RS 2
.IP \[bu] 2
\f[B]stack-addresses\f[R]: Include stack memory addresses for each
event.
.IP \[bu] 2
\f[B]exec-env\f[R]: When tracing execve/execveat, show the environment
variables that were used for execution.
.IP \[bu] 2
\f[B]relative-time\f[R]: Use relative timestamp instead of wall
timestamp for events.
.IP \[bu] 2
\f[B]exec-hash\f[R]: When tracing sched_process_exec, show the file hash
(sha256) and ctime.
.IP \[bu] 2
\f[B]parse-arguments\f[R]: Do not show raw machine-readable values for
event arguments.
Instead, parse them into human-readable strings.
.IP \[bu] 2
\f[B]parse-arguments-fds\f[R]: Enable parse-arguments and enrich file
descriptors (fds) with their file path translation.
This can cause pipeline slowdowns.
.IP \[bu] 2
\f[B]sort-events\f[R]: Enable sorting events before passing them to the
output.
This may decrease the overall program efficiency.
.RE
.SS EXAMPLES
.IP \[bu] 2
To output events as JSON to stdout, use the following flag:
.RS 2
.IP
.nf
\f[C]
--output json
\f[R]
.fi
.RE
.IP \[bu] 2
To output events as JSON to \f[V]/my/out\f[R], use the following flag:
.RS 2
.IP
.nf
\f[C]
--output json:/my/out
\f[R]
.fi
.RE
.IP \[bu] 2
To output events as the provided Go template to stdout, use the
following flag:
.RS 2
.IP
.nf
\f[C]
--output gotemplate=/path/to/my.tmpl
\f[R]
.fi
.RE
.IP \[bu] 2
To output events in gob format to \f[V]/my/out\f[R], use the following
flag:
.RS 2
.IP
.nf
\f[C]
--output gob:/my/out
\f[R]
.fi
.RE
.IP \[bu] 2
To output events as JSON to stdout and as gob to \f[V]/my/out\f[R], use
the following flag:
.RS 2
.IP
.nf
\f[C]
--output json --output gob:/my/out
\f[R]
.fi
.RE
.IP \[bu] 2
To output events as JSON to both \f[V]/my/out\f[R] and
\f[V]/my/out2\f[R], use the following flag:
.RS 2
.IP
.nf
\f[C]
--output json:/my/out1,/my/out2
\f[R]
.fi
.RE
.IP \[bu] 2
To ignore events output, use the following flag:
.RS 2
.IP
.nf
\f[C]
--output none
\f[R]
.fi
.RE
.IP \[bu] 2
To output events as a table with stack addresses, use the following
flag:
.RS 2
.IP
.nf
\f[C]
--output table --output option:stack-addresses
\f[R]
.fi
.RE
.IP \[bu] 2
To output events via the Forward protocol to \f[V]127.0.0.1\f[R] on port
\f[V]24224\f[R] with the tag `tracee' using TCP, use the following flag:
.RS 2
.IP
.nf
\f[C]
--output forward:tcp://user:pass\[at]127.0.0.1:24224?tag=tracee
\f[R]
.fi
.RE
.IP \[bu] 2
To output events to the webhook endpoint \f[V]http://webhook:8080\f[R],
use the following flag:
.RS 2
.IP
.nf
\f[C]
--output webhook:http://webhook:8080
\f[R]
.fi
.RE
.IP \[bu] 2
To output events to the webhook endpoint \f[V]http://webhook:8080\f[R]
with a timeout of 5 seconds, use the following flag:
.RS 2
.IP
.nf
\f[C]
--output webhook:http://webhook:8080?timeout=5s
\f[R]
.fi
.RE
