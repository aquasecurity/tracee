.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-HOOKED\-SYSCALL" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]hooked_syscall\f[R] \- system call hooking detection
.SS DESCRIPTION
Triggered when system call table hooking is detected in the Linux
kernel.
This event monitors the syscall table to verify that each system call
points to its corresponding legitimate function symbol, helping identify
kernel code modifications often used by rootkits and other malicious
software.
.PP
System call hooking is a common technique used by malware to intercept
and modify system calls, enabling activities such as hiding processes,
files, network connections, or escalating privileges while remaining
undetected by traditional monitoring tools.
.PP
This event is useful for:
.IP \[bu] 2
\f[B]Rootkit detection\f[R]: Identify kernel\-level rootkits that hook
system calls
.IP \[bu] 2
\f[B]System integrity monitoring\f[R]: Verify kernel code integrity
.IP \[bu] 2
\f[B]Security incident response\f[R]: Detect unauthorized kernel
modifications
.SS EVENT SETS
\f[B]derived\f[R], \f[B]security_alert\f[R]
.SS DATA FIELDS
.TP
\f[B]syscall_number\f[R] (\f[I]integer\f[R])
The system call number that was found to be hooked
.TP
\f[B]expected_address\f[R] (\f[I]string\f[R])
The expected memory address of the legitimate syscall function
.TP
\f[B]actual_address\f[R] (\f[I]string\f[R])
The actual memory address found in the syscall table
.TP
\f[B]hook_target\f[R] (\f[I]string\f[R])
Information about the hooking function or module if identifiable
.SS DEPENDENCIES
\f[B]Detection Method:\f[R]
.IP \[bu] 2
Uprobe\-based detection on various system calls
.IP \[bu] 2
Kernel symbol table verification
.IP \[bu] 2
Syscall table integrity checking
.SS USE CASES
.IP \[bu] 2
\f[B]Rootkit detection\f[R]: Identify kernel\-level malware that hooks
system calls
.IP \[bu] 2
\f[B]System integrity monitoring\f[R]: Continuous verification of
syscall table integrity
.IP \[bu] 2
\f[B]Incident response\f[R]: Investigate unauthorized kernel
modifications
.IP \[bu] 2
\f[B]Security auditing\f[R]: Verify system call table consistency
.IP \[bu] 2
\f[B]Forensic analysis\f[R]: Detect evidence of advanced persistent
threats
.SS DETECTION METHODOLOGY
The event performs:
.IP "1." 3
\f[B]Syscall table scanning\f[R]: Systematic verification of syscall
table entries
.IP "2." 3
\f[B]Symbol verification\f[R]: Comparison of actual vs.\ expected
function addresses
.IP "3." 3
\f[B]Hook identification\f[R]: Detection of unauthorized modifications
to syscall handlers
.IP "4." 3
\f[B]Integrity validation\f[R]: Verification that syscalls point to
legitimate kernel functions
.SS SECURITY IMPLICATIONS
System call hooking can enable:
.IP \[bu] 2
\f[B]Process hiding\f[R]: Malware hiding processes from system
monitoring
.IP \[bu] 2
\f[B]File hiding\f[R]: Concealing malicious files from filesystem
operations
.IP \[bu] 2
\f[B]Network hiding\f[R]: Hiding network connections and traffic
.IP \[bu] 2
\f[B]Privilege escalation\f[R]: Bypassing security controls and access
restrictions
.IP \[bu] 2
\f[B]Anti\-forensics\f[R]: Evading detection and analysis tools
.SS MITIGATION STRATEGIES
.IP \[bu] 2
\f[B]Kernel integrity protection\f[R]: Use technologies like KGDB, KASLR
.IP \[bu] 2
\f[B]Control Flow Integrity (CFI)\f[R]: Hardware\-based protection
mechanisms
.IP \[bu] 2
\f[B]Hypervisor\-based protection\f[R]: Monitor kernel from hypervisor
level
.IP \[bu] 2
\f[B]Regular integrity checks\f[R]: Periodic verification of critical
kernel structures
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]syscall_table_hooking\f[R]: Alternative detection method for
syscall table modifications
.IP \[bu] 2
\f[B]ftrace_hook\f[R]: Function tracing hook detection
.IP \[bu] 2
\f[B]hidden_kernel_module\f[R]: Hidden kernel module detection
.IP \[bu] 2
\f[B]symbols_collision\f[R]: Symbol conflict detection
