{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>\ud83d\udc4b Welcome to Tracee Documentation! To help you get around, please notice the different sections at the top global menu:</p> <ul> <li>You are currently in the Getting Started section where you can find general information and help with first steps.</li> <li>In the Tutorials section you can find step-by-step guides that help you accomplish specific tasks.</li> <li>In the Docs section you can find the complete reference documentation for all of the different features and settings that Tracee has to offer.</li> <li>In the Contributing section you can find technical developer documentation and contribution guidelines.</li> </ul> <p>Before moving on, please consider giving us a GitHub star \u2b50\ufe0f. Thank you!</p>"},{"location":"#about-tracee","title":"About Tracee","text":"<p>Tracee is a runtime security and observability tool that helps you understand how your system and applications behave using eBPF technology. It provides deep visibility into Linux systems by monitoring system calls, network activity, and file operations in real-time.</p>"},{"location":"#what-tracee-does","title":"What Tracee Does","text":"<ul> <li>\ud83d\udd0d System Monitoring: Tracks system calls, process execution, file operations, and network activity</li> <li>\ud83d\udee1\ufe0f Security Detection: Identifies suspicious behavior patterns and potential security threats</li> <li>\ud83d\udcca Observability: Provides detailed insights into application and system behavior</li> <li>\ud83d\udea8 Real-time Alerts: Generates events for immediate threat detection and response</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Zero Code Changes: Monitor existing applications without modification</li> <li>Low Overhead: Minimal performance impact using efficient eBPF programs</li> <li>Container Aware: Native support for containerized environments and Kubernetes</li> <li>Flexible Policies: Customize what to monitor and how to respond to events</li> <li>Rich Event Data: Detailed context including process lineage, file paths, and network connections</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li>Security Monitoring: Detect malware, privilege escalation, and suspicious activity</li> <li>Compliance: Monitor file access, data exfiltration, and system changes</li> <li>Troubleshooting: Debug application issues and system behavior</li> <li>Forensics: Investigate security incidents with detailed audit trails</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>To quickly try Tracee use one of the following snippets. For a more complete installation guide, check out the Installation section. Tracee should run on most common Linux distributions and kernels. For compatibility information see the Prerequisites page. Mac users, please read this FAQ.</p>"},{"location":"#using-docker","title":"Using Docker","text":"<pre><code>docker run --name tracee -it --rm \\\n  --pid=host --cgroupns=host --privileged \\\n  -v /etc/os-release:/etc/os-release-host:ro \\\n  -v /var/run:/var/run:ro \\\n  aquasec/tracee:latest\n</code></pre> <p>For a complete walkthrough please see the Docker getting started guide.</p>"},{"location":"#on-kubernetes","title":"On Kubernetes","text":"<pre><code>helm repo add aqua https://aquasecurity.github.io/helm-charts/\nhelm repo update\nhelm install tracee aqua/tracee --namespace tracee --create-namespace\n</code></pre> <pre><code>kubectl logs --follow --namespace tracee daemonset/tracee\n</code></pre> <p>For a complete walkthrough please see the Kubernetes getting started guide.</p>"},{"location":"#next-steps","title":"Next Steps","text":"<p>After trying the quickstart, here's how to dive deeper:</p>"},{"location":"#for-security-analysts","title":"\ud83c\udfaf For Security Analysts","text":"<ul> <li>Events Documentation: Learn about security events and signatures</li> <li>Policies Guide: Create custom detection rules</li> <li>Kubernetes Tutorial: Monitor containerized workloads</li> </ul>"},{"location":"#for-devops-engineers","title":"\ud83d\udee0\ufe0f For DevOps Engineers","text":"<ul> <li>Installation Guide: Production deployment options</li> <li>Configuration: Customize Tracee for your environment</li> <li>Outputs: Integrate with your monitoring stack</li> </ul>"},{"location":"#for-developers","title":"\ud83d\udc68\u200d\ud83d\udcbb For Developers","text":"<ul> <li>Custom Events: Create your own detection logic</li> <li>Contributing Guide: Help improve Tracee</li> <li>Building from Source: Development setup</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Join the community, and talk to us about any matter in the GitHub Discussions or Slack. If you run into any trouble using Tracee or you would like to give us user feedback, please create an issue.</p> <p>Find more information on contribution documentation.</p>"},{"location":"#more-about-aqua-security","title":"More about Aqua Security","text":"<p>Tracee is an Aqua Security open source project. Learn about our open source work and portfolio here.</p>"},{"location":"contributing/adding-events/","title":"Adding New Events","text":"<p>This guide walks you through the process of adding new event monitoring capabilities to Tracee. Adding new events involves modifications to several files across the codebase.</p>"},{"location":"contributing/adding-events/#overview","title":"Overview","text":"<p>Adding a new event to Tracee requires changes in several main areas:</p> <ol> <li>eBPF Implementation - Implement the actual event handling logic</li> <li>Probe Configuration - Configure how the event attaches to kernel functions</li> <li>Event Definition - Define the event and its metadata in Go code</li> <li>Protobuf Schema - Add event to protobuf definitions for gRPC API</li> <li>gRPC Translation - Map event to protobuf enums for external APIs</li> <li>Event Documentation - Create documentation file for the event</li> </ol>"},{"location":"contributing/adding-events/#step-by-step-process","title":"Step-by-Step Process","text":""},{"location":"contributing/adding-events/#1-implement-ebpf-program-in-pkgebpfctraceebpfc","title":"1. Implement eBPF Program in <code>pkg/ebpf/c/tracee.bpf.c</code>","text":"<p>Choose a kernel function to monitor: - System calls: <code>sys_openat</code>, <code>sys_execve</code> - LSM hooks: <code>security_file_open</code>, <code>security_bprm_check</code> - VFS operations: <code>vfs_read</code>, <code>vfs_write</code> - Network: <code>tcp_connect</code>, <code>inet_csk_accept</code></p> <p>Find functions: <code>cat /proc/kallsyms | grep function_name</code></p> <p>Implement the eBPF program:</p> <pre><code>SEC(\"kprobe/your_kernel_function\")          // Must match probe configuration\nint BPF_KPROBE(trace_your_event)            // This name will be used in probe config\n{\n    // Your event implementation follows this pattern:\n    // 1. Initialize program data\n    // 2. Apply scope filtering\n    // 3. Extract data fields\n    // 4. Apply data field-based filtering\n    // 5. Submit event\n\n    program_data_t p = {};\n    if (!init_program_data(&amp;p, ctx, YOUR_EVENT_ID))\n        return 0;\n\n    if (!evaluate_scope_filters(&amp;p))\n        return 0;\n\n    // Extract data fields from kernel function\n    void *arg1 = (void *)PT_REGS_PARM1(ctx);\n    int arg2 = PT_REGS_PARM2(ctx);\n\n    // Apply data field-based filtering if needed\n    // ... your filtering logic ...\n\n    // Save data fields to event buffer\n    save_str_to_buf(&amp;p.event-&gt;args_buf, arg1, 0);\n    save_to_submit_buf(&amp;p.event-&gt;args_buf, &amp;arg2, sizeof(arg2), 1);\n\n    events_perf_submit(&amp;p, 0);\n    return 0;\n}\n</code></pre>"},{"location":"contributing/adding-events/#2-configure-probes-in-pkgebpfprobesprobe_groupgo","title":"2. Configure Probes in <code>pkg/ebpf/probes/probe_group.go</code>","text":"<p>Add the probe configuration that matches your eBPF function names:</p> <pre><code>// In pkg/ebpf/probes/probe_group.go, add to allProbes map in NewDefaultProbeGroup():\nYourNewEvent: NewTraceProbe(KProbe, \"your_kernel_function\", \"trace_your_event\"),\n</code></pre> <p>Attachment types: - <code>KProbe</code> - Attaches to kernel function entry (most common) - <code>KretProbe</code> - Attaches to kernel function exit (for return values) - <code>Tracepoint</code> - Attaches to predefined kernel tracepoints (stable interface) - <code>SyscallEnter</code>/<code>SyscallExit</code> - Specialized for system call entry/exit</p>"},{"location":"contributing/adding-events/#3-define-the-event-in-pkgeventscorego","title":"3. Define the Event in <code>pkg/events/core.go</code>","text":"<p>Choose an event ID from the appropriate range and add it to both eBPF and Go code:</p> <p>Event ID Ranges: - Common events: 1-699 (most events) - Network events: 700-1999 - User-space network: 2000-3999 - Capture meta-events: 4000-4999 - Signal meta-events: 5000+</p> <p>In eBPF (<code>pkg/ebpf/c/tracee.bpf.c</code>): <pre><code>#define YOUR_EVENT_ID 42\n</code></pre></p> <p>In Go (<code>pkg/events/core.go</code>):</p> <pre><code>// Add to appropriate const block (around line 100-200):\nYourNewEvent = 42    // Must match eBPF ID\n\n// Add to Core variable (around line 500+):\nYourNewEvent: {\n    id:      YourNewEvent,\n    id32Bit: Sys32Undefined,\n    name:    \"your_event_name\",\n    version: NewVersion(1, 0, 0),\n    sets:    []string{\"fs\"}, // Choose: syscalls, fs, net, security, proc, default\n    fields: []DataField{\n        {DecodeAs: data.STR_T, ArgMeta: trace.ArgMeta{Type: \"const char*\", Name: \"pathname\"}},\n        {DecodeAs: data.INT_T, ArgMeta: trace.ArgMeta{Type: \"int\", Name: \"flags\"}},\n        // Add all event data fields\n    },\n    dependencies: Dependencies{\n        probes: []Probe{{handle: probes.YourNewEvent, required: true}},\n    },\n},\n</code></pre>"},{"location":"contributing/adding-events/#4-add-event-to-protobuf-schema","title":"4. Add Event to Protobuf Schema","text":"<p>Add event ID to protobuf enum in <code>api/v1beta1/event.proto</code>:</p> <pre><code>enum EventId {\n    // ... existing events ...\n    your_new_event = 42;  // Must match the ID from Go/eBPF\n    // ... more events ...\n}\n</code></pre> <p>Important notes: - Event IDs in protobuf must match exactly with Go constants and eBPF defines - Follow the existing naming convention: lowercase with underscores - Add the event in the appropriate section (syscalls, common events, etc.)</p>"},{"location":"contributing/adding-events/#5-add-event-to-grpc-translation-table","title":"5. Add Event to gRPC Translation Table","text":"<p>Update the translation table in <code>pkg/server/grpc/tracee.go</code>:</p> <pre><code>// Add to EventTranslationTable map in appropriate section:\nevents.YourNewEvent: pb.EventId_your_new_event,\n</code></pre> <p>This table maps internal Go event IDs to external protobuf event IDs for gRPC communication.</p>"},{"location":"contributing/adding-events/#6-generate-protobuf-files","title":"6. Generate Protobuf Files","text":"<p>After modifying any <code>.proto</code> files, regenerate the Go code:</p> <pre><code># Generate protobuf Go files from proto definitions\nmake protoc\n</code></pre> <p>This command uses <code>protoc</code> to generate: - Go structs from protobuf messages - gRPC service definitions - JSON marshaling/unmarshaling code</p> <p>Verify the generated files: - <code>api/v1beta1/*.pb.go</code> - Generated protobuf structs - <code>api/v1beta1/*_grpc.pb.go</code> - Generated gRPC service code</p>"},{"location":"contributing/adding-events/#7-handle-complex-data-types-if-needed","title":"7. Handle Complex Data Types (If Needed)","text":"<p>If your event uses complex data types, you may need to add marshalling logic in <code>pkg/server/grpc/event_data.go</code>:</p> <pre><code>// Add case in parseArgument function for custom types\ncase *YourCustomType:\n    return &amp;pb.EventValue{\n        Name: arg.Name,\n        Value: &amp;pb.EventValue_YourCustomField{\n            YourCustomField: convertYourCustomType(v),\n        },\n    }, nil\n</code></pre> <p>For new data types: 1. Add the type definition to <code>api/v1beta1/event_data.proto</code> 2. Add the field to the <code>EventValue</code> oneof 3. Implement conversion logic in <code>event_data.go</code> 4. Run <code>make protoc</code> to regenerate files</p>"},{"location":"contributing/adding-events/#testing-your-new-event","title":"Testing Your New Event","text":""},{"location":"contributing/adding-events/#8-build-and-test-compilation","title":"8. Build and Test Compilation","text":"<pre><code># Build Tracee with your changes\nmake tracee\n\n# Verify no compilation errors\necho $?  # Should be 0\n</code></pre>"},{"location":"contributing/adding-events/#9-test-event-functionality","title":"9. Test Event Functionality","text":"<pre><code># Test that your event can be selected\nsudo ./dist/tracee --events your_event_name --output json\n\n# Test with policies\nsudo ./dist/tracee --config-file your_test_policy.yaml\n</code></pre>"},{"location":"contributing/adding-events/#10-unit-tests","title":"10. Unit Tests","text":"<p>Add unit tests for your event definition and run them:</p> <pre><code># Run unit tests\nmake test-unit\n\n# Run integration tests\nmake test-integration\n</code></pre> <pre><code>// In appropriate _test.go file\nfunc TestYourNewEvent(t *testing.T) {\n    // Test event definition\n    // Test data field extraction\n    // Test filtering behavior\n}\n</code></pre>"},{"location":"contributing/adding-events/#11-integration-tests","title":"11. Integration Tests","text":"<p>Consider adding integration tests that actually trigger your event and verify it's captured correctly.</p>"},{"location":"contributing/adding-events/#12-create-event-documentation","title":"12. Create Event Documentation","text":"<p>After everything is working, create a markdown file in the <code>docs/</code> directory to document your event.</p> <p>Required Documentation Sections:</p> <ul> <li>Description: Explain what the event captures, when it triggers, and its purpose</li> <li>Event Sets: Document which event sets this event belongs to (e.g., syscalls, fs, net)</li> <li>Data Fields: List and describe all data fields returned by the event</li> <li>Dependencies: Document kernel probes and any other requirements</li> <li>Use Cases: Provide practical examples of when and why to use this event</li> </ul> <p>Documentation Guidelines: - Follow the existing format used by other event documentation files - Provide clear descriptions of all data fields with their types - Explain the security or operational significance - Include practical use cases and examples - Cross-reference related events when appropriate</p>"},{"location":"contributing/adding-events/#common-patterns","title":"Common Patterns","text":"<ul> <li>System calls: Hook <code>sys_*</code> functions, use <code>SyscallEnter</code>/<code>SyscallExit</code> probes</li> <li>Security events: Hook <code>security_*</code> functions, use <code>KProbe</code> attachments</li> <li>File operations: Hook VFS functions (e.g., <code>vfs_read</code>, <code>vfs_write</code>)</li> <li>Network events: Hook network functions, extract connection info</li> </ul>"},{"location":"contributing/adding-events/#best-practices","title":"Best Practices","text":"<ul> <li>Keep eBPF programs lightweight - apply filtering early, minimize processing</li> <li>Use descriptive names - follow existing naming conventions</li> <li>Document data fields clearly - explain purpose and format of each field</li> <li>Choose appropriate event sets - helps users discover and select your event</li> <li>Test thoroughly - verify event triggers correctly and data is accurate</li> </ul>"},{"location":"contributing/adding-events/#troubleshooting","title":"Troubleshooting","text":""},{"location":"contributing/adding-events/#common-issues","title":"Common Issues","text":"<p>Compilation Errors: - Verify event IDs don't conflict - Check eBPF program section names match probe configuration - Ensure all required headers are included - Run <code>make protoc</code> after modifying proto files</p> <p>Protobuf/gRPC Issues: - Event ID mismatches between Go, eBPF, and protobuf - Missing entry in EventTranslationTable - Protobuf files not regenerated after schema changes - Complex data types not handled in event_data.go</p> <p>Runtime Issues: - Check kernel compatibility for attachment points - Verify probe symbols exist on target kernel - Test with <code>bpftrace</code> first for complex kernel function monitoring</p> <p>Event Not Triggering: - Verify the kernel function is actually called for your test case - Check filtering logic in eBPF program - Use <code>bpf_printk()</code> for debugging eBPF code</p>"},{"location":"contributing/adding-events/#debugging-tools","title":"Debugging Tools","text":"<pre><code># Check eBPF program loading\nbpftool prog list\n\n# Monitor eBPF logs\ncat /sys/kernel/debug/tracing/trace_pipe\n\n# Test kernel symbol availability\ncat /proc/kallsyms | grep your_symbol\n</code></pre>"},{"location":"contributing/adding-events/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Ask questions about event implementation</li> <li>Discussions: Discuss design decisions for complex events</li> <li>Code Review: Submit WIP PRs for feedback on approach</li> </ul>"},{"location":"contributing/adding-events/#related-resources","title":"Related Resources","text":"<ul> <li>eBPF Programming Guide</li> <li>Linux Tracepoints</li> <li>BPF LSM Documentation</li> <li>Tracee Documentation</li> </ul>"},{"location":"contributing/guidelines/","title":"Style Guide for Contributors","text":"<p>For those willing to contribute to Tracee, this repository has code formatting guidelines being enforced.</p>"},{"location":"contributing/guidelines/#contributing-to-documentation","title":"Contributing to Documentation","text":"<p>Our documentation aims to follow the Di\u00e1taxis documentation framework.</p> <p>To contribute to the documentation:</p> <ol> <li>Clone the Tracee GitHub repository.</li> <li>Make changes in the <code>/docs</code> directory in the root folder.</li> <li>Remember to edit the index in <code>mkdocs.yml</code> if you add or move existing files or directories.</li> <li>Test your changes to the documentation.</li> </ol>"},{"location":"contributing/guidelines/#test-documentation-changes","title":"Test Documentation Changes","text":"<p>You can test your changes to the documentation by building and running a docker container. Prerequisites: Docker installed and running locally. Build the container image:</p> <pre><code>make -f ./builder/Makefile.mkdocs mkdocs-build\n</code></pre> <p>Serve the container image:</p> <pre><code>make -f ./builder/Makefile.mkdocs mkdocs-serve\n</code></pre> <p>Open <code>localhost:8000/tracee</code></p> <p>Now you should see the documentation. Check that everything is as you intended.</p> <p>And finally Submit a PR about the changes.</p>"},{"location":"contributing/guidelines/#contributing-to-tracee-code","title":"Contributing to Tracee Code","text":"<p>We welcome contributions to Tracee's codebase! Before submitting your changes, please familiarize yourself with these guidelines. To contribute to the code:</p>"},{"location":"contributing/guidelines/#before-you-commit","title":"Before You Commit","text":"<p>Tracee relies on several generated files and has strict formatting requirements. Ensure you run the following commands before committing:</p> <p><code>NOTE:</code> In order to not depend on the host's library versions, we recommend that you always run make and other project dependencies in a virtual environment so the formatting will be aligned with Tracee guidelines</p> <ol> <li> <p>Man Pages Generation: If you've modified core code or documentation that impacts the man pages, run:</p> <pre><code>make -f builder/Makefile.man\n</code></pre> <p>This regenerates the man pages to reflect your changes.</p> </li> <li> <p>Protocol Buffer Compilation: If your changes involve modifications to protocol buffer (<code>.proto</code>) files, run:</p> <pre><code>make -f builder/Makefile.man\n</code></pre> <p>This regenerates the corresponding Go code.</p> </li> <li> <p>Pre-commit checks: Every time you're about to create a pull request, execute:</p> <p><code>NOTE:</code>  If your host machine dependencies don't align with Tracee dependencies, this command has to run on a supported environment</p> <pre><code>make check-pr\n</code></pre> <p>This command performs essential checks: - <code>check-fmt</code>: Verifies code formatting adheres to project standards. - <code>check-lint</code>: Runs linting tools (e.g., <code>golangci-lint</code>) to catch potential issues. - <code>check-code</code>: Performs static code analysis for both Go and C code. - <code>format-pr</code>: Displays the commits in your PR in a standardized format.</p> <p>Note: <code>check-fmt</code>,<code>check-lint</code>,<code>check-code</code>,<code>format-pr</code> are individual make command combined under <code>check-pr</code>. You can run the following command without any vm using Makefile</p> <ul> <li> <p>For <code>check-fmt</code>:</p> <pre><code>make -f builder/Makefile.checkers fmt-check\n</code></pre> </li> <li> <p>For <code>check-code</code>:</p> <pre><code>make -f builder/Makefile.checkers code-check\n</code></pre> </li> </ul> </li> <li> <p>Fixing Code Formatting: If <code>check-fmt</code> reports issues, use:</p> <pre><code>make -f builder/Makefile.checkers fmt-fix\n</code></pre> <p>This automatically formats your Go and C code to meet project standards. Review the changes with <code>git status -s</code> before committing.</p> </li> </ol>"},{"location":"contributing/guidelines/#performance-considerations","title":"Performance Considerations","text":"<p>Performance is a critical aspect of Tracee.</p> <p>To ensure your contributions maintain optimal performance, follow the guidelines in Performance Considerations page.</p>"},{"location":"contributing/guidelines/#kubernetes-considerations","title":"Kubernetes Considerations","text":"<p>If your contribution impacts Tracee's behavior within a Kubernetes cluster, follow the guidelines in Kubernetes Considerations.</p>"},{"location":"contributing/kubernetes/","title":"Kubernetes Considerations for Tracee Contributors","text":"<ol> <li> <p>Set up a Local Kubernetes Cluster</p> <p>We recommend using a local Kubernetes cluster for development and testing. Popular options include:</p> <ul> <li>kind: Kubernetes IN Docker</li> <li>minikube: Runs a single-node cluster in a VM</li> <li>MicroK8s: Lightweight, snap-based Kubernetes</li> </ul> <p>Tracee's Makefile provides convenient targets for setting up MicroK8s:</p> <pre><code>make -f builder/Makefile.k8s help\n</code></pre> <pre><code>To build the operator docker container:\n\n    $ make -f builder/Makefile.k8s build\n\nTo generate the kubernetes manifests:\n\n    $ make -f builder/Makefile.k8s manifests\n\nTo generate operator code:\n\n    $ make -f builder/Makefile.k8s generate\n\nOr simply:\n\n    $ make -f builder/Makefile.k8s\n</code></pre> </li> <li> <p>Deploy Tracee</p> <p>Deploy Tracee to your chosen local cluster. The deployment method will vary depending on your needs:</p> <ul> <li>DaemonSet: For system-wide tracing, deploy Tracee as a DaemonSet.</li> <li>Tracee Operator:  Use the Tracee operator for simplified management.</li> <li>Other Methods: Explore alternative methods like sidecar containers based on your use case.</li> </ul> </li> <li> <p>Test Your Changes</p> <p>Test your modifications with realistic scenarios within the Kubernetes environment.  Consider these examples:</p> <ul> <li>Application Monitoring: Deploy sample applications and observe Tracee's event capture for expected behavior.</li> <li>Network Policies:  Configure network policies to restrict pod communication and verify Tracee captures relevant network events.</li> <li>Resource Constraints:  Apply resource limits to pods and ensure Tracee functions correctly under constrained conditions.</li> <li>Security Policies:  Implement Pod Security Policies and/or Security Contexts to validate Tracee's compliance and event capture in secure environments.</li> </ul> </li> <li> <p>Monitor Tracee's Performance</p> <p>Utilize Kubernetes' observability tools to monitor Tracee:</p> <ul> <li>Resource Usage: Track pod resource consumption (CPU, memory) using <code>kubectl top</code> or monitoring dashboards.</li> <li>Logs: Analyze Tracee logs for errors, warnings, or unexpected behavior using <code>kubectl logs</code>.</li> <li>Kubernetes Metrics:  If available, leverage Kubernetes metrics to gain insights into Tracee's performance.</li> </ul> </li> <li> <p>Clean Up</p> <p>After testing, remove deployed Tracee components and test resources to maintain a clean cluster environment.</p> </li> </ol>"},{"location":"contributing/kubernetes/#kubernetes-specific-features","title":"Kubernetes-Specific Features","text":"<p>If your contribution involves Kubernetes-specific features within Tracee (e.g., capturing Kubernetes events or metadata), ensure you test these functionalities thoroughly within the cluster environment. Pay close attention to event accuracy and any integration with Kubernetes APIs.</p>"},{"location":"contributing/overview/","title":"Contributing","text":"<p>Thank you for taking interest in contributing to Tracee! This document covers our working practices and conventions.</p>"},{"location":"contributing/overview/#issues-and-discussions","title":"Issues and Discussions","text":"<p>We encourage open discussion and collaboration using both GitHub Issues and Discussions.  </p> <ul> <li>Discussions are a free-style conversational tool.</li> <li>Issues are a project management tool, we use them to keep track of who's working on what and plan ahead.</li> </ul> <p>If you have a suggestion, question, or a general comment - please use Discussions. If there's a clear work item (including bugs) - you can open an Issue.</p>"},{"location":"contributing/overview/#discussions","title":"Discussions","text":"<ul> <li>We have the following discussion topics:<ol> <li>Announcements: One way communication from the team to the community. Consider this like our mini blog.</li> <li>Questions and Help: For help and support. Consider this similar to StackOverflow.</li> <li>Development: For discussing potential features, and collaborating on their design.</li> </ol> </li> </ul>"},{"location":"contributing/overview/#issues","title":"Issues","text":"<ol> <li>Actionable and Assignable: Every issue must be clear, actionable, and assignable to a specific person.  Break down large issues into smaller, more manageable tasks.</li> <li>Clear and Definitive Descriptions: Be precise in your issue descriptions:<ul> <li>Bug Reports: Include the following:<ul> <li>Detailed steps to reproduce the bug.</li> <li>The complete error message.</li> <li>Your operating system, Tracee version, and any other relevant environment details.</li> </ul> </li> <li>Feature Requests: Define:<ul> <li>A clear scope for the feature.</li> <li>Specific acceptance criteria that will be used to determine if the feature is complete.</li> </ul> </li> </ul> </li> <li>Issue Labels: We use these labels to categorize and track issues:<ul> <li><code>area/...</code> (e.g., <code>ebpf</code>, <code>events</code>): Specifies the area of Tracee affected by the issue.</li> <li><code>kind/...</code> (e.g., <code>bug</code>, <code>chore</code>, <code>enhancement</code>, <code>documentation</code>): Indicates the type of issue.</li> <li><code>milestone/...</code>: Specifies the target release for the issue.</li> <li><code>priority/...</code>:  Indicates the urgency of the issue.</li> <li><code>good-first-issue</code>:  Marks issues suitable for first-time contributors.</li> <li><code>backport</code>: Applies to PRs targeting release branches for integrating changes from <code>main</code>. The original <code>main</code> PR gets labeled <code>backported/vX.X.X</code> after merge.</li> <li><code>cherry-pick</code>: Similar to <code>backport</code>, but for specific commits. The original <code>main</code> PR gets labeled <code>cherry-picked/vX.X.X</code> after merge.</li> <li><code>candidate/...</code>: (e.g., <code>candidate/v0.1.2</code>)  Identifies PRs in the <code>main</code> branch as candidates for backporting or cherry-picking to a release branch (e.g., <code>v0.1.2</code>). The specific method will be determined during the porting process.</li> <li><code>backported/...</code> (e.g., <code>backported/v0.1.2</code>): Marks PRs in the <code>main</code> branch as the basis for backporting changes to a release branch (e.g., <code>v0.1.2</code>) after the porting process.</li> <li><code>cherry-picked/...</code> (e.g., <code>cherry-picked/v0.1.2</code>): Marks PRs in the <code>main</code> branch as the basis for cherry-picking commits to a release branch (e.g., <code>v0.1.2</code>) after the porting process.</li> </ul> </li> <li>Issue Assignment: Self-assign issues or request assignment. Don't work on an issue assigned to someone else without their consent.</li> </ol> <p>Backporting and Cherry-Picking Workflow:</p> <p>To backport or cherry-pick a change:</p> <ol> <li>Create a new PR targeting the appropriate release branch.</li> <li>Label the new PR with <code>backport</code> or <code>cherry-pick</code>, depending on the method used.</li> <li>Once the new PR is merged, remove the <code>candidate/vX.X.X</code> label from the original PR in <code>main</code>.</li> <li>Finally, add the <code>backported/vX.X.X</code> or <code>cherry-picked/vX.X.X</code> label to the original PR in <code>main</code>, as appropriate.</li> </ol>"},{"location":"contributing/overview/#pull-requests","title":"Pull Requests","text":"<ol> <li>Every Pull Request should have an associated Issue unless it is a trivial fix.</li> <li>When adding a flag option or other UX related change, make sure the design is explicitly described in the associated issue, and a maintainer approved it.</li> <li>Commit subject should succinctly describe the change:<ol> <li>Max 50 chars.</li> <li>Written in imperative mood: begin with a verb like \"fix\", \"add\", \"improve\", or \"refactor\"; Think \"once applied, this commit will...\".</li> <li>If ambiguous, mention the area that this commit affects (see area labels above).</li> </ol> </li> <li>Optional commit body (separated by empty line from subject) may explain why the change was made and not how. Wrap at 72 chars.</li> <li>Code related information should be in commit message, review related information should be in PR description.</li> <li>For changes that span different areas please try to make each change self contained and independent.</li> </ol>"},{"location":"contributing/overview/#development-and-testing","title":"Development and Testing","text":""},{"location":"contributing/overview/#development-images","title":"Development Images","text":"<p>For testing the latest changes without building from source, Tracee provides daily development images:</p> <pre><code># Get the latest development build\ndocker pull aquasec/tracee:dev\n\n# Test your changes quickly\ndocker run --rm -it --pid=host --privileged aquasec/tracee:dev --version\n</code></pre> <p>Development images are built daily from the <code>main</code> branch and include the latest features and fixes. See Building Documentation for complete details.</p>"},{"location":"contributing/overview/#development-workflows","title":"Development Workflows","text":"<p>Tracee provides several <code>make</code> targets to streamline development:</p> <pre><code># Quick development checks before committing\nmake check-pr              # Run all code quality checks for PR submission\nmake format-pr             # Show what formatting changes are needed\nmake fix-fmt               # Automatically fix code formatting\n\n# Testing workflows\nmake test-unit             # Run unit tests with coverage\nmake test-types            # Run tests for the types module\nmake test-common           # Run tests for the common module\nmake test-integration      # Run integration tests\n\n# Development builds\nmake all                   # Build all components (tracee-ebpf, tracee-rules, signatures)\nmake tracee                # Build the main tracee binary\nmake bpf                   # Build just the eBPF object\n\n# Code analysis and debugging\nmake bear                  # Generate compile_commands.json for IDE integration\nDEBUG=1 make              # Build with debug symbols\nMETRICS=1 make            # Build with BPF metrics enabled\n</code></pre> <p>Quick Start for Development: <pre><code># 1. Check your environment\nmake env\n\n# 2. Build everything\nmake all\n\n# 3. Run tests\nmake test-unit\n\n# 4. Check code quality before submitting PR\nmake check-pr\n</code></pre></p> <p>For a complete list of available targets, run <code>make help</code>.</p>"},{"location":"contributing/overview/#code","title":"Code","text":"<ol> <li>Follow Golang's code review standards: https://github.com/golang/go/wiki/CodeReviewComments</li> <li>Follow <code>gofmt</code> + <code>govet</code> + <code>goimports</code> formatting.</li> <li>Tests should be included alongside code changes wherever applicable, except for parts that are harder to test and are not currently tested (e.g. eBPF). When modifying already tested code, your changes must be represented in the existing tests.</li> </ol>"},{"location":"contributing/overview/#contributing-code","title":"Contributing Code","text":""},{"location":"contributing/overview/#adding-new-event-tracing","title":"Adding New Event Tracing","text":"<p>If you're looking to add new event tracing capabilities to Tracee, see our comprehensive guide: Adding New Event Tracing.</p> <p>This guide covers: - Event definition in Go code - eBPF probe configuration - Implementation patterns and best practices - Testing and troubleshooting</p>"},{"location":"contributing/performance/","title":"Performance Considerations","text":"<ol> <li> <p>Profiling Tracee for Performance test - Tracee integrates with Pyroscope and Pprof for continuous profiling. When running Tracee locally for development or testing, use the <code>--pyroscope --pprof</code> command-line option.</p> <pre><code>sudo ./dist/tracee --pyroscope --pprof\n</code></pre> <p>This enables profiling data to be sent to a local server. The Tracee repository includes a convenient way to deploy a performance dashboard for analyzing this data. Run the following for more details:</p> <pre><code>make -f builder/Makefile.performance help\n</code></pre> </li> <li> <p>Performance Dashboard: The provided performance dashboard allows visualization of host metrics, CPU flame graphs, and other performance-related data. Follow these steps to deploy locally and see instructions on using the dashboard:</p> <pre><code>make -f builder/Makefile.performance dashboard-start\n</code></pre> <pre><code>make -f builder/Makefile.performance dashboard-stop\n</code></pre> </li> <li> <p>Benchmarking: Before submitting significant code changes, consider running benchmarks to assess their impact on Tracee's performance. (Details on specific benchmarking tools or scripts used within the Tracee project should be added here. If there are existing benchmarks, provide instructions on how to run them. If not, suggest a methodology).</p> </li> <li> <p>Common Performance Pitfalls:</p> <ul> <li>Excessive eBPF Events: Be mindful of the number and frequency of eBPF events being generated. Overly frequent events can lead to performance overhead. (Provide Tracee-specific examples or best practices to avoid this, such as filtering events effectively or using appropriate sampling rates.)</li> <li>Inefficient eBPF Programs: Optimize your eBPF programs for minimal overhead. (Provide Tracee-specific guidance. Are there common patterns to avoid within Tracee's eBPF context?)</li> <li>Resource Consumption: Consider the CPU and memory usage of Tracee itself. Avoid unnecessary allocations or computations.</li> </ul> </li> </ol> <p>By adhering to these practices, you can contribute to Tracee's performance and help ensure its efficiency. Remember that performance is an ongoing effort, so continuous profiling, benchmarking, and optimization are essential.</p>"},{"location":"contributing/setup-development-machine-with-vagrant/","title":"Setup Development Machine with Vagrant","text":"<p>[HashiCorp Vagrant] leverages a declarative configuration file, which describes all software requirements, packages, operating system configuration, and users to provide the same development environment for everyone.</p> <p>The Vagrantfile describes the type of machine required to build Tracee from the Getting Started guides.</p> <p>This allows developers involved in the project to check out the code, run <code>vagrant up</code>, and be on their way.</p>"},{"location":"contributing/setup-development-machine-with-vagrant/#prerequisites","title":"Prerequisites","text":"<ul> <li>[Vagrant]</li> <li>[Hypervisor] supported by Vagrant, such as [VirtualBox] on a amd64 (Linux) machine or [Parallels] on an arm64 M1 (Darwin) machine.</li> </ul>"},{"location":"contributing/setup-development-machine-with-vagrant/#clone-the-tracee-repository","title":"Clone the Tracee Repository","text":"<p>Clone the Tracee repository to your local machine. This repository contains the Vagrantfile.</p> <pre><code>git clone https://github.com/aquasecurity/tracee.git\n</code></pre>"},{"location":"contributing/setup-development-machine-with-vagrant/#navigate-to-the-tracee-directory","title":"Navigate to the Tracee Directory","text":"<p>Open a terminal and navigate to the directory containing the <code>Vagrantfile</code> within the cloned Tracee repository (<code>tracee/</code>)</p> <pre><code>cd tracee\n</code></pre>"},{"location":"contributing/setup-development-machine-with-vagrant/#configure-vm-type-optional","title":"Configure VM Type (Optional)","text":"<p>The VM can be provisioned for either a <code>dev</code> or <code>test</code> environment. The <code>dev</code> environment includes additional tools like MicroK8s, kubectl, and Helm.</p> <ul> <li>Development Environment: Full development environment (Default)</li> </ul> <pre><code>export VM_TYPE=dev\n</code></pre> <ul> <li>Testing Environment:  Smaller vagrant machine without k8s cumbersome to avoid conflicts with specific tests.</li> </ul> <pre><code>export VM_TYPE=test\n</code></pre>"},{"location":"contributing/setup-development-machine-with-vagrant/#configure-resource-allocation-optional","title":"Configure Resource Allocation (Optional)","text":"<p>Customize the VM's resources by setting the following environment variables:</p> <ul> <li><code>VM_PROC</code>: Number of virtual processors. Defaults to half of the host's processors. Example:</li> </ul> <pre><code>export VM_PROC=4\n</code></pre> <ul> <li><code>VM_MEM</code>: Memory in gigabytes. Defaults to 8GB. Example:</li> </ul> <pre><code>export VM_MEM=16\n</code></pre>"},{"location":"contributing/setup-development-machine-with-vagrant/#start-the-vm","title":"Start the VM","text":"<p>Run the following command to start the VM:</p> <pre><code>vagrant up\n</code></pre> <p>Vagrant will download the base box, provision the VM, and install all required dependencies. This process may take some time.</p>"},{"location":"contributing/setup-development-machine-with-vagrant/#accessing-the-vm","title":"Accessing the VM","text":"<p>Once the VM is up and running, you can access it via SSH:</p> <pre><code>vagrant ssh\n</code></pre> <p>This will place you in the <code>/vagrant</code> directory inside the VM, which is synced with the Tracee directory on your host machine.</p>"},{"location":"contributing/setup-development-machine-with-vagrant/#build-and-run-tracee","title":"Build and Run Tracee","text":"<p>You can now build Tracee within the VM using the provided Makefile. Consult the Tracee documentation for specific build instructions. Building Tracee Documentation</p>"},{"location":"contributing/setup-development-machine-with-vagrant/#stopping-the-vm","title":"Stopping the VM","text":"<p>To stop the VM, use:</p> <pre><code>vagrant halt\n</code></pre>"},{"location":"contributing/setup-development-machine-with-vagrant/#destroying-the-vm","title":"Destroying the VM","text":"<p>To completely remove the VM, use:</p> <pre><code>vagrant destroy\n</code></pre> <p>Troubleshooting:</p> <ul> <li> <p>Shared Folder Issues: If you experience issues with the shared folder, ensure your virtualization software's Guest Additions are properly installed and that the shared folder settings in the Vagrantfile match your setup.</p> </li> <li> <p>Networking Issues: If you have trouble accessing forwarded ports, check your firewall settings on both the host and guest machines.</p> </li> </ul> <p>This setup provides a consistent and reproducible environment for developing and testing Tracee. Refer to the Tracee documentation for further details on building and using Tracee.</p>"},{"location":"contributing/testing-coverage/","title":"Code Coverage in Tracee","text":"<p>This document explains how code coverage is configured and used in Tracee.</p>"},{"location":"contributing/testing-coverage/#overview","title":"Overview","text":"<p>Tracee uses Go's built-in coverage tools combined with Codecov for comprehensive test coverage reporting. Coverage is tracked for multiple test types to ensure quality across all components.</p>"},{"location":"contributing/testing-coverage/#coverage-types","title":"Coverage Types","text":""},{"location":"contributing/testing-coverage/#1-unit-tests-coverage","title":"1. Unit Tests Coverage","text":"<ul> <li>Target: Maintain current baseline, 60% for new code</li> <li>Scope: Core Go logic, utilities, and non-eBPF components</li> <li>Files: <code>cmd/</code>, <code>pkg/</code>, <code>signatures/</code></li> <li>Command: <code>make test-unit</code></li> </ul>"},{"location":"contributing/testing-coverage/#2-integration-tests-coverage","title":"2. Integration Tests Coverage","text":"<ul> <li>Scope: eBPF + Go integration, full system testing</li> <li>Command: <code>make test-integration</code></li> </ul>"},{"location":"contributing/testing-coverage/#local-development","title":"Local Development","text":""},{"location":"contributing/testing-coverage/#view-coverage-summary","title":"View Coverage Summary","text":"<pre><code>make coverage\n</code></pre>"},{"location":"contributing/testing-coverage/#generate-html-coverage-reports","title":"Generate HTML Coverage Reports","text":"<pre><code>make coverage-html\n# Opens coverage.html and types/coverage.html\n</code></pre>"},{"location":"contributing/testing-coverage/#run-individual-coverage-commands","title":"Run Individual Coverage Commands","text":"<pre><code># Unit tests only\ngo test ./... -coverprofile=coverage.txt -covermode=atomic\n\n# View coverage percentage\ngo tool cover -func=coverage.txt\n\n# Generate HTML report\ngo tool cover -html=coverage.txt -o coverage.html\n</code></pre>"},{"location":"contributing/testing-coverage/#cicd-integration","title":"CI/CD Integration","text":"<p>Coverage is automatically collected and reported on: - Every Pull Request - Every push to main branch - Integration tests (when run)</p>"},{"location":"contributing/testing-coverage/#codecov-integration","title":"Codecov Integration","text":"<p>Coverage reports are uploaded to Codecov with the following flags: - <code>unit</code>: Unit test coverage - <code>integration</code>: Integration test coverage</p>"},{"location":"contributing/testing-coverage/#coverage-configuration","title":"Coverage Configuration","text":"<p>Coverage behavior is configured in <code>codecov.yml</code>: - Project coverage target: Auto (maintains current baseline) - Patch coverage target: 60% for new code - Automatic PR comments with coverage diff - Excludes test files, generated code, and vendor dependencies</p>"},{"location":"contributing/testing-coverage/#coverage-files","title":"Coverage Files","text":"<p>The following coverage files are generated (and gitignored): - <code>coverage.txt</code>: Main unit test coverage - <code>integration-coverage.txt</code>: Integration test coverage - <code>coverage.html</code>: HTML report for local viewing</p>"},{"location":"contributing/testing-coverage/#best-practices","title":"Best Practices","text":"<ol> <li>Focus on Critical Paths: Prioritize coverage for core event processing, filtering, and detection logic</li> <li>Test Edge Cases: Include error handling and boundary conditions</li> <li>Integration Coverage: Ensure eBPF + Go interactions are tested</li> <li>Meaningful Tests: Aim for tests that verify behavior, not just coverage numbers</li> </ol>"},{"location":"contributing/testing-coverage/#excluded-from-coverage","title":"Excluded from Coverage","text":"<ul> <li>Generated files (<code>*.pb.go</code>)</li> <li>Test files (<code>*_test.go</code>)</li> <li>Mock files (<code>mock_*.go</code>, <code>*_mock.go</code>)</li> <li>Vendor dependencies (<code>vendor/</code>, <code>3rdparty/</code>)</li> <li>Documentation and build scripts</li> <li>Test utilities and test data</li> </ul>"},{"location":"contributing/testing-coverage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"contributing/testing-coverage/#coverage-not-generated","title":"Coverage Not Generated","text":"<ul> <li>Ensure you're running tests with <code>-coverprofile</code> flag</li> <li>Check that <code>-covermode=atomic</code> is set (required for concurrent programs)</li> </ul>"},{"location":"contributing/testing-coverage/#low-coverage-warnings","title":"Low Coverage Warnings","text":"<ul> <li>Review which functions/lines are not covered</li> <li>Consider if uncovered code represents important paths</li> <li>Add tests for critical uncovered functionality</li> </ul>"},{"location":"contributing/testing-coverage/#codecov-upload-failures","title":"Codecov Upload Failures","text":"<ul> <li>Verify <code>CODECOV_TOKEN</code> is set in repository secrets</li> <li>Check that coverage files exist before upload</li> <li>Review GitHub Actions logs for specific error messages</li> </ul>"},{"location":"contributing/building/building/","title":"Building from the source","text":"<p>Note</p> <p>Consider also visiting the following instructions: 1. docker container as building environment 2. building tracee container images 3. using development images for testing latest changes  </p> <ol> <li> <p>Supported Architectures</p> <ol> <li>x86_64 (amd64)</li> <li>aarch64 (arm64)</li> </ol> </li> <li> <p>Building dependencies</p> <ol> <li><code>clang</code> &amp;&amp; <code>llvm</code> (19)</li> <li><code>golang</code> (1.24.0 toolchain)</li> <li><code>libelf</code> and <code>libelf-dev</code>    (or elfutils-libelf and elfutils-libelf-devel)</li> <li><code>zlib1g</code> and <code>zlib1g-dev</code>    (or zlib and zlib-devel)</li> <li><code>libzstd-dev</code> for static build (libelf linkage)</li> <li><code>clang-format-19</code> (specific version) for <code>fix-fmt</code></li> </ol> <p>You might take a look at the following files to understand how to have a building environment:</p> <ol> <li>.github/actions/build-dependencies/action.yaml</li> <li>builder/Dockerfile.ubuntu-tracee-make</li> <li>builder/Dockerfile.alpine-tracee-make</li> </ol> <p>Those are very good examples for you to replicate a working environment.</p> </li> <li> <p>Clone tracee repository</p> <pre><code>git clone [https://github.com/aquasecurity/tracee/](https://github.com/aquasecurity/tracee/)\n</code></pre> </li> <li> <p>All makefiles have a help target to give you needed instructions</p> <pre><code>make help\n</code></pre> <pre><code># environment\n\n    $ make env                      # show makefile environment/variables\n\n# build\n\n    $ make all                      # build tracee-ebpf, tracee-rules &amp; signatures\n    $ make bpf                      # build ./dist/tracee.bpf.o\n    $ make tracee-ebpf              # build ./dist/tracee-ebpf\n    $ make tracee-rules             # build ./dist/tracee-rules\n    $ make tracee-bench             # build ./dist/tracee-bench\n    $ make signatures               # build ./dist/signatures\n    $ make e2e-net-signatures       # build ./dist/e2e-net-signatures\n    $ make e2e-inst-signatures      # build ./dist/e2e-inst-signatures\n    $ make tracee                   # build ./dist/tracee\n    $ make tracee-operator          # build ./dist/tracee-operator\n\n# clean\n\n    $ make clean                    # wipe ./dist/\n    $ make clean-bpf                # wipe ./dist/tracee.bpf.o\n    $ make clean-tracee-ebpf        # wipe ./dist/tracee-ebpf\n    $ make clean-tracee-rules       # wipe ./dist/tracee-rules\n    $ make clean-tracee-bench       # wipe ./dist/tracee-bench\n    $ make clean-signatures         # wipe ./dist/signatures\n    $ make clean-tracee             # wipe ./dist/tracee\n    $ make clean-tracee-operator    # wipe ./dist/tracee-operator\n\n# test\n\n    $ make test-unit                # run unit tests\n    $ make test-types               # run unit tests for types module\n    $ make test-common              # run unit tests for common module\n    $ make test-integration         # run integration tests\n\n# flags\n\n    $ STATIC=1 make ...             # build static binaries\n    $ BTFHUB=1 STATIC=1 make ...    # build static binaries, embed BTF\n    $ DEBUG=1 make ...              # build binaries with debug symbols\n    $ METRICS=1 make ...            # build enabling BPF metrics\n</code></pre> </li> <li> <p>Build all targets at once</p> <pre><code>make all\n</code></pre> </li> <li> <p>Build a static binary by setting <code>STATIC=1</code></p> <pre><code>STATIC=1 make all\n</code></pre> </li> <li> <p>Build a static binary with BTFHUB Support</p> <pre><code>BTFHUB=1 STATIC=1 make all\n</code></pre> <p>Note</p> <p>BTFHUB support will embed several very small files (BTF files) into your final binary. Those files will allow tracee binary to be executed in kernels that doesn't have embedded BTF information (the ones described at the BTFHUB repository)</p> <p>Attention</p> <p>compiling <code>tracee-rules</code> with STATIC=1 won't allow you to use golang based signatures as plugins, only as built-ins:</p> <pre><code>2021/12/13 13:27:21 error opening plugin /tracee/dist/signatures/builtin.so:\nplugin.Open(\"/tracee/dist/signatures/builtin.so\"): Dynamic loading not supported\n</code></pre> </li> <li> <p>Build a debuggable binary with DWARF debug symbols by setting <code>DEBUG=1</code></p> <pre><code>DEBUG=1 make\n</code></pre> </li> <li> <p>Build enabling BPF metrics by setting <code>METRICS=1</code></p> <p>BPF metrics are only available if the BPF object is built with <code>METRICS</code> debug flag defined.</p> <pre><code>METRICS=1 make\n</code></pre> </li> </ol>"},{"location":"contributing/building/building/#development-images","title":"Development Images","text":"<p>See the development images, usage examples, and stability guidance in the container images guide: Development Images.</p>"},{"location":"contributing/building/containers/","title":"Creating Tracee Container Images","text":"<p>These instructions are meant to describe how to build the official tracee container image, instead of just downloading it from the Docker Hub.</p> <p>If you would like to have a local building and execution environment, read this instead.</p>"},{"location":"contributing/building/containers/#using-tracee-container-image-from-docker-hub","title":"Using Tracee Container Image from Docker Hub","text":"<p>Before moving on to how to build Tracee container, it is important to know the published container images and their tag meanings. Here is the current list of docker container images being published during a release (or a snapshot release):</p> <ol> <li> <p>SNAPSHOT (development) container images:</p> <p>Daily development images built from the latest <code>main</code> branch. Tags:</p> <ul> <li>aquasec/tracee:dev (multi-arch)</li> <li>aquasec/tracee:x86_64-dev (amd64 only)</li> <li>aquasec/tracee:aarch64-dev (arm64 only)</li> <li>aquasec/tracee:dev-YYYYMMDD-HHMMSSUTC (timestamped)</li> </ul> </li> <li> <p>RELEASE (official versions) container images:</p> <p>Preferable alias for latest released image:</p> <ul> <li>aquasec/tracee:latest</li> </ul> <p>And the container images for each released version of Tracee:</p> <ul> <li>aquasec/tracee:VERSION</li> </ul> </li> </ol>"},{"location":"contributing/building/containers/#generating-tracee-container-images","title":"Generating Tracee Container Images","text":"<ol> <li> <p>tracee:latest</p> <p>Contains an executable binary with an embedded and CO-RE enabled eBPF object that makes it portable against multiple Linux and kernel versions.</p> <pre><code>make -f builder/Makefile.tracee-container build-tracee\n</code></pre> <p>Note</p> <p><code>BTFHUB=1</code> adds support to some older kernels.</p> <pre><code>BTFHUB=1 make -f builder/Makefile.tracee-container build-tracee\n</code></pre> </li> </ol>"},{"location":"contributing/building/containers/#running-generated-tracee-container-image","title":"Running Generated Tracee Container Image","text":"<p>Tracee container is supposed to be executed through docker cmdline directly, from the official built images. Nevertheless, during the image building process, it may be useful to execute the recently generated container image with correct arguments, mostly to see if the image is working.</p> <p>User may execute built containers through <code>Makefile.tracee-container</code> file with the \"run\" targets:</p> <ol> <li> <p>To run recently generated tracee:latest container:</p> <pre><code>make -f builder/Makefile.tracee-container run-tracee\n</code></pre> <p>Note</p> <p>Tracee arguments are passed through the <code>ARG</code> variable: <pre><code>make -f builder/Makefile.tracee-container run-tracee ARG=\"--help\"\n</code></pre></p> </li> </ol>"},{"location":"contributing/building/containers/#development-images","title":"Development Images","text":"<p>For contributors who want to test the latest changes without building from source, use the daily development images from Docker Hub.</p>"},{"location":"contributing/building/containers/#available-images","title":"Available Images","text":"<pre><code># Multi-architecture (recommended)\ndocker pull aquasec/tracee:dev\n\n# Architecture-specific\ndocker pull aquasec/tracee:x86_64-dev\ndocker pull aquasec/tracee:aarch64-dev\n\n# Timestamped build\ndocker pull aquasec/tracee:dev-20240115-050123UTC\n</code></pre>"},{"location":"contributing/building/containers/#image-details","title":"Image Details","text":"<ul> <li>Build Schedule: Daily at 05:00 UTC</li> <li>Source: Latest <code>main</code> branch</li> <li>Security: Scanned for critical vulnerabilities before publishing</li> <li>Architectures: x86_64 and ARM64</li> </ul>"},{"location":"contributing/building/containers/#usage-examples","title":"Usage Examples","text":"<pre><code># Quick test with development image\ndocker run --rm -it --pid=host --privileged \\\n  aquasec/tracee:dev --events syscalls --output format:table\n\n# Use in development workflows\ndocker run --rm --pid=host --privileged \\\n  -v $(pwd)/policy.yaml:/policy.yaml \\\n  aquasec/tracee:dev --policy /policy.yaml\n</code></pre>"},{"location":"contributing/building/containers/#guidance","title":"Guidance","text":"<p>Use development images for testing unreleased features and validating fixes. Do not use them in production environments.</p> <p>To inspect build metadata:</p> <pre><code>docker inspect aquasec/tracee:dev | jq '.[0].Config.Labels'\ndocker run --rm aquasec/tracee:dev --version\n</code></pre> <p>For stable release images, see the Installation Guide.</p>"},{"location":"contributing/building/environment/","title":"Creating a local building environment","text":"<p>These instructions are meant to describe how to create a local building and execution environment. If you would like to build tracee container(s) image(s), read this instead.</p> <p>Note</p> <p>A building environment will let you build and execute tracee inside a docker container, containing all needed tools to build and execute it. If you're using an OSX environment, for example, you can install gmake (<code>brew install gmake</code>) and configure such environment by using Docker.</p> <p>Attention</p> <p>If you want to build tracee on your local machine read this.</p>"},{"location":"contributing/building/environment/#quick-steps","title":"Quick steps","text":"<ol> <li> <p>Build tracee environment:</p> <pre><code>make -f builder/Makefile.tracee-make alpine-prepare\nmake -f builder/Makefile.tracee-make alpine-shell\n</code></pre> </li> <li> <p>Build and execute tracee:</p> <pre><code>make clean\nmake tracee\nsudo ./dist/tracee \\\n    -o option:parse-arguments \\\n    --scope comm=bash \\\n    --scope follow\n</code></pre> </li> </ol> <p>Now, in your host's shell, execute a command. You will see all events (except scheduler ones) being printed, in \"table format\", to stdout.</p>"},{"location":"contributing/building/environment/#how-to-build-and-use-the-environment","title":"How to build and use the environment","text":"<p>In order to have a controlled building environment for tracee, tracee provides a <code>Makefile.tracee-make</code> file that allows you to create and use a docker container environment to build &amp; test tracee.</p> <p>There are Two different environments that are maintained for building tracee:</p> <ul> <li>Alpine</li> <li>Ubuntu</li> </ul> <p>The reason for that is that <code>Alpine Linux</code> is based in the musl C standard library, while the <code>Ubuntu Linux</code> uses glibc.</p> <p>By supporting both building environments we can always be sure that the project builds (and executes) correctly in both environments.</p> <p>Attention</p> <p>Locally created containers, called <code>alpine-tracee-make</code> or <code>ubuntu-tracee-make</code>, share the host source code directory. This means that, if you build tracee binary using <code>alpine</code> distribution, the binary might not be compatible to the Linux distribution from your host OS.</p>"},{"location":"contributing/building/environment/#creating-a-builder-environment","title":"Creating a builder environment","text":"<ul> <li> <p>To create an alpine-tracee-make container:</p> <pre><code>make -f builder/Makefile.tracee-make alpine-prepare\n</code></pre> </li> <li> <p>To create an ubuntu-tracee-make container:</p> <pre><code>make -f builder/Makefile.tracee-make ubuntu-prepare\n</code></pre> </li> </ul>"},{"location":"contributing/building/environment/#executing-a-builder-environment","title":"Executing a builder environment","text":"<ul> <li> <p>To execute an alpine-tracee-make shell:</p> <pre><code>make -f builder/Makefile.tracee-make alpine-shell\n</code></pre> </li> <li> <p>To execute an ubuntu-tracee-make shell:</p> <pre><code>make -f builder/Makefile.tracee-make ubuntu-shell\n</code></pre> </li> </ul>"},{"location":"contributing/building/environment/#using-build-environment-as-a-make-replacement","title":"Using build environment as a make replacement","text":"<p>Instead of executing a builder shell, you may use <code>alpine-make</code>, or <code>ubuntu-make</code>, as a replacement for the <code>make</code> command:</p> <ol> <li>Create builder environment as described:     Creating a builder environment</li> <li> <p>Compile tracee using <code>ubuntu-make</code></p> <ul> <li> <p>Build tracee binary:</p> <pre><code>make -f builder/Makefile.tracee-make ubuntu-make ARG=\"tracee\"\n</code></pre> </li> <li> <p>Show available <code>ubuntu-make</code> commands:</p> <pre><code>make -f builder/Makefile.tracee-make ubuntu-make ARG=\"help\"\n</code></pre> </li> <li> <p>Remove tracee binary</p> <pre><code>make -f builder/Makefile.tracee-make ubuntu-make ARG=\"clean\"\n</code></pre> </li> <li> <p>Build binaries for all</p> <pre><code>make -f builder/Makefile.tracee-make ubuntu-make ARG=\"all\"\n</code></pre> </li> </ul> </li> <li> <p>Run tracee binary</p> <pre><code>sudo ./dist/tracee\n</code></pre> </li> </ol> <p>Note: the generated binary must be compatible to your host (depending on glibc version).</p> <p>If you don't want to depend on the host's library versions, or you are using the <code>alpine-make</code> container as a replacement for <code>make</code>, then it's necessary to set the <code>STATIC</code> variable to <code>1</code> so you can run compiled binaries on your host machine:</p> <ol> <li> <p>Compile tracee</p> <pre><code>make -f builder/Makefile.tracee-make alpine-prepare\nSTATIC=1 make -f builder/Makefile.tracee-make alpine-make ARG=\"all\"\n</code></pre> </li> <li> <p>Verify the executable is static</p> <ul> <li>Note: ldd prints the shared libraries required by an executable file</li> </ul> <pre><code>ldd dist/tracee\n</code></pre> <pre><code>not a dynamic executable\n</code></pre> </li> <li> <p>Execute the static binary from your host</p> <pre><code>sudo ./dist/tracee\n</code></pre> </li> </ol>"},{"location":"docs/overview/","title":"Docs","text":"<p>In this section you can find the complete reference documentation for all of the different features and settings that Tracee has to offer.</p> <p>Note</p> <p>We have recently transitioned to a new architecture and user-experience, as detailed here, and the documentation has been updated accordingly.  </p>"},{"location":"docs/overview/#why-choose-tracee","title":"Why Choose Tracee?","text":"<p>Tracee stands out from other security and observability tools through several key differentiators:</p>"},{"location":"docs/overview/#everything-is-an-event","title":"\ud83c\udfaf Everything is an Event","text":"<p>Unlike tools that separate raw data from detections, Tracee presents everything as events - from low-level system calls to high-level security detections. This unified approach lets you: - Combine different event types in the same policy - Build complex detection logic across multiple data sources - Maintain a consistent view of your system's behavior</p>"},{"location":"docs/overview/#rich-event-coverage-with-minimal-effort","title":"\ud83d\udcca Rich Event Coverage with Minimal Effort","text":"<p>Tracee provides extensive built-in events out of the box: - 400+ system calls for comprehensive system monitoring - Network events including DNS, HTTP, and packet analysis - Security events with pre-built threat detection signatures - Container events with native Kubernetes integration</p>"},{"location":"docs/overview/#simplicity-without-compromise","title":"\ud83d\udee0\ufe0f Simplicity without Compromise","text":"<p>Create powerful policies with just a few lines of YAML: - Intuitive syntax for scoping and filtering - Flexible targeting from global to container-specific - Easy deployment across development and production environments</p>"},{"location":"docs/overview/#forensic-capabilities","title":"\ud83d\udd0d Forensic Capabilities","text":"<p>Go beyond detection with artifact collection: - Network traffic capture for detailed analysis - Binary collection for malware investigation - Memory dumps for advanced forensics - File artifacts for compliance and auditing</p>"},{"location":"docs/overview/#unified-architecture","title":"\ud83d\udd17 Unified Architecture","text":"<p>Everything works together seamlessly: - Events flow through the same processing pipeline - Policies can reference any combination of event types - Custom signatures integrate naturally with built-in events - Single configuration controls the entire system</p> <p>\ud83d\udc48 Please use the side-navigation on the left in order to browse the different topics.</p>"},{"location":"docs/troubleshooting/","title":"Troubleshooting","text":"<p>This guide helps you diagnose and resolve common issues when running Tracee.</p>"},{"location":"docs/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"docs/troubleshooting/#btf-not-available","title":"BTF Not Available","text":"<p>Problem: Error message about missing BTF support <pre><code>ERRO error loading eBPF program: BTF is required\n</code></pre></p> <p>Solution:  1. Check if BTF is available: <code>ls /sys/kernel/btf/vmlinux</code> 2. If missing, upgrade to a kernel version that includes BTF support (most modern distributions) 3. See Prerequisites for more details</p>"},{"location":"docs/troubleshooting/#permission-denied","title":"Permission Denied","text":"<p>Problem: Tracee fails to start with permission errors <pre><code>ERRO permission denied loading eBPF program\n</code></pre></p> <p>Solutions: 1. Run as root: <code>sudo tracee</code> 2. Use required capabilities:    <pre><code># Docker - minimal required capabilities\ndocker run \\\n  --cap-add SYS_RESOURCE \\\n  --cap-add SYS_ADMIN \\\n  --cap-add SYS_PTRACE \\\n  --cap-add NET_ADMIN \\\n  --cap-add SYSLOG \\\n  tracee\n\n# Kubernetes\nsecurityContext:\n  capabilities:\n    add: \n      - \"SYS_RESOURCE\"\n      - \"SYS_ADMIN\" \n      - \"SYS_PTRACE\"\n      - \"NET_ADMIN\"\n      - \"SYSLOG\"\n</code></pre> 3. For recent kernels (&gt;=5.8), you may use <code>CAP_BPF</code> + <code>CAP_PERFMON</code> instead of <code>CAP_SYS_ADMIN</code> 4. See Prerequisites for complete details and justifications</p>"},{"location":"docs/troubleshooting/#kernel-version-incompatibility","title":"Kernel Version Incompatibility","text":"<p>Problem: Unsupported kernel version errors</p> <p>Solution:  - Check supported kernels: Prerequisites - Consider upgrading to a supported LTS kernel (5.4, 5.10, 5.15, 6.2, 6.5)</p>"},{"location":"docs/troubleshooting/#runtime-issues","title":"Runtime Issues","text":""},{"location":"docs/troubleshooting/#no-events-generated","title":"No Events Generated","text":"<p>Problem: Tracee starts but produces no events</p> <p>Troubleshooting steps: 1. Check scope filters:    <pre><code># Test with minimal configuration\ntracee --events execve\n</code></pre></p> <ol> <li> <p>Verify events are enabled:    <pre><code># List enabled events\ntracee --events help\n</code></pre></p> </li> <li> <p>Check policy configuration:    <pre><code># Ensure policy scope matches your workload\nscope:\n  - container  # Or specific process filters if needed\n</code></pre></p> </li> </ol>"},{"location":"docs/troubleshooting/#high-cpu-usage","title":"High CPU Usage","text":"<p>Problem: Tracee consuming excessive CPU</p> <p>Solutions: 1. Reduce event scope:    <pre><code>scope:\n  - container  # Limit to containers only\n</code></pre></p> <ol> <li> <p>Filter events:    <pre><code>rules:\n  - event: execve\n    filters:\n      - uid!=0  # Example: exclude root processes\n</code></pre></p> </li> <li> <p>Use specific events instead of sets:    <pre><code>rules:\n  - event: execve        # Specific event\n  # - event: syscalls    # Avoid broad sets\n</code></pre></p> </li> </ol>"},{"location":"docs/troubleshooting/#container-issues","title":"Container Issues","text":""},{"location":"docs/troubleshooting/#container-events-not-captured","title":"Container Events Not Captured","text":"<p>Problem: Missing container-related events</p> <p>Solutions: 1. Mount container runtime socket:    <pre><code># Docker\ndocker run -v /var/run/docker.sock:/var/run/docker.sock tracee\n\n# Containerd\ndocker run -v /run/containerd/containerd.sock:/run/containerd/containerd.sock tracee\n</code></pre></p>"},{"location":"docs/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"docs/troubleshooting/#events-being-dropped","title":"Events Being Dropped","text":"<p>Problem: Warning about dropped events <pre><code>WARN events dropped due to buffer overflow\n</code></pre></p> <p>Solutions: 1. Increase buffer size:    <pre><code>tracee --perf-buffer-size 1024\n</code></pre></p> <ol> <li>Reduce event frequency:    <pre><code>rules:\n  - event: openat\n    filters:\n      - data.pathname!=/tmp/*  # Filter noisy paths\n</code></pre></li> </ol>"},{"location":"docs/troubleshooting/#slow-event-processing","title":"Slow Event Processing","text":"<p>Problem: Events arrive with significant delay</p> <p>Solutions: 1. Check system load: Use <code>top</code>, <code>htop</code> to verify system isn't overloaded 2. Optimize event selection: Use specific events instead of broad event sets</p>"},{"location":"docs/troubleshooting/#output-issues","title":"Output Issues","text":""},{"location":"docs/troubleshooting/#json-parsing-errors","title":"JSON Parsing Errors","text":"<p>Problem: Invalid JSON output</p> <p>Solutions: 1. Use proper output format:    <pre><code>tracee --output json --output option:parse-arguments\n</code></pre></p> <ol> <li>Check for mixed output:    <pre><code># Separate logs from events\ntracee --output json --log file:/var/log/tracee.log\n</code></pre></li> </ol>"},{"location":"docs/troubleshooting/#missing-event-fields","title":"Missing Event Fields","text":"<p>Problem: Expected fields not present in events</p> <p>Solutions: 1. Enable argument parsing:    <pre><code>tracee --output option:parse-arguments\n</code></pre></p> <ol> <li>Check event definition: Some events may not include all expected fields</li> </ol>"},{"location":"docs/troubleshooting/#debugging","title":"Debugging","text":""},{"location":"docs/troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code># Enable debug logs\ntracee --log debug\n\n# Or via environment\nTRACEE_LOG_LEVEL=debug tracee\n</code></pre>"},{"location":"docs/troubleshooting/#capture-system-information","title":"Capture System Information","text":"<pre><code># System info for bug reports\ntracee --version\nuname -a\ncat /etc/os-release\nls -la /sys/kernel/btf/vmlinux\n</code></pre>"},{"location":"docs/troubleshooting/#test-minimal-configuration","title":"Test Minimal Configuration","text":"<pre><code># Minimal test configuration\nsudo tracee --events execve\n</code></pre>"},{"location":"docs/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you continue experiencing issues:</p> <ol> <li>Search existing issues: GitHub Issues</li> <li>Check discussions: GitHub Discussions</li> <li>Join Slack: Aqua Community Slack</li> </ol> <p>When reporting issues, include: - Tracee version (<code>tracee --version</code>) - Operating system and kernel version - Container runtime (if applicable) - Complete error messages - Minimal reproduction steps</p>"},{"location":"docs/advanced/dropping-capabilities/","title":"Special: Environment Capabilities","text":""},{"location":"docs/advanced/dropping-capabilities/#introduction-to-capabilities-quoting-parts-of-kernel-docs","title":"Introduction to Capabilities (quoting parts of kernel docs)","text":"<p>For the purpose of performing permission checks, traditional UNIX implementations distinguish two categories of processes: privileged processes (whose effective user ID is 0, referred to as superuser or root), and unprivileged processes (whose effective UID is nonzero).</p> <p>Privileged processes bypass all kernel permission checks, while unprivileged processes are subject to full permission checking based on the process's credentials (usually: effective UID, effective GID, and supplementary group list).</p> <p>Linux divides the privileges traditionally associated with superuser into distinct units, known as capabilities, which can be independently enabled and disabled. Capabilities are a per-thread attribute.</p> <p>Thread capability sets:</p> <ul> <li> <p>Permitted: This is a limiting superset for the effective capabilities that the thread may assume. It is also a limiting superset for the capabilities that may be added to the inheritable set by a thread that does not have the CAP_SETPCAP capability in its effective set.</p> </li> <li> <p>Inheritable: This is a set of capabilities preserved across an execve(2). Inheritable capabilities remain inheritable when executing any program, and inheritable capabilities are added to the permitted set when executing a program that has the corresponding bits set in the file inheritable set.</p> </li> <li> <p>Effective: This is the set of capabilities used by the kernel to perform permission checks for the thread.</p> </li> <li> <p>Bounding: The capability bounding set is a mechanism that can be used to limit the capabilities that are gained during execve(2).</p> </li> </ul>"},{"location":"docs/advanced/dropping-capabilities/#tracee-and-capabilities","title":"Tracee and capabilities","text":"<p>tracee tries to reduce its capabilities during its execution. The way it does is through different \"execution protection rings\":</p> <ul> <li>Full:     All capabilities are effective (less secure)</li> <li>EBPF:     eBPF needed capabilities + Base capabilities</li> <li>Specific: Specific capabilities (from time to time) + Base Capabilities</li> <li>Base:     None or Some capabilities always effective (more secure)</li> </ul>"},{"location":"docs/advanced/dropping-capabilities/#listing-available-capabilities","title":"Listing available capabilities","text":"<p>You may see all available capabilities in the running environment by running:</p> <pre><code>capsh --print\n</code></pre>"},{"location":"docs/advanced/dropping-capabilities/#bypass-capabilities-dropping-feature","title":"Bypass capabilities dropping feature","text":"<p>Attention</p> <p>This session is important if you're facing errors related to tracee dropping its capabilities OR any other permission related errors.</p> <p>Some environments won't allow capabilities dropping because of permission issues (for example - AWS Lambdas).</p> <p>It might be a result of seccomp filter for example, restricting syscalls access.</p> <p>Failure in capabilities dropping will result tracee's exit with a matching error, to guarantee that tracee isn't running with excess capabilities without the user agreement.</p> <p>To allow tracee to run with high capabilities, and prevent those errors, the <code>--capabilities bypass=true</code> flag can be used. For the docker container users, the environment variable <code>CAPABILITIES_BYPASS=0|1</code> will have the same effect.</p> <p>Note</p> <p>Bypassing the capabilities drop will run tracee with all capabilities set as Effective and it is only recommended if you know what you are doing.</p>"},{"location":"docs/advanced/dropping-capabilities/#capabilities-errors-missing-or-too-permissive","title":"Capabilities Errors (Missing or Too Permissive)","text":"<p>During development, tracee might have bugs related to capabilities dropping feature: one event might not have its needed capabilities set as a dependency, for example, and you might still want to use that event.</p> <p>One way to have fine grained control of \"execution time\" effective capabilities is to rely on following 2 command line flags:</p> <ul> <li><code>--capabilities add=cap_X,cap_Y</code> (docker env variable CAPABILITIES_ADD)</li> <li><code>--capabilities drop=cap_Y,capZ</code> (docker env variable CAPABILITIES_DROP)</li> </ul> <p>The first will add given capabilities to the Base ring, the ring that describe capabilities that will always be effective while tracee is running, so events might be able to work. The last will remove the capabilities from that same ring.</p>"},{"location":"docs/advanced/forensics/","title":"Getting Started with Forensics","text":"<p>Tracee has a unique feature that lets you capture interesting artifacts from running applications, using the <code>--capture</code> flag.</p> <pre><code>./dist/tracee man capture\n</code></pre> <pre><code>sudo ./dist/tracee --capture xxx\n</code></pre> <p>Tip</p> <p>All captured artifacts are saved in Tracee's \"output directory\", which can be configured using <code>--capture dir:/path/to/dir</code>. You may also use <code>--capture clear-dir</code> if you want contents of the destination directory to be cleared every time you execute tracee.</p>"},{"location":"docs/advanced/forensics/#artifacts-types","title":"Artifacts Types","text":"<p>Tracee can capture the following types of artifacts:</p> <ol> <li> <p>I/O Files</p> <p>Anytime a file is being written to and/or read from, the contents of the file will be captured. I/O files can be filtered using 3 optional filters: 1. path - prefix of the file written/read. Up to 3 path filters can be    provided per capture type. 2. type - file's type can be <code>pipe</code>, <code>socket</code>, <code>elf</code> or <code>regular</code>. 3. fd - standard FD, one of the following: <code>stdin</code>, <code>stdout</code> and <code>stderr</code>.</p> <p>write example <pre><code>sudo ./dist/tracee \\\n   --output json \\\n   --scope comm=bash \\\n   --scope follow \\\n   --output option:parse-arguments \\\n   --capture dir:/tmp/tracee/ \\\n   --capture write='/tmp/*'\n</code></pre></p> <p>Note</p> <p>Using file capture without filter name will be path by default. Hence, <code>--capture write='/tmp/*</code> is the same as <code>--capture write:path='/tmp/*</code>.</p> <pre><code>echo write testing 123 &gt; /tmp/testing.txt\n</code></pre> <pre><code>{\"timestamp\":1657321167356748797,\"threadStartTime\":620311624458929,\"processorId\":7,\"processId\":2578238,\"cgroupId\":1,\"threadId\":2578238,\"parentProcessId\":2578237,\"hostProcessId\":2578238,\"hostThreadId\":2578238,\"hostParentProcessId\":2578237,\"userId\":1000,\"mountNamespace\":4026531840,\"pidNamespace\":4026531836,\"processName\":\"bash\",\"hostName\":\"fujitsu\",\"containerId\":\"\",\"containerImage\":\"\",\"containerName\":\"\",\"podName\":\"\",\"podNamespace\":\"\",\"podUID\":\"\",\"eventId\":\"722\",\"eventName\":\"security_file_open\",\"argsNum\":6,\"returnValue\":0,\"stackAddresses\":null,\"syscall\":\"openat\",\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"args\":[{\"name\":\"pathname\",\"type\":\"const char*\",\"value\":\"/tmp/testing.txt\"},{\"name\":\"flags\",\"type\":\"string\",\"value\":\"O_WRONLY|O_CREAT|O_TRUNC|O_LARGEFILE\"},{\"name\":\"dev\",\"type\":\"dev_t\",\"value\":271581185},{\"name\":\"inode\",\"type\":\"unsigned long\",\"value\":1966101},{\"name\":\"ctime\",\"type\":\"unsigned long\",\"value\":1657321027326584850},{\"name\":\"syscall_pathname\",\"type\":\"const char*\",\"value\":\"/tmp/testing.txt\"}]}\n{\"timestamp\":1657321167356729582,\"threadStartTime\":620311624458929,\"processorId\":7,\"processId\":2578238,\"cgroupId\":1,\"threadId\":2578238,\"parentProcessId\":2578237,\"hostProcessId\":2578238,\"hostThreadId\":2578238,\"hostParentProcessId\":2578237,\"userId\":1000,\"mountNamespace\":4026531840,\"pidNamespace\":4026531836,\"processName\":\"bash\",\"hostName\":\"fujitsu\",\"containerId\":\"\",\"containerImage\":\"\",\"containerName\":\"\",\"podName\":\"\",\"podNamespace\":\"\",\"podUID\":\"\",\"eventId\":\"257\",\"eventName\":\"openat\",\"argsNum\":4,\"returnValue\":3,\"stackAddresses\":null,\"syscall\":\"openat\",\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"args\":[{\"name\":\"dirfd\",\"type\":\"int\",\"value\":-100},{\"name\":\"pathname\",\"type\":\"const char*\",\"value\":\"/tmp/testing.txt\"},{\"name\":\"flags\",\"type\":\"string\",\"value\":\"O_WRONLY|O_CREAT|O_TRUNC\"},{\"name\":\"mode\",\"type\":\"mode_t\",\"value\":438}]}\n</code></pre> <p>Note</p> <p>You can read captured files written at <code>/tmp/tracee/out</code>: <pre><code>sudo cat /tmp/tracee/out/host/write.dev-271581185.inode-1966101\n</code></pre></p> <pre><code>write testing 123\n</code></pre> <p>read example</p> <pre><code>sudo ./dist/tracee \\\n   --output json \\\n   --scope comm=bash \\\n   --scope follow \\\n   --output option:parse-arguments \\\n   --capture dir:/tmp/tracee/ \\\n   --capture read:type=pipe \\\n   --capture read:fd=stdin'\n</code></pre> <pre><code>echo read testing 123 | cat\n</code></pre> <pre><code>{\"timestamp\":1685285181028166900,\"threadStartTime\":1685285181026565700,\"processorId\":1,\"processId\":182934,\"cgroupId\":1,\"threadId\":182934,\"parentProcessId\":147428,\"hostProcessId\":184128,\"hostThreadId\":184128,\"hostParentProcessId\":148293,\"userId\":0,\"mountNamespace\":4026532277,\"pidNamespace\":4026532279,\"processName\":\"cat\",\"hostName\":\"Alon-Zivony\",\"container\":{},\"kubernetes\":{},\"eventId\":\"720\",\"eventName\":\"vfs_read\",\"matchedPolicies\":[\"\"],\"argsNum\":5,\"returnValue\":17,\"syscall\":\"read\",\"stackAddresses\":null,\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"args\":[{\"name\":\"pathname\",\"type\":\"const char*\",\"value\":\"\"},{\"name\":\"dev\",\"type\":\"dev_t\",\"value\":12},{\"name\":\"inode\",\"type\":\"unsigned long\",\"value\":174033},{\"name\":\"count\",\"type\":\"size_t\",\"value\":131072},{\"name\":\"pos\",\"type\":\"off_t\",\"value\":0}]}\n{\"timestamp\":1685285181028267200,\"threadStartTime\":1685285181026565700,\"processorId\":1,\"processId\":182934,\"cgroupId\":1,\"threadId\":182934,\"parentProcessId\":147428,\"hostProcessId\":184128,\"hostThreadId\":184128,\"hostParentProcessId\":148293,\"userId\":0,\"mountNamespace\":4026532277,\"pidNamespace\":4026532279,\"processName\":\"cat\",\"hostName\":\"Alon-Zivony\",\"container\":{},\"kubernetes\":{},\"eventId\":\"720\",\"eventName\":\"vfs_read\",\"matchedPolicies\":[\"\"],\"argsNum\":5,\"returnValue\":0,\"syscall\":\"read\",\"stackAddresses\":null,\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"args\":[{\"name\":\"pathname\",\"type\":\"const char*\",\"value\":\"\"},{\"name\":\"dev\",\"type\":\"dev_t\",\"value\":12},{\"name\":\"inode\",\"type\":\"unsigned long\",\"value\":174033},{\"name\":\"count\",\"type\":\"size_t\",\"value\":131072},{\"name\":\"pos\",\"type\":\"off_t\",\"value\":0}]}\n</code></pre> </li> </ol> <p>!!! Note        You can read captured files read at <code>/tmp/tracee/out</code>:        <pre><code>sudo cat /tmp/tracee/out/host/read.dev-12.inode-176203\n</code></pre></p> <pre><code>    ```text\n    read testing 123\n    ```\n</code></pre> <ol> <li> <p>Executed Files</p> <p>Anytime a binary is executed, the binary file will be captured. If the same binary is executed multiple times, it will be captured just once.</p> <pre><code>sudo ./dist/tracee \\\n   --output json \\\n   --scope comm=bash \\\n   --scope follow \\\n   --output option:parse-arguments \\\n   --capture dir:/tmp/tracee/ \\\n   --capture exec\n</code></pre> <pre><code>/bin/ls\n</code></pre> <pre><code>{\"timestamp\":1657322300531713371,\"threadStartTime\":620311624458929,\"processorId\":21,\"processId\":2578238,\"cgroupId\":1,\"threadId\":2578238,\"parentProcessId\":2578237,\"hostProcessId\":2578238,\"hostThreadId\":2578238,\"hostParentProcessId\":2578237,\"userId\":1000,\"mountNamespace\":4026531840,\"pidNamespace\":4026531836,\"processName\":\"bash\",\"hostName\":\"fujitsu\",\"containerId\":\"\",\"containerImage\":\"\",\"containerName\":\"\",\"podName\":\"\",\"podNamespace\":\"\",\"podUID\":\"\",\"eventId\":\"56\",\"eventName\":\"clone\",\"argsNum\":5,\"returnValue\":3331757,\"stackAddresses\":null,\"syscall\":\"clone\",\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"args\":[{\"name\":\"flags\",\"type\":\"string\",\"value\":\"CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID\"},{\"name\":\"stack\",\"type\":\"void*\",\"value\":\"0x0\"},{\"name\":\"parent_tid\",\"type\":\"int*\",\"value\":\"0x0\"},{\"name\":\"child_tid\",\"type\":\"int*\",\"value\":\"0x7fd7ce0d3a10\"},{\"name\":\"tls\",\"type\":\"unsigned long\",\"value\":0}]}\n{\"timestamp\":1657322300534562489,\"threadStartTime\":620311624458929,\"processorId\":21,\"processId\":2578238,\"cgroupId\":1,\"threadId\":2578238,\"parentProcessId\":2578237,\"hostProcessId\":2578238,\"hostThreadId\":2578238,\"hostParentProcessId\":2578237,\"userId\":1000,\"mountNamespace\":4026531840,\"pidNamespace\":4026531836,\"processName\":\"bash\",\"hostName\":\"fujitsu\",\"containerId\":\"\",\"containerImage\":\"\",\"containerName\":\"\",\"podName\":\"\",\"podNamespace\":\"\",\"podUID\":\"\",\"eventId\":\"3\",\"eventName\":\"close\",\"argsNum\":1,\"returnValue\":0,\"stackAddresses\":null,\"syscall\":\"close\",\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"args\":[{\"name\":\"fd\",\"type\":\"int\",\"value\":3}]}\n</code></pre> <p>Note</p> <p>You will have a copy of each executed file written at <code>/tmp/tracee/out</code>: <pre><code>ldd /bin/ls\n</code></pre></p> <pre><code>linux-vdso.so.1 (0x00007ffca632c000)\nlibselinux.so.1 =&gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f9a930d5000)\nlibc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9a92ead000)\nlibpcre2-8.so.0 =&gt; /lib/x86_64-linux-gnu/libpcre2-8.so.0 (0x00007f9a92e16000)\n/lib64/ld-linux-x86-64.so.2 (0x00007f9a93136000)\n</code></pre> <pre><code>ldd /tmp/tracee/out/host/exec.1657322052835478987.ls\n</code></pre> <pre><code>linux-vdso.so.1 (0x00007ffe337fb000)\nlibselinux.so.1 =&gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007feeb1fa5000)\nlibc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007feeb1d7d000)\nlibpcre2-8.so.0 =&gt; /lib/x86_64-linux-gnu/libpcre2-8.so.0 (0x00007feeb1ce6000)\n/lib64/ld-linux-x86-64.so.2 (0x00007feeb2006000)\n\n```console\nsudo chmod +x /tmp/tracee/out/host/exec.1657322052835478987.ls\n/tmp/tracee/out/host/exec.1657322052835478987.ls\n</code></pre> </li> <li> <p>Memory Files</p> <p>Anytime a memory unpacker is detected, the suspicious memory region will be captured. This is triggered when memory protection changes from Write+Execute to Write.</p> <pre><code>sudo ./dist/tracee \\\n   --output none \\\n   --scope comm=bash \\\n   --scope follow \\\n   --capture dir:/tmp/tracee/ \\\n   --capture mem\n</code></pre> <p>Note</p> <p>You may opt not to have any output from tracee with <code>--output none</code> command flag is given. This makes tracee to work in capture mode only.</p> </li> <li> <p>Network PCAP Files</p> <p>Anytime a network packet is delivered to a process, traced by tracee, this packet might be captured into one or multiple pcap files.</p> <p>Attention</p> <p>The default behavior when capturing network traffic is to capture ALL traffic, despite given event filters. If you want to make capture feature to follow the given event filters, like for example capturing DNS events only, then you have to provide <code>--capture pcap-options:filtered</code> argument in the command line. Then only net_packet_XXX events will be captured (IPv4, IPv6, TCP, UDP, ICMP, ICMPv6, DNS, HTTP, etc).</p> <p>A good way to test this behavior is to execute:</p> <pre><code>sudo ./dist/tracee \\\n    --events net_packet_ipv4 \\\n    --capture network \\\n    --capture pcap-options:filtered\n</code></pre> <p>and observe a single pcap file for all ipv4 packets created:</p> <pre><code>find /tmp/tracee/out/pcap/\n</code></pre> <pre><code>/tmp/tracee/out/pcap/\n/tmp/tracee/out/pcap/single.pcap\n</code></pre> <p>You can select only dns packets, for example:</p> <pre><code>sudo ./dist/tracee \\\n    --events net_packet_dns \\\n    --capture network \\\n    --capture pcap-options:filtered\n</code></pre> <p>and the file <code>/tmp/tracee/out/pcap/single.pcap</code> would only contain DNS related packets:</p> <pre><code>find /tmp/tracee/out/pcap/\n</code></pre> <pre><code>/tmp/tracee/out/pcap/\n/tmp/tracee/out/pcap/single.pcap\n</code></pre> <pre><code>sudo tcpdump -n -r /tmp/tracee/out/pcap/single.pcap | head -2\n</code></pre> <pre><code>reading from file /tmp/tracee/out/pcap/single.pcap, link-type NULL (BSD loopback), snapshot length 262144\n16:53:48.870629 IP 127.0.0.1.55569 &gt; 127.0.0.53.53: 33361+ [1au] A? www.uol.com.br. (43)\n16:53:48.870690 IP 127.0.0.1.55569 &gt; 127.0.0.53.53: 25943+ [1au] AAAA? www.uol.com.br. (43)\n</code></pre> <p>A great thing is that you may have multiple pcap files, divided by:</p> <ol> <li>single: a single pcap file containing all packets (the default)</li> <li>process: one file per process executed, ordered by host and container</li> <li>container: one file for the host and one pcap file per container</li> <li>per-command: one file per command executed (even if multiple times)</li> </ol> <p>and you can even have multiple ways at the same time. Example: a ping command is executed inside a container. You want to summarize captured traffic per container and per command. You will find the same captured data for that ping command inside <code>commands/container_id/ping.pcap</code> and inside <code>containers/container_id.pcap</code>.</p> <pre><code>sudo ./dist/tracee \\\n    --events net_packet_icmp \\\n    --capture network \\\n    --capture pcap-options:filtered \\\n    --capture pcap:process,container,command\n</code></pre> <pre><code>cd /tmp/tracee/out\nfind pcap\n</code></pre> <pre><code>pcap\npcap/commands\npcap/commands/b86533d11f3\npcap/commands/b86533d11f3/ping.pcap\npcap/commands/host\npcap/commands/host/sshd.pcap\npcap/commands/host/zerotier-one.pcap\npcap/commands/host/node.pcap\npcap/commands/fd95a035ce5\npcap/commands/fd95a035ce5/ping.pcap\npcap/processes\npcap/processes/b86533d11f3\npcap/processes/b86533d11f3/ping_1261180_1663772450241192.pcap\npcap/processes/host\npcap/processes/host/node_186708_1573567360495399.pcap\npcap/processes/host/node_1196826_1662656211119567.pcap\npcap/processes/host/zerotier-one_7882_137007714376.pcap\npcap/processes/host/sshd_1196773_1662654999660718.pcap\npcap/processes/fd95a035ce5\npcap/processes/fd95a035ce5/ping_1261163_1663769383806467.pcap\npcap/containers\npcap/containers/host.pcap\npcap/containers/b86533d11f3.pcap\npcap/containers/fd95a035ce5.pcap\n</code></pre> <p>you can see the packets by executing tcpdump on any pcap file:</p> <pre><code>tcpdump -r pcap/containers/b86533d11f3.pcap\n</code></pre> <pre><code>reading from file pcap/containers/b86533d11f3.pcap, link-type NULL (BSD loopback), snapshot length 65535\n02:52:00.524035 IP 172.17.0.3 &gt; dns.google: ICMP echo request, id 5, seq 476, length 64\n02:52:00.533145 IP dns.google &gt; 172.17.0.3: ICMP echo reply, id 5, seq 476, length 64\n02:52:01.525455 IP 172.17.0.3 &gt; dns.google: ICMP echo request, id 5, seq 477, length 64\n02:52:01.535414 IP dns.google &gt; 172.17.0.3: ICMP echo reply, id 5, seq 477, length 64\n02:52:02.526715 IP 172.17.0.3 &gt; dns.google: ICMP echo request, id 5, seq 478, length 64\n02:52:02.536444 IP dns.google &gt; 172.17.0.3: ICMP echo reply, id 5, seq 478, length 64\n02:52:03.528739 IP 172.17.0.3 &gt; dns.google: ICMP echo request, id 5, seq 479, length 64\n02:52:03.538622 IP dns.google &gt; 172.17.0.3: ICMP echo reply, id 5, seq 479, length 64\n</code></pre> <pre><code>tcpdump -r pcap/commands/b86533d11f3/ping.pcap\n</code></pre> <pre><code>reading from file pcap/commands/b86533d11f3/ping.pcap, link-type NULL (BSD loopback), snapshot length 65535\n02:52:00.524035 IP 172.17.0.3 &gt; dns.google: ICMP echo request, id 5, seq 476, length 64\n02:52:00.533145 IP dns.google &gt; 172.17.0.3: ICMP echo reply, id 5, seq 476, length 64\n02:52:01.525455 IP 172.17.0.3 &gt; dns.google: ICMP echo request, id 5, seq 477, length 64\n02:52:01.535414 IP dns.google &gt; 172.17.0.3: ICMP echo reply, id 5, seq 477, length 64\n02:52:02.526715 IP 172.17.0.3 &gt; dns.google: ICMP echo request, id 5, seq 478, length 64\n02:52:02.536444 IP dns.google &gt; 172.17.0.3: ICMP echo reply, id 5, seq 478, length 64\n02:52:03.528739 IP 172.17.0.3 &gt; dns.google: ICMP echo request, id 5, seq 479, length 64\n02:52:03.538622 IP dns.google &gt; 172.17.0.3: ICMP echo reply, id 5, seq 479, length 64\n</code></pre> <p>Note</p> <p>Note that the same packets were written to 2 different pcap files: the pcap file describing the container <code>b86533d11f3</code> (because it was executing a single process: ping) and the pcap file describing ANY ping command executed in that container (commands/b86533d11f3/ping.pcap).</p> <p>The format for the pcap filenames inside <code>output_dir</code> is the following:</p> <ol> <li>single:    ./pcap/single.pcap</li> <li>processes:    ./pcap/processes/<code>container_id</code>/<code>process_comm</code>/<code>host_tid</code>/<code>task_starttime</code>.pcap</li> <li>containers:    ./pcap/containers/<code>container_id</code>.pcap</li> <li>commands:    ./pcap/commands/<code>container_id</code>/<code>process_comm</code>.pcap</li> </ol> <p>Attention</p> <p>By default, all pcap files will contain packets with headers only. That might too little for introspection, since sometimes one might be interested in a few bytes of the captured packet (or event it all). Next item shows how to capture a specific packet payload size.</p> <p>In order to capture a specific payload size you may specify:</p> <pre><code>sudo ./dist/tracee \\\n    --events net_packet_tcp \\\n    --capture network \\\n    --capture pcap-options:filtered \\\n    --capture pcap:single,command \\\n    --capture pcap-snaplen:default\n</code></pre> <p>To capture packet headers + 96 bytes of payload. Or replace <code>default</code> by:</p> <ol> <li>headers: capture up to L4 headers only</li> <li>max: full sized packets into pcap. WARNING: big pcap files.</li> <li>256b, 512b, 1024b, ... (any number plus \"b\")</li> <li>16kb, 32kb, 64kb,  ... (any number plus \"kb\")</li> </ol> <p>when specifying a payload size, it refers to the payload AFTER the layer4 headers (and not the entire packet length).</p> </li> <li> <p>Loaded Kernel Modules</p> <p>Anytime a kernel module is loaded, the binary file will be captured. If the same binary is loaded multiple times, it will be captured just once.</p> <pre><code>sudo ./dist/tracee \\\n    --output none \\\n    --scope comm=bash \\\n    --scope follow \\\n    --capture clear-dir \\\n    --capture module\n</code></pre> <p>Captured module will be found in tracee destination directory, just like any other captured file would be:</p> <pre><code>sudo ls /tmp/tracee/out/host\n</code></pre> <pre><code>module.dev-271581185.inode-4071826.pid-3668786.c8b62228208f4bdbf21df09c01046b73dd44733841675bf3c0ff969fbedab616\n</code></pre> <p>AND, the captured module is an exact copy of the loaded module:</p> <pre><code>sudo rmmod lkm_example\nsudo insmod /tmp/tracee/out/host/module.dev-271581185.inode-4071826.pid-3668786.c8b62228208f4bdbf21df09c01046b73dd44733841675bf3c0ff969fbedab616\n</code></pre> <pre><code>lsmod | grep example\n\n```text\nlkm_example            16384  0\n</code></pre> <pre><code>sudo rmmod lkm_example\n</code></pre> <p>you can even load/unload it.</p> <p>Note</p> <p>Example kernel module taken from this blog</p> </li> <li> <p>BPF programs</p> <p>Wheneber a BPF program is loaded, the BPF bytecode will be captured. This captured bytecode represents the BPF program as it was loaded by the loading process. It is basically the BPF section of the compiled ELF that loads the BPF program, which contains the program instructions themselves. You can disassemble the bytecode with the help of <code>binutils-bpf</code> package and the following command line: <code>objdump -D -b binary -m bpf &lt;path&gt;</code></p> <pre><code>$ sudo ./dist/tracee-ebpf \\\n   --output none \\\n   --scope comm=bash \\\n   --scope follow \\\n   --capture clear-dir \\\n   --capture bpf\n</code></pre> <p>Captured bpf bytecode will be found in tracee destination directory, just like any other captured file would be:</p> <p><pre><code>$ sudo ls /tmp/tracee/out/host\n  bpf.name-test_prog.pid-3668786.c8b62228208f4bdbf21df09c01046b73dd44733841675bf3c0ff969fbedab616\n</code></pre>    The hex value after the last \".\" is the hash of the bpf bytecode.</p> </li> </ol>"},{"location":"docs/advanced/ksyms/","title":"About Kernel symbols","text":"<p>As explained in the prerequisites doc, Tracee  needs the kernel symbol table for some operations.</p> <p>A Linux kernel might lack the <code>/proc/kallsyms</code> file due to:</p> <p>Kernel Configuration: If compiled without <code>CONFIG_KALLSYMS</code>, the kernel won't have this file. This option enables the kernel symbol table, used mainly for debugging.</p> <p>Security Protocols: Some systems might hide kernel symbols to prevent potential exploits. The <code>/proc/kallsyms</code> file could appear incomplete or even empty to non-root users. The <code>CONFIG_KALLSYMS_ALL</code> option ensures all symbols are visible.</p> <p>The Linux kernel also offers a setting, <code>/proc/sys/kernel/kptr_restrict</code>, to control kernel symbol visibility:</p> <ul> <li>0: No restrictions.</li> <li>1: Hide from non-privileged users.</li> <li>2: Hide from all users.</li> </ul>"},{"location":"docs/advanced/mac/","title":"Tracee on Apple Mac FAQ","text":""},{"location":"docs/advanced/mac/#does-tracee-run-on-macos","title":"Does Tracee run on MacOS?","text":"<p>No. Tracee runs only on Linux operating system. But you can run a Linux VM on your Mac, and then run Tracee in it. Please note though, that with this setup Tracee will only have visibility to the Linux VM it is running in, and not the host Mac machine.</p>"},{"location":"docs/advanced/mac/#does-tracee-run-on-apple-silicon","title":"Does Tracee run on Apple Silicon?","text":"<p>Apple Silicon (a.k.a <code>M#</code> CPUs) utilizes the ARM64 CPU architecture. Given that Tracee is compatible with ARM64, it should run on Apple Silicon as well.</p>"},{"location":"docs/advanced/mac/#does-tracee-run-in-a-linux-container-on-macos","title":"Does Tracee run in a Linux container on MacOS?","text":"<p>Yes. It is very common to install a container engine (e.g Docker Desktop) on MacOS and still be able to run Linux containers. This works by creating a Linux virtual machine inside your MacOS and running the container engine and all your containers from inside it. Note that with this setup Tracee will only have visibility to that Linux VM which is dedicated for the container engine, and not to your Mac machine. If you wanted to run something and see how Tracee reacts to it, you can run it as another container which should be visible to Tracee.</p>"},{"location":"docs/advanced/mac/#linuxkit","title":"Linuxkit","text":"<p>linuxkit is a popular Linux distribution used by Docker Desktop and other solutions. Linux kit does not have the Kernel Symbols Table feature properly configured by default, which is a prerequisite for running Tracee. It is technically possible to enable kernel symbols in linuxkit but an easier solution would be to  disable those Tracee events that depend on kernel symbols.</p>"},{"location":"docs/advanced/ordering-events/","title":"Special: Ordering Events","text":"<p>Package sorting feature is responsible for sorting incoming events from the BPF programs chronologically.</p> <pre><code>sudo ./dist/tracee \\\n    -o json \\\n    -o option:parse-arguments \\\n    -o option:sort-events\n</code></pre> <p>Information</p> <p>There are 3 known sources to events sorting issues:</p> <ol> <li> <p>In perf buffer, events are read in round robing order from CPUs buffers      (and not according to invocation time).</p> </li> <li> <p>Syscall events are invoked after internal events of the syscall (though      the syscall happened before the internal events).</p> </li> <li> <p>Virtual CPUs might enter sleep mode by host machine scheduler and send      events after some delay.</p> </li> </ol>"},{"location":"docs/advanced/ordering-events/#deep-dive-into-sorting-feature","title":"Deep Dive Into Sorting Feature","text":"<p>To address the events perf buffers issue, the events are divided to queues according to the source CPU. This way the events are almost ordered (except for syscalls). The syscall events are inserted to their right chronological place manually.</p> <p>This way, all events which occurred before the last event of the most delaying CPU could be sent forward with guaranteed order.</p> <p>To make sure syscall events are not missed when sending, a small delay is needed. Lastly, to address the vCPU sleep issue (which might cause up to 2 events received in a delay), the events need to be sent after a delay which is bigger than max possible vCPU sleep time (which is just an increase of the syscall events delay sending).</p>"},{"location":"docs/advanced/ordering-events/#algorithm-for-nerds-d","title":"Algorithm for Nerds =D","text":"<p>To summarize the algorithm main logic, here is textual simulation of the operation (assume that 2 scheduler ticks are larger than max possible vCPU sleep time):  </p> <p>Tn = Timestamp (n == TOD) #m = Event's Source CPU  </p> <ol> <li> <p>Initial State</p> <pre><code>       [ CPU 0 ]    [ CPU 1 ]    [ CPU 2 ]\n  HEAD    T1           T2           T4\n          T3           T5\n          T6\n  TAIL    T8\n</code></pre> </li> <li> <p>Scheduler Tick #1</p> <pre><code>Incoming events: T9#1, T11#2, T13#1, T10#2, T12#2\n\nQueues state after insert:\n       [ CPU 0 ]    [ CPU 1 ]    [ CPU 2 ]\n  HEAD    T1           T2           T4\n          T3           T5           T10 +\n          T6           T9  +        T11 +\n  TAIL    T8           T13 +        T12 +\n\n  - No event sent.\n  - Oldest timestamp = T1.\n  - T8 is oldest timestamp in most recent timestamps.\n  - In 2 ticks from now: send all events up to T8.\n  - Bigger timestamps than T8 (+) will be sent in future scheduling.\n</code></pre> </li> <li> <p>Scheduler Tick #2</p> <pre><code>Incoming events: T7#0, T22#1, T23#2, T20#0, T25#1, T24#2, T21#0\n\nQueues state after insert:\n       [ CPU 0 ]    [ CPU 1 ]    [ CPU 2 ]\n  HEAD    T1  ^        T2  ^        T4  ^\n          T3  ^        T5  ^        T10\n          T6  ^        T9           T11\n          T7  +^       T13          T12\n          T8  ^        T22 +        T23 +\n          T20 +        T25 +        T24 +\n  TAIL    T21 +\n\n  - No event sent.\n  - Oldest timestamp = T1.\n  - T21 is oldest timestamp in most recent timestamps.\n  - In 2 ticks from now: send all events up to T21.\n  - T8 is previous oldest timestamp in most recent timestamps.\n  - Next tick: send all events up to T8.\n  - Bigger timestamps than T21 (+) will be sent in future scheduling.\n</code></pre> </li> <li> <p>Scheduler Tick #3</p> <pre><code>Incoming events: T30#0, T34#1, T35#2, T31#0, T36#2, T32#0, T37#2, T33#0, T38#2, T50#1, T51#1\n\nQueues state after insert:\n       [ CPU 0 ]    [ CPU 1 ]    [ CPU 2 ]\n  HEAD    T20 ^        T9  ^        T10 ^\n          T21 ^        T13 ^        T11 ^\n          T30 +        T22          T12 ^\n          T31 +        T23          T24\n          T32 +        T25          T35 +\n          T33 +        T34 +        T36 +\n                       T50 +        T37 +\n   TAIL                T51 +        T38 +\n\n  - Max sent timestamp = T8.\n  - Oldest timestamp = T9.\n  - T33 is oldest timestamp in most recent timestamps.\n  - In 2 ticks from now: send all events up to T33.\n  - T21 is previous oldest timestamp in most recent timestamps.\n  - Next tick: send all events up to T21.\n  - Bigger timestamps than T33 (+) will be sent in future scheduling.\n</code></pre> </li> </ol>"},{"location":"docs/advanced/os-info/","title":"Special: Overriding OS needed files","text":"<p>Tracee supports eBPF CO-RE (Compile Once - Run Everywhere) technology and, because of that, it might need some information about the Linux OS it is running at. Tracee, through libbpfgo, must have access to /etc/os-release file AND either /boot/config-$(uname-r) OR /proc/config.gz files (KernelConfig API at helpers/kernel_config).</p> <p>Note that, despite having this need, tracee will try to execute as CO-RE eBPF program in any environment it is executed.</p>"},{"location":"docs/advanced/os-info/#os-release","title":"OS-RELEASE","text":"<p>Tracee will show you collected information about the running Linux OS with the <code>--log debug</code> argument:</p> <pre><code>sudo ./dist/tracee --log debug --scope uid=1000 --scope pid=new --events execve\n</code></pre> <pre><code>{\"level\":\"debug\",\"ts\":1670976393.7308447,\"msg\":\"osinfo\",\"ARCH\":\"x86_64\",\"PRETTY_NAME\":\"\\\"Manjaro Linux\\\"\",\"ID\":\"manjaro\",\"ID_LIKE\":\"arch\",\"BUILD_ID\":\"rolling\",\"KERNEL_RELEASE\":\"5.15.81-1-MANJARO\",\"pkg\":\"urfave\",\"file\":\"urfave.go\",\"line\":53}\n{\"level\":\"debug\",\"ts\":1670976393.73088,\"msg\":\"RuntimeSockets: failed to register default\",\"socket\":\"containerd\",\"error\":\"failed to register runtime socket stat /var/run/containerd/containerd.sock: no such file or directory\",\"pkg\":\"flags\",\"file\":\"containers.go\",\"line\":45}\n{\"level\":\"debug\",\"ts\":1670976393.730894,\"msg\":\"RuntimeSockets: failed to register default\",\"socket\":\"crio\",\"error\":\"failed to register runtime socket stat /var/run/crio/crio.sock: no such file or directory\",\"pkg\":\"flags\",\"file\":\"containers.go\",\"line\":45}\n{\"level\":\"debug\",\"ts\":1670976393.7309017,\"msg\":\"RuntimeSockets: failed to register default\",\"socket\":\"podman\",\"error\":\"failed to register runtime socket stat /var/run/podman/podman.sock: no such file or directory\",\"pkg\":\"flags\",\"file\":\"containers.go\",\"line\":45}\n{\"level\":\"debug\",\"ts\":1670976393.7310617,\"msg\":\"osinfo\",\"security_lockdown\":\"none\",\"pkg\":\"urfave\",\"file\":\"urfave.go\",\"line\":116}\n{\"level\":\"debug\",\"ts\":1670976393.733237,\"msg\":\"BTF\",\"bpfenv\":false,\"btfenv\":false,\"vmlinux\":true,\"pkg\":\"initialize\",\"file\":\"bpfobject.go\",\"line\":40}\n{\"level\":\"debug\",\"ts\":1670976393.7332687,\"msg\":\"BPF: using embedded BPF object\",\"pkg\":\"initialize\",\"file\":\"bpfobject.go\",\"line\":69}\n{\"level\":\"debug\",\"ts\":1670976393.7355402,\"msg\":\"unpacked CO:RE bpf object file into memory\",\"pkg\":\"initialize\",\"file\":\"bpfobject.go\",\"line\":144}\nTIME             UID    COMM             PID     TID     RET              EVENT                ARGS\n21:06:35:386730  1000   gio-launch-desk  743960  743960  0                execve               pathname: /home/gg/.local/bin/gnome-terminal, argv: [gnome-terminal]\n...\n</code></pre> <p>BUT os-release file might not exist:</p> <p>Because you're running in a distribution that does not have /etc/os-release, or because you're running inside a container that does not support it, you may face the following error:</p> <pre><code>sudo ./dist/tracee --log debug --scope uid=1000 --scope pid=new --events execve\n</code></pre> <pre><code>{\"level\":\"debug\",\"ts\":1670976530.5685039,\"msg\":\"osinfo\", \"warning: os-release file could not be found\",\"error\",\"open /etc/os-release: no such file or directory\",\"pkg\":\"urfave\",\"file\":\"urfave.go\",\"line\":33}\n...\nTIME             UID    COMM             PID     TID     RET              EVENT                ARGS\n...\n\nEnd of events stream\nStats: {EventCount:1 ErrorCount:0 LostEvCount:0 LostWrCount:0 LostNtCount:0}\n</code></pre> <p>Note</p> <p>But do note that tracee shall continue working (informing only the KERNEL_RELEASE OSInfo option).</p> <p>If you need to override the underlying Linux OS information, because you're running inside a container that already has /etc/os-release file, for example, you may create another os-release file and inform tracee by using LIBBPFGO's environment variable <code>LIBBPFGO_OSRELEASE_FILE</code>:</p> <pre><code>sudo LIBBPFGO_OSRELEASE_FILE=/etc/os-release.orig ./dist/tracee --scope uid=1000 --scope pid=new --events execve\n</code></pre> <p>If you're running tracee inside a docker container, you can simply bind mount <code>/etc/os-release</code> from the host as <code>/etc/os-release-host</code> into the guest.</p>"},{"location":"docs/advanced/os-info/#kconfig","title":"KCONFIG","text":"<p>Tracee needs access to kconfig file (/proc/config.gz OR /boot/config-$(uname -r)) in order to:</p> <ol> <li>Check if the kernel of your running environment supports needed eBPF features</li> <li>Provide kconfig variables to its eBPF counter-part (so eBPF program take decisions)</li> </ol> <p>Warning</p> <p>Tracee should NOT fail when it cannot find a kconfig file or needed options:</p> <ul> <li>missing kconfig file</li> </ul> <pre><code>sudo ./dist/tracee --log debug --scope uid=1000 --scope pid=new --events execve\n</code></pre> <pre><code>{\"level\":\"debug\",\"ts\":1670976875.7735798,\"msg\":\"osinfo\",\"VERSION\":\"\\\"20.04.5 LTS (Focal Fossa)\\\"\",\"ID\":\"ubuntu\",\"ID_LIKE\":\"debian\",\"PRETTY_NAME\":\"\\\"Ubuntu 20.04.5 LTS\\\"\",\"VERSION_ID\":\"\\\"20.04\\\"\",\"VERSION_CODENAME\":\"focal\",\"KERNEL_RELEASE\":\"5.4.0-91-generic\",\"ARCH\":\"x86_64\",\"pkg\":\"urfave\",\"file\":\"urfave.go\",\"line\":53}\n...\n{\"level\":\"warn\",\"ts\":1670976875.7762284,\"msg\":\"KConfig: could not check enabled kconfig features\",\"error\":\"could not read /boot/config-5.4.0-91-generic: stat /boot/config-5.4.0-91-generic: no such file or directory\"}\n{\"level\":\"warn\",\"ts\":1670976875.7762842,\"msg\":\"KConfig: assuming kconfig values, might have unexpected behavior\"}\n...\n{\"level\":\"debug\",\"ts\":1670976876.0801573,\"msg\":\"KConfig: warning: assuming kconfig values, might have unexpected behavior\",\"pkg\":\"initialization\",\"file\":\"kconfig.go\",\"line\":30}\nTIME             UID    COMM             PID     TID     RET              EVENT                ARGS\n...\n</code></pre> <ul> <li>missing kconfig options</li> </ul> <pre><code>{\"level\":\"warn\",\"ts\":1698759121.4432194,\"msg\":\"KConfig: could not detect kconfig options\",\"options\":[...]}\n</code></pre> <p>But do have in mind it is assuming some things from the host environment and its behavior might have inconsistencies.</p> <p>If you are running tracee in an environment that does not have a kconfig file (nor /proc/config.gz support), it is recommended that you provide the host kconfig file location to tracee through the <code>LIBBPFGO_KCONFIG_FILE</code> environment variable:</p> <pre><code>sudo LIBBPFGO_KCONFIG_FILE=/boot/config-other -E ./dist/tracee --log debug --scope uid=1000 --scope pid=new --events execve\n</code></pre> <pre><code>{\"level\":\"debug\",\"ts\":1670979362.3586345,\"msg\":\"osinfo\",\"VERSION_ID\":\"\\\"20.04\\\"\",\"VERSION_CODENAME\":\"focal\",\"KERNEL_RELEASE\":\"5.4.0-91-generic\",\"ARCH\":\"x86_64\",\"VERSION\":\"\\\"20.04.5 LTS (Focal Fossa)\\\"\",\"ID\":\"ubuntu\",\"ID_LIKE\":\"debian\",\"PRETTY_NAME\":\"\\\"Ubuntu 20.04.5 LTS\\\"\",\"pkg\":\"urfave\",\"file\":\"urfave.go\",\"line\":53}\n{\"level\":\"debug\",\"ts\":1670979362.358663,\"msg\":\"RuntimeSockets: failed to register default\",\"socket\":\"containerd\",\"error\":\"failed to register runtime socket stat /var/run/containerd/containerd.sock: no such file or directory\",\"pkg\":\"flags\",\"file\":\"containers.go\",\"line\":45}\n{\"level\":\"debug\",\"ts\":1670979362.3586702,\"msg\":\"RuntimeSockets: failed to register default\",\"socket\":\"docker\",\"error\":\"failed to register runtime socket stat /var/run/docker.sock: no such file or directory\",\"pkg\":\"flags\",\"file\":\"containers.go\",\"line\":45}\n{\"level\":\"debug\",\"ts\":1670979362.3586755,\"msg\":\"RuntimeSockets: failed to register default\",\"socket\":\"crio\",\"error\":\"failed to register runtime socket stat /var/run/crio/crio.sock: no such file or directory\",\"pkg\":\"flags\",\"file\":\"containers.go\",\"line\":45}\n{\"level\":\"debug\",\"ts\":1670979362.3586833,\"msg\":\"RuntimeSockets: failed to register default\",\"socket\":\"podman\",\"error\":\"failed to register runtime socket stat /var/run/podman/podman.sock: no such file or directory\",\"pkg\":\"flags\",\"file\":\"containers.go\",\"line\":45}\n{\"level\":\"debug\",\"ts\":1670979362.3588264,\"msg\":\"osinfo\",\"security_lockdown\":\"none\",\"pkg\":\"urfave\",\"file\":\"urfave.go\",\"line\":116}\n{\"level\":\"debug\",\"ts\":1670979362.3639433,\"msg\":\"BTF\",\"bpfenv\":false,\"btfenv\":false,\"vmlinux\":false,\"pkg\":\"initialize\",\"file\":\"bpfobject.go\",\"line\":40}\n{\"level\":\"debug\",\"ts\":1670979362.363965,\"msg\":\"BPF: no BTF file was found or provided\",\"pkg\":\"initialize\",\"file\":\"bpfobject.go\",\"line\":108}\n{\"level\":\"debug\",\"ts\":1670979362.3639715,\"msg\":\"BPF: trying non CO-RE eBPF\",\"file\":\"/tmp/tracee/tracee.bpf.5_4_0-91-generic.v0_8_0-rc-2-365-g0bac8f68.o\",\"pkg\":\"initialize\",\"file\":\"bpfobject.go\",\"line\":109}\n{\"level\":\"debug\",\"ts\":1670979362.4866858,\"msg\":\"Enricher\",\"error\":\"error registering enricher: unsupported runtime containerd\",\"pkg\":\"containers\",\"file\":\"containers.go\",\"line\":64}\n{\"level\":\"debug\",\"ts\":1670979362.486713,\"msg\":\"Enricher\",\"error\":\"error registering enricher: unsupported runtime crio\",\"pkg\":\"containers\",\"file\":\"containers.go\",\"line\":68}\n{\"level\":\"debug\",\"ts\":1670979362.486717,\"msg\":\"Enricher\",\"error\":\"error registering enricher: unsupported runtime docker\",\"pkg\":\"containers\",\"file\":\"containers.go\",\"line\":72}\nTIME             UID    COMM             PID     TID     RET              EVENT                ARGS\n...\n</code></pre> <p>If you're running tracee inside a docker container, you can simply bind mount /boot/config-$(uname -r) from the host as /boot/config-$(uname -r) into the guest and inform that through the <code>LIBBPFGO_KCONFIG_FILE</code> environment variable.</p> <p>Attention</p> <p>In case no kconfig file is found, tracee takes some decisions blindly and it may give you unexpected errors.</p>"},{"location":"docs/advanced/secure-tracing/","title":"FAQ - Frequently Asked Questions","text":"<ol> <li> <p>Secure tracing</p> <p>When tracee reads information from user programs, it is subject to a race condition where the user program might be able to change the arguments after tracee read them.</p> <p>For example, a program invoked:</p> <pre><code>execve(\"/bin/ls\", NULL, 0)\n</code></pre> <p>Tracee picked that up and will report that, then the program changed the first argument from <code>/bin/ls</code> to <code>/bin/bash</code>, and this is what the kernel will execute.</p> <p>To mitigate this, Tracee also provides \"LSM\" (Linux Security Module) based events, for example, the <code>bprm_check</code> event which can be reported by Tracee and cross-referenced with the reported regular syscall event.</p> </li> </ol>"},{"location":"docs/advanced/data-sources/custom/","title":"Custom data sources","text":"<p>Custom data sources are currently supported through the plugin mechanism.</p> <p>Attention</p> <p>Eventually you will find out that Golang Plugins aren't very useful if you consider all the problems that emerge from using it:</p> <ol> <li> <p>Can't use different go versions (need to compile the go plugin     with the exact same version that was used to build Tracee).</p> </li> <li> <p>Both Tracee and your golang plugin data source must be built with the     exact same GOPATH or you will get a \"plugin was built with a     different version of package XXX\" error.</p> </li> <li> <p>Any dependency you have in your plugin should be of the same     version with the dependencies of Tracee.</p> </li> <li> <p>Compiling tracee statically is sometimes useful to have a complete     portable eBPF tracing/detection solution. One good example when     statically compiling tracee is a good idea is to have a single     binary capable of running in GLIBC (most of them) and MUSL (Alpine)     powered Linux distros.</p> </li> </ol> <p>At the end, creating a golang data source plugin won't have the practical effects as a plugin mechanism should have, so it is preferred to have built-in data source (re)distributed with newer binaries (when you need to add/remove data sources from your environment) FOR NOW.</p> <p>There are two main reasons to write your own data source:</p> <ol> <li>To provide a stable \"tracee-native\" querying API for some externally owned data you need in a signature (for example some DB access)</li> <li>To provide an externally writable and internally readable data source in a data source (for example configuration)</li> </ol> <p>An example for an implementation of the latter is given here.</p>"},{"location":"docs/advanced/data-sources/custom/#integrating-into-a-plugin","title":"Integrating into a plugin","text":"<p>Since Data Sources should usually be supplied alongside a relevant data source, providing them is as easy as using another symbol in the plugin.</p> <p>Simply add the following symbol in your plugin entrypoint: <pre><code>    var ExportedDataSources = []detect.DataSource{\n        ...\n        mydatasource.New(someDependency),\n    }\n</code></pre></p> <p>And the data source will be available in data sources through the specified namespace and id given in your code.</p>"},{"location":"docs/advanced/data-sources/overview/","title":"Data Sources (Experimental)","text":"<p>Data sources are a new feature, which will be the base of allowing access to dynamic data stores in signature writing (currently only available in golang).</p> <p>Data sources are currently an experimental feature and in active development, and usage is opt-in.</p>"},{"location":"docs/advanced/data-sources/overview/#why-use-data-sources","title":"Why use data sources?","text":"<p>Signatures should opt for data sources when they need access to data beyond what is provided by the events they process.</p> <p>For instance, a signature may need access to data about the container where the event being processed was generated. With Tracee's integrated container data source, this can be achieved without the signature having to separately monitor container lifecycle events.</p>"},{"location":"docs/advanced/data-sources/overview/#what-data-sources-can-i-use","title":"What data sources can I use","text":"<p>Tracee offer three built-in data sources out of the box. There is also support for plugging in external data sources through the golang  plugin mechanism, similar to how signatures are currently supplied (see here).  However, there are known technical limitation to this approach, and the aim is to replace it in the future.</p> <p>Currently, the following data source are provided out of the box:</p> <ol> <li>Containers: Provides metadata about containers given a container id.</li> <li>Process Tree: Provides access to a tree of ever existing processes and threads.</li> <li>DNS Cache: Provides access to relaated DNS queries of a given address (IP or domain).</li> </ol> <p>This list will be expanded as other features are developed.</p>"},{"location":"docs/advanced/data-sources/overview/#how-to-use-data-sources","title":"How to use data sources","text":"<p>In order to use a data source in a signature you must request access to it in the <code>Init</code> stage. This can be done through the <code>SignatureContext</code> passed at that stage as such:</p> <pre><code>func (sig *mySig) Init(ctx detect.SignatureContext) error {\n    ...\n    containersData, ok := ctx.GetDataSource(\"tracee\", \"containers\")\n if !ok {\n  return errors.New(\"containers data source not registered\")\n }\n    if containersData.Version() &gt; 1 {\n  return fmt.Errorf(\"containers data source version not supported, please update this signature\")\n }\n sig.containersData = containersData\n}\n</code></pre> <p>As you can see, access to the data source has been requested using two keys: a namespace and a data source ID. Namespaces are employed to prevent name conflicts in the future when integrating custom data sources. All built-in data sources from Tracee will be available under the \"tracee\" namespace.</p> <p>After verifying the data source's availability, it's suggested to include a version check against the data source. This approach ensures that outdated signatures aren't run with a newer data source schema.</p> <p>Now, in the <code>OnEvent</code> function, you may use the data source like so:</p> <pre><code>container, err := sig.containersData.Get(containerId)\nif !ok {\n    return fmt.Errorf(\"failed to find container in data source: %v\", err)\n}\n\ncontainerName := container[\"container_name\"].(string)\n</code></pre> <p>Each Data source provides a querying method <code>Get(key any) map[string]any</code>. In the provided example, type validation is omitted during key verification. This omission is safe when adhering to the schema (provided by the <code>Schema()</code> method), considering the JSON representation of the returned map, and after an initial check of the data source version.</p>"},{"location":"docs/advanced/data-sources/write/","title":"Writable Data Sources","text":"<p>Since v0.20.0 tracee includes a new <code>DataSourceService</code> in its gRPC server. This service includes the ability to write generic data into a specified data source, both through streaming and unary methods.  However, in order to utilize this feature, a speciailized <code>WritableDataSource</code> must be specified in the RPC arguments. These data sources are currently only available through custom data sources, meaning that no built-in data sources support this feature.</p>"},{"location":"docs/advanced/data-sources/write/#how-to-use","title":"How to use","text":""},{"location":"docs/advanced/data-sources/write/#implementing-a-writable-data-source","title":"Implementing a writable data source","text":"<p>Let us implement an example data source which will give us a configurable threshold for reporting some finding.</p> <p>Start by adding a file <code>threshold_datasource.go</code>: <pre><code>    package datasourcetest\n\n    import (\n        \"encoding/json\"\n\n        \"github.com/aquasecurity/tracee/types/detect\"\n    )\n\n    type thresholdDataSource struct {\n        threshold int\n    }\n\n    func (ctx *e2eWritable) Get(key interface{}) (map[string]interface{}, error) {\n        keyVal, ok := key.(string)\n        if !ok {\n            return nil, detect.ErrKeyNotSupported\n        }\n\n        if keyVal != \"threshold\" {\n            return nil, detect.ErrKeyNotSupported\n        }\n\n        return map[string]interface{}{\n            \"threshold\": ctx.threshold,\n        }, nil\n    }\n\n    func (ctx *e2eWritable) Version() uint {\n        return 1\n    }\n\n    func (ctx *e2eWritable) Keys() []string {\n        return []string{\"string:\\\"threshold\\\"\"}\n    }\n\n    func (ctx *e2eWritable) Schema() string {\n        schema := map[string]interface{}{\n            \"threshold\": \"int\",\n        }\n\n        s, _ := json.Marshal(schema)\n        return string(s)\n    }\n\n    func (ctx *e2eWritable) Namespace() string {\n        return \"my_namespace\"\n    }\n\n    func (ctx *e2eWritable) ID() string {\n        return \"threshold_datasource\"\n    }\n\n    func (ctx *e2eWritable) Write(data map[interface{}]interface{}) error {\n        threshold, ok := data[\"threshold\"]\n        if !ok {\n            return detect.ErrFailedToUnmarshal\n        }\n\n        // Currently we pass the gRPC values directly, so numbers are sent as float64\n        thresholdFloat, ok := threshold.(float64)\n        if !ok {\n            return detect.ErrFailedToUnmarshal\n        }\n\n        ctx.threshold = int(thresholdFloat)\n        return nil\n    }\n\n    func (ctx *e2eWritable) Values() []string {\n        return []string{\"string\"}\n    }\n</code></pre></p> <p>Note</p> <p>Unpacking values from the given data dictionary has a specific quirk about value unwrapping. Currently only the gRPC API is given for writing to data sources, which uses the struct.proto package for passing generic values.  There is currently no abstraction layer over it, which is why we unpacked the threshold value as float64 in the example, despite wanting  it as an int in the end.</p>"},{"location":"docs/advanced/data-sources/write/#using-in-a-signature","title":"Using in a signature","text":"<p>Now we can use this data source just like we would any other in a signature through the following code: <pre><code>    func (sig *mySig) Init(ctx detect.SignatureContext) error {\n    ...\n    thresholdDataSource, ok := ctx.GetDataSource(\"my_namespace\", \"threshold_datasource\")\n    if !ok {\n        return errors.New(\"threshold data source not registered\")\n    }\n    if thresholdDataSource.Version() &gt; 1 {\n        return fmt.Errorf(\"threshold data source version not supported, please update this signature\")\n    }\n    sig.thresholdData = thresholdDataSource\n    }\n</code></pre></p>"},{"location":"docs/advanced/data-sources/write/#writing-to-the-data-source","title":"Writing to the data source","text":"<p>The following is a short example for a go program which will implement a client for out threshold data source. Note that this is a minimal outline, and you should modify it based on your specific usecase: <pre><code>package main\n\nimport (\n    \"context\"\n    \"flag\"\n    \"fmt\"\n    \"os\"\n\n    \"google.golang.org/grpc\"\n    \"google.golang.org/grpc/credentials/insecure\"\n    \"google.golang.org/protobuf/types/known/structpb\"\n\n    \"github.com/aquasecurity/tracee/api/v1beta1\"\n)\n\nfunc printAndExit(msg string, args ...any) {\n    fmt.Printf(msg, args...)\n    os.Exit(1)\n}\n\nfunc main() {\n    traceeAddressPtr := flag.String(\"key\", \"\", \"key to set in the data source\")\n    thresholdPtr := flag.Int(\"value\", \"\", \"key to set in the data source\")\n    flag.Parse()\n\n    traceeAddress := *traceeAddressPtr\n    threshold := *thresholdPtr\n\n    if traceeAddress == \"\" {\n        printAndExit(\"empty address given\\n\")\n    }\n    if threshold == 0 {\n        printAndExit(\"empty threshold given\\n\")\n    }\n    if threshold &lt; 0 {\n        printAndExit(\"negative threshold given\\n\")\n    }\n\n    conn, err := grpc.Dial(\n        traceeAddress,\n        grpc.WithTransportCredentials(insecure.NewCredentials()),\n    )\n    if err != nil {\n        printAndExit(\"failed to dial tracee grpc server: %v\\n\", err)\n    }\n    client := v1beta1.NewDataSourceServiceClient(conn)\n    _, err = client.Write(context.Background(), &amp;v1beta1.WriteDataSourceRequest{\n        Id:        \"my_namespace\",\n        Namespace: \"threshold_datasource\",\n        Key:       structpb.NewStringValue(\"threshold\"),\n        Value:     structpb.NewNumberValue(float64(threshold)),\n    })\n\n    if err != nil {\n        printAndExit(\"failed to write to data source: %v\\n\", err)\n    }\n}\n</code></pre></p> <p>With all these steps completed, you are ready to impelement and use your own writable data source!</p>"},{"location":"docs/advanced/data-sources/builtin/containers/","title":"Containers Data Source","text":"<p>The container enrichment feature gives Tracee the ability to extract details about active containers and link this information to the events it captures.</p> <p>The data source feature makes the information gathered from active containers accessible to signatures. When an event is captured and triggers a signature, that signature can retrieve information about the container using its container ID, which is bundled with the event being analyzed by the signature.</p>"},{"location":"docs/advanced/data-sources/builtin/containers/#internal-data-organization","title":"Internal Data Organization","text":"<p>From the data-sources documentation, you'll see that searches use keys. It's a bit like looking up information with a specific tag (or a key=value storage).</p> <p>The <code>containers data source</code> operates straightforwardly. Using <code>string</code> keys, which represent the container IDs, you can fetch <code>map[string]string</code> values as shown below:</p> <pre><code>    schemaMap := map[string]string{\n        \"container_id\":      \"string\",\n        \"container_name\":    \"string\",\n        \"container_image\":   \"string\",\n        \"k8s_pod_id\":        \"string\",\n        \"k8s_pod_name\":      \"string\",\n        \"k8s_pod_namespace\": \"string\",\n        \"k8s_pod_sandbox\":   \"bool\",\n    }\n</code></pre> <p>From the structure above, using the container ID lets you access details like the originating Kubernetes pod name or the image utilized by the container.</p>"},{"location":"docs/advanced/data-sources/builtin/containers/#using-the-containers-data-source","title":"Using the Containers Data Source","text":"<p>Make sure to read Golang Signatures first.</p>"},{"location":"docs/advanced/data-sources/builtin/containers/#signature-initialization","title":"Signature Initialization","text":"<p>During the signature initialization, get the containers data source instance:</p> <pre><code>type e2eContainersDataSource struct {\n    cb             detect.SignatureHandler\n    containersData detect.DataSource\n}\n\nfunc (sig *e2eContainersDataSource) Init(ctx detect.SignatureContext) error {\n    sig.cb = ctx.Callback\n    containersData, ok := ctx.GetDataSource(\"tracee\", \"containers\")\n    if !ok {\n        return errors.New(\"containers data source not registered\")\n    }\n    sig.containersData = containersData\n    return nil\n}\n</code></pre> <p>Then, to each event being handled, you will <code>Get()</code>, from the data source, the information needed.</p>"},{"location":"docs/advanced/data-sources/builtin/containers/#on-events","title":"On Events","text":"<p>Given the following example:</p> <pre><code>func (sig *e2eContainersDataSource) OnEvent(event protocol.Event) error {\n    eventObj, ok := event.Payload.(trace.Event)\n    if !ok {\n        return errors.New(\"failed to cast event's payload\")\n    }\n\n    switch eventObj.EventName {\n    case \"sched_process_exec\":\n        containerId := eventObj.Container.ID\n        if containerId == \"\" {\n            return errors.New(\"received non container event\")\n        }\n\n        container, err := sig.containersData.Get(containerId)\n        if !ok {\n            return fmt.Errorf(\"failed to find container in data source: %v\", err)\n        }\n\n        containerImage, ok := container[\"container_image\"].(string)\n        if !ok {\n            return errors.New(\"failed to obtain the container image name\")\n        }\n\n        m, _ := sig.GetMetadata()\n\n        sig.cb(detect.Finding{\n            SigMetadata: m,\n            Event:       event,\n            Data:        map[string]interface{}{},\n        })\n    }\n\n    return nil\n}\n</code></pre> <p>You may see that, through the <code>event object container ID</code> information, you may query the data source and obtain the <code>container name</code> or any other information listed before.</p>"},{"location":"docs/advanced/data-sources/builtin/dns/","title":"DNS Cache Data Source","text":"<p>The <code>DNS Cache</code> feature allows to tracee build an accurate image of dns and ip relations. These relations can be queried in signatures through a data source.</p>"},{"location":"docs/advanced/data-sources/builtin/dns/#enabling-the-feature","title":"Enabling the Feature","text":"<p>To switch on the <code>DNS Cache</code> feature, run the command:</p> <pre><code>sudo tracee --output option:sort-events --output json --output option:parse-arguments --dnscache enable --events &lt;event_type&gt;\n</code></pre> <p>The underlying structure is populated using the core net_packet_dns event and its payload.</p>"},{"location":"docs/advanced/data-sources/builtin/dns/#command-line-option","title":"Command Line Option","text":"<pre><code>$ tracee --dnscache help\nSelect different options for the DNS cache.\n\nExample:\n  --dnscache enable  | enable with default values (see below).\n  --dnscache size=X  | will cache up to X dns query trees - further queries may be cached regardless (default: 5000).\n\nUse comma OR use the flag multiple times to choose multiple options:\n  --dnscache size=A\n  --dnscache enable\n</code></pre> <p>Consider for your usecase, how many query trees would you like to store? If you will frequently check only a few addresses, consider lowering the size.</p>"},{"location":"docs/advanced/data-sources/builtin/dns/#internal-data-organization","title":"Internal Data Organization","text":"<p>From the data-sources documentation, you'll see that searches use keys. It's a bit like looking up information with a specific tag (or a key=value storage).</p> <p>The <code>dns data source</code> operates straightforwardly. Using <code>string</code> keys, which represent some network address (a domain or IP), you can fetch <code>map[string]string</code> values as shown below:</p> <pre><code>    schemaMap := map[string]string{\n        \"ip_addresses\": \"[]string\",\n        \"dns_queries\":  \"[]string\",\n        \"dns_root\":     \"string\",\n    }\n</code></pre> <p>Any address found in the cache, and other related addresses, will be returned in the above structure. Particulary useful is the <code>dns_root</code> field, which will store the initial dns query which all other addresses derive from.</p>"},{"location":"docs/advanced/data-sources/builtin/dns/#using-the-containers-data-source","title":"Using the Containers Data Source","text":"<p>Make sure to read Golang Signatures first.</p>"},{"location":"docs/advanced/data-sources/builtin/dns/#signature-initialization","title":"Signature Initialization","text":"<p>During the signature initialization, get the containers data source instance:</p> <pre><code>type e2eDnsDataSource struct {\n    cb      detect.SignatureHandler\n    dnsData detect.DataSource\n}\n\nfunc (sig *e2eDnsDataSource) Init(ctx detect.SignatureContext) error {\n    sig.cb = ctx.Callback\n    dnsData, ok := ctx.GetDataSource(\"tracee\", \"dns\")\n    if !ok {\n        return errors.New(\"dns data source not registered\")\n    }\n    if dnsData.Version() &gt; 1 {\n        return fmt.Errorf(\"dns data source version not supported, please update this signature\")\n    }\n    sig.dnsData = dnsData\n    return nil\n}\n</code></pre> <p>Then, to each event being handled, you will <code>Get()</code>, from the data source, the information needed.</p>"},{"location":"docs/advanced/data-sources/builtin/dns/#on-events","title":"On Events","text":"<p>Given the following example:</p> <pre><code>func (sig *e2eDnsDataSource) OnEvent(event protocol.Event) error {\n    eventObj, ok := event.Payload.(trace.Event)\n    if !ok {\n        return errors.New(\"failed to cast event's payload\")\n    }\n\n    switch eventObj.EventName {\n    case \"sched_process_exit\":\n        if eventObj.Executable.Path != \"/usr/bin/ping\" {\n            return nil // irrelevant code path\n        }\n\n        dns, err := sig.dnsData.Get(\"google.com\")\n        if err != nil {\n            return fmt.Errorf(\"failed to find dns data in data source: %v\", err)\n        }\n\n        ipResults, ok := dns[\"ip_addresses\"].([]string)\n        if !ok {\n            return errors.New(\"failed to extract ip results\")\n        }\n        if len(ipResults) &lt; 1 {\n            return errors.New(\"ip results were empty\")\n        }\n\n        dnsResults, ok := dns[\"dns_queries\"].([]string)\n        if !ok {\n            return errors.New(\"failed to extract dns results\")\n        }\n        if len(dnsResults) &lt; 1 {\n            return errors.New(\"dns results were empty\")\n        }\n        if dnsResults[0] != \"google.com\" {\n            return fmt.Errorf(\"bad dns query: %s\", dnsResults[0])\n        }\n\n        m, _ := sig.GetMetadata()\n\n        sig.cb(detect.Finding{\n            SigMetadata: m,\n            Event:       event,\n            Data:        map[string]interface{}{},\n        })\n    }\n\n    return nil\n}\n</code></pre> <p>The above signatures shows usage of the feature in a test signature found in our own e2e tests. The test validates a ping command sent to <code>google.com</code>.</p>"},{"location":"docs/advanced/data-sources/builtin/process-tree/","title":"Process Tree Data","text":"<p>The <code>Process Tree</code> feature offers a structured view of processes and threads active in the system where Tracee is deployed. This setup facilitates quick access, updates, and tracking of processes, child processes, and related threads. All relationship and metadata data points for processes and threads are versioned, so you can pull data snapshots from a precise timestamp.</p>"},{"location":"docs/advanced/data-sources/builtin/process-tree/#enabling-the-feature","title":"Enabling the Feature","text":"<p>To switch on the <code>Process Tree</code> feature, run the command:</p> <pre><code>sudo tracee --output option:sort-events --output json --output option:parse-arguments --proctree source=both --events &lt;event_type&gt;\n</code></pre> <p>The underlying structure is populated using the core <code>sched_process_fork</code>, <code>sched_process_exec</code>, and <code>sched_process_exit</code> events and their data. There's also an option to bootstrap the process tree through a secondary route using internal signal events.</p> <p>Introducing this secondary event source is strategic: it reduces interference with actively traced events, leading to more accurate and granular updates in the process tree.</p> <p>The number of processes retained in the tree hinges on cache size. We have two separate caches at play: one for processes and another for threads. The default cache size for processes is 16K, supporting tracking for up to 16,384 processes, while the thread cache is 32K, supporting tracking for up to 32,768 threads. On average, a configuration ratio of 2:1 (thread:cache) is defined, as one thread is created for every process. It's worth noting that these are LRU caches: once full, they'll evict the least recently accessed entries to accommodate fresh ones.</p> <p>The process tree query the procfs upon initialization and during runtime to fill missing data: * During initialization, it runs over all procfs to fill all existing processes and threads * During runtime, it queries specific processes in the case of missing information caused by missing events. </p> <p>[!CAUTION] The procfs query might increase the feature toll on CPU and memory. The runtime query might have a snowball effect on lost events, as it will reduce the system resources in the processes of filling missing information.</p>"},{"location":"docs/advanced/data-sources/builtin/process-tree/#command-line-option","title":"Command Line Option","text":"<pre><code>Example:\n  --proctree source=[none|events|signals|both]\n      none         | process tree is disabled (default).\n      events       | process tree is built from events.\n      signals      | process tree is built from signals.\n      both         | process tree is built from both events and signals.\n  --proctree process-cache=8192   | will cache up to 8192 processes in the tree (LRU cache).\n  --proctree thread-cache=16384   | will cache up to 16384 threads in the tree (LRU cache).\n  --proctree disable-procfs       | will disable procfs entirely.\n  --proctree disable-procfs-query | will disable procfs quering during runtime.\n\nUse comma OR use the flag multiple times to choose multiple options:\n  --proctree source=A,process-cache=B,thread-cache=C\n  --proctree process-cache=X --proctree thread-cache=Y\n</code></pre>"},{"location":"docs/advanced/data-sources/builtin/process-tree/#internal-data-organization","title":"Internal Data Organization","text":"<p>For those looking to develop signatures or simply understand the underpinnings of the <code>Process Tree</code> feature, a grasp on its internal data organization is invaluable. At its core, the system is structured for fast access, updating, and tracking.</p>"},{"location":"docs/advanced/data-sources/builtin/process-tree/#hash-indexing","title":"Hash Indexing","text":"<p>Every entity in the <code>Process Tree</code>, be it a process or thread, is indexed using a distinctive hash, formulated by combining a task's <code>start time</code> and <code>thread id</code>. Events in the system come attached with this hash in their context under the <code>EntityID</code> label.</p>"},{"location":"docs/advanced/data-sources/builtin/process-tree/#core-components","title":"Core Components","text":"<ol> <li> <p>ProcessTree: A macro view of all the processes and threads active in the system.</p> <ul> <li>Processes: Defined either as a single-threaded application or the lead thread in a multi-thread application where the PID and TID are identical.</li> <li>Threads: Also known as Light-Weight Processes by the kernel, they include both separate threads and the thread group leader. Threads under the same leader share a PID but possess distinct TIDs.</li> </ul> </li> <li> <p>Process: A representation of individual processes. It contains:</p> <ul> <li>The process metadata using the <code>TaskInfo</code> structure.</li> <li>Information on its executable and interpreter using the <code>FileInfo</code> structure.</li> <li>References to its parent, child processes, and sibling threads within the same thread group.</li> </ul> </li> <li> <p>Thread: A representation of system threads. It contains:</p> <ul> <li>The thread metadata using the <code>TaskInfo</code> structure.</li> <li>Links to its parent and the its thread group leader.</li> </ul> </li> <li> <p>TaskInfo: From task names, PIDs, TIDs, PPIDs, ownership details, to start and end timestamps, it's all cataloged here. As tasks evolve, certain properties might shift. These changes are recorded using changelogs.</p> </li> <li> <p>TaskInfo: Acts as the central repository for task-specific attributes, including task names, PIDs (Process IDs), TIDs (Thread IDs), PPIDs (Parent Process IDs), and ownership UID/GID specifications. As task states transition within the kernel space, certain properties are subject to modification; such alterations are persistently tracked using changelogs.</p> </li> <li> <p>FileInfo: This structure aggregates file metadata, capturing attributes like path, device, and inode details. In the realm of processes, <code>FileInfo</code> is responsible for maintaining records of binaries and interpreters, with alterations being tracked in changelogs.</p> </li> </ol>"},{"location":"docs/advanced/data-sources/builtin/process-tree/#process-tree-artifacts","title":"Process Tree Artifacts","text":"<p>In an upcoming update, the process tree will be enhanced with the addition of <code>artifacts</code>. Each process within the tree will be augmented with these \"artifacts\" to denote a task's various interactions and operations within the system. These artifacts, sourced from the tracing events provided by Tracee, offer a detailed depiction of a process's activities at the system level. Potential artifacts encompass:</p> <ul> <li>File Operations: Opened files, read/write activities, file deletion, and attribute changes.</li> <li>Network Activities: Sockets created, inbound/outbound connections, transmitted/received data packets, and protocol-specific operations (like TCP handshakes or UDP transmissions).</li> <li>System Calls: Executed syscalls, their arguments, and return values.</li> <li>Memory Activities: Memory allocation, deallocation, and page faults.</li> <li>Device Interactions: I/O operations on devices, device mounting/unmounting.</li> <li>Kernel Module Activities: Module load and unload operations.</li> <li>Security-Related Activities: Capabilities changes, SELinux operations, and AppArmor profile transitions.</li> </ul> <p>This enhancement aims to offer developers and sysadmins a more detailed and granular view of task behaviors, paving the way for better system monitoring, diagnostics, and potential threat detection.</p>"},{"location":"docs/advanced/data-sources/builtin/process-tree/#using-the-process-tree","title":"Using the Process Tree","text":"<p>The process tree is only available internally, to tracee's components, but, through the datasource mechanism, signatures are able to query the tree data using the data source process tree API.</p>"},{"location":"docs/advanced/data-sources/builtin/process-tree/#accessing-the-process-tree-data-source","title":"Accessing the Process Tree Data Source","text":"<p>Make sure to read Golang Signatures first.</p> <p>During the signature initialization, get the process tree data source instance:</p> <pre><code>type e2eProcessTreeDataSource struct {\n    cb            detect.SignatureHandler\n    processTreeDS detect.DataSource\n}\n\n// Init is called once when the signature is loaded.\nfunc (sig *e2eProcessTreeDataSource) Init(ctx detect.SignatureContext) error {\n    sig.cb = ctx.Callback\n\n    processTreeDataSource, ok := ctx.GetDataSource(\"tracee\", \"process_tree\")\n    if !ok {\n        return errors.New(\"data source tracee/process_tree is not registered\")\n    }\n\n    sig.processTreeDS = processTreeDataSource\n\n    return nil\n}\n</code></pre> <p>Then, to each event being handled, you will <code>Get()</code>, from the data source, the information needed. There are 3 types of information that can be requested:</p> <ol> <li>datasource.ProcKey: for process information retrieval.</li> <li>datasource.ThreadKey: for thread information retrieval.</li> <li>datasource.LineageKey: for process lineage information retrieval.</li> </ol> <p>Before explaining each request type and how to use them, consider the following signature <code>OnEvent()</code> handler example:</p> <pre><code>// OnEvent is called when a subscribed event occurs.\nfunc (sig *e2eProcessTreeDataSource) OnEvent(event protocol.Event) error {\n    eventObj, ok := event.Payload.(trace.Event)\n    if !ok {\n        return errors.New(\"failed to cast event's payload\")\n    }\n\n    switch eventObj.EventName {\n    case \"sched_process_exec\":\n        err = sig.check(&amp;eventObj)\n        if err != nil {\n            return err\n        }\n    }\n\n    // If all checks passed, send a finding\n    m, _ := sig.GetMetadata()\n\n    sig.cb(detect.Finding{\n        SigMetadata: m,\n        Event:       event,\n        Data:        map[string]interface{}{},\n    })\n\n    return nil\n}\n</code></pre> <p>Where the <code>check()</code> method will either be:</p> <ul> <li>checkProcess()</li> <li>checkThread()</li> <li>checkLineage()</li> </ul> <p>You can check related data structures directly in the source code for more information. Below you will find easy to understand examples.</p>"},{"location":"docs/advanced/data-sources/builtin/process-tree/#processes-information-retrieval","title":"Processes Information Retrieval","text":"<p>Utilize the data source instance object saved from the <code>Init()</code> method, and use the information from the current event to query the process tree for details about the process that triggered the event.</p> <pre><code>func (sig *e2eProcessTreeDataSource) checkProcess(eventObj *trace.Event) error {\n    // Pick the process info from the data source\n    procQueryAnswer, err := sig.processTreeDS.Get(\n        datasource.ProcKey{\n            EntityId: eventObj.ProcessEntityId,\n            Time:     time.Unix(0, int64(eventObj.Timestamp)),\n        })\n    if err != nil {\n        return errors.New(debug(\"could not find process\"))\n    }\n    processInfo, ok := procQueryAnswer[\"process_info\"].(datasource.ProcessInfo)\n    if !ok {\n        return errors.New(debug(\"could not extract info\"))\n    }\n\n    // Compare PID, NS PID and PPID\n    if processInfo.Pid != eventObj.HostProcessID {\n        return errors.New(debug(\"no match for pid\"))\n    }\n    if processInfo.NsPid != eventObj.ProcessID {\n        return errors.New(debug(\"no match for ns pid\"))\n    }\n    if processInfo.Ppid != eventObj.HostParentProcessID {\n        return errors.New(debug(\"no match for ppid\"))\n    }\n\n    // Check if the process lists itself in the list of its threads\n    threadExist := false\n    for tid := range processInfo.ThreadsIds {\n        if tid == eventObj.HostThreadID {\n            threadExist = true\n            break\n        }\n    }\n    if !threadExist {\n        return errors.New(debug(\"process not listed as thread\"))\n    }\n</code></pre> <p>From the data-sources documentation, you'll see that searches use keys. It's a bit like looking up information with a specific tag (or a key=value storage).</p> <p>In the provided example, the <code>eventObj.ProcessEntityId</code> key (which is the process hash accompanying the event being handled) is utilized alongside the <code>datasource.ProcKey{}</code> argument to search for a process in the process tree. The resulting process is the one associated with the event under consideration.</p> <p>Keep in mind that users can specify a time to retrieve the information. By using the event timestamp, you obtain data available up to that specific moment.</p> <p>Within the retrieved process object, you can find essential information about the running process. This includes details such as the binary associated with the executing program, the interpreter used for that program (either ld.so for ELF files or the relevant interpreters responsible for execution). In the near future, you can expect to see additional data related to the process, such as open files and sockets, known hosts and resolved names, utilized protocols, and more.</p>"},{"location":"docs/advanced/data-sources/builtin/process-tree/#threads-information-retrieval","title":"Threads Information Retrieval","text":"<pre><code>// checkThread checks if thread info in the data source matches the info from the event.\nfunc (sig *e2eProcessTreeDataSource) checkThread(eventObj *trace.Event) error {\n    // Pick the thread info from the data source\n    threadQueryAnswer, err := sig.processTreeDS.Get(\n        datasource.ThreadKey{\n            EntityId: eventObj.ThreadEntityId,\n            Time:     time.Unix(0, int64(eventObj.Timestamp)),\n        },\n    )\n    if err != nil {\n        return errors.New(debug(\"could not find thread\"))\n    }\n    threadInfo, ok := threadQueryAnswer[\"thread_info\"].(datasource.ThreadInfo)\n    if !ok {\n        return errors.New(debug(\"could not extract info\"))\n    }\n\n    // Compare TID, NS TID and PID\n    if threadInfo.Tid != eventObj.HostThreadID {\n        return errors.New(debug(\"no match for tid\"))\n    }\n    if threadInfo.NsTid != eventObj.ThreadID {\n        return errors.New(debug(\"no match for ns tid\"))\n    }\n    if threadInfo.Pid != eventObj.HostProcessID {\n        return errors.New(debug(\"no match for pid\"))\n    }\n\n    return nil\n}\n</code></pre> <p>In the example, the <code>eventObj.ThreadEntityId</code> key is used alongside the <code>datasource.ThreadKey{}</code> argument to search for a thread in the process tree. For applications that use only one thread, or the primary thread in multi-threaded applications, you'll find entries in both the processes and threads sections of the process tree. However, for simpler threads (commonly referred to as regular threads), they appear solely in the threads section.</p>"},{"location":"docs/advanced/data-sources/builtin/process-tree/#lineage-information-retrieval","title":"Lineage Information Retrieval","text":"<p>Using the <code>eventObj.ProcessEntityId</code> key (the process hash from the current event) in conjunction with the <code>datasource.LineageKey{}</code> argument allows retrieval of not just a singular process but multiple processes up the chain of ancestry: process, its parent, the parent's parent, and so forth. This capability is crucial for signatures that require analysis of process lineage and the associated artifacts of each process in that lineage.</p> <pre><code>func (sig *e2eProcessTreeDataSource) checkLineage(eventObj *trace.Event) error {\n    maxDepth := 5 // up to 5 ancestors + process itself\n\n    // Pick the lineage info from the data source.\n    lineageQueryAnswer, err := sig.processTreeDS.Get(\n        datasource.LineageKey{\n            EntityId: eventObj.ProcessEntityId,\n            Time:     time.Unix(0, int64(eventObj.Timestamp)),\n            MaxDepth: maxDepth,\n        },\n    )\n    if err != nil {\n        return errors.New(debug(\"could not find lineage\"))\n    }\n    lineageInfo, ok := lineageQueryAnswer[\"process_lineage\"].(datasource.ProcessLineage)\n    if !ok {\n        return errors.New(\"failed to extract ProcessLineage from data\")\n    }\n\n    compareMaps := func(map1, map2 map[int]uint32) bool {\n        return true // (or false)\n    }\n\n    // First ancestor is the process itself: lineageInfo[0] (ProcessInfo object)\n\n    for _, ancestor := range lineageInfo[1:] {\n        // do something with \"ancestor\" ProcessInfo\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"docs/events/","title":"Events","text":"<p>Events are the core of how Tracee works. Whether you're monitoring system calls, network activity, or security threats, Tracee treats everything as events that you can filter, combine, and act upon in your policies.</p>"},{"location":"docs/events/#event-categories","title":"Event Categories","text":"<p>Tracee provides rich built-in events across six main categories:</p> <ul> <li>syscalls - System call monitoring</li> <li>network - Network activity and protocol analysis</li> <li>security - Security-focused detections and signatures</li> <li>lsm - Linux Security Module hooks</li> <li>containers - Container lifecycle and metadata</li> <li>misc - Additional system events and utilities</li> </ul> <p>This section documents all of the different events that Tracee exposes.</p>"},{"location":"docs/events/#configuring-tracee-events","title":"Configuring Tracee Events","text":"<p>Events are defined in the Policy YAML manifest. </p> <p>Tracing the <code>execve</code> events in a policy:</p> <pre><code>apiVersion: tracee.aquasec.com/v1beta1\nkind: Policy\nmetadata:\n  name: sample-policy\n  annotations:\n    description: traces execve events\nspec:\n  scope:\n    - global\n  rules:\n    - event: execve\n</code></pre> <p>If no event is passed with [filters] or [policies], tracee will start with a set of default events.</p> <p>Please head over to the Tracee usage documentation for more information on configuring events.</p>"},{"location":"docs/events/#event-sets","title":"Event Sets","text":"<p>Event sets are predefined groups of related events. Instead of listing events individually, you can use sets like <code>syscalls</code> (all system calls), <code>fs</code> (file system operations), or <code>net</code> (network events).</p> <p>Discover available sets: <pre><code>tracee list --wide\n</code></pre></p> <p>Use in policies: <pre><code>rules:\n  - event: syscalls     # All system calls\n  - event: fs           # File system events\n</code></pre></p> <p>Use on command line: <pre><code>tracee --events syscalls,net\n</code></pre></p> <p>Tracing All System Calls</p> <p>Use <code>--events syscalls</code> to trace all system calls without listing them individually.</p>"},{"location":"docs/events/#related-topics","title":"Related Topics","text":"<ul> <li>Policies Documentation - Learn how to create policies that use events</li> <li>Custom Signatures - Build your own detection logic using Go</li> <li>Troubleshooting - Solutions for event-related issues</li> </ul>"},{"location":"docs/events/#video-content","title":"Video Content","text":"<p>If you are curious to learn more about the Tracee Events architecture and related decision making, then have a look at the following video Q&amp;A:</p> <p>Everything is an Event in Tracee   </p>"},{"location":"docs/events/builtin/network-events/","title":"Overview","text":"<p>Tracee offers a set of network events that makes it easy to trace network activity in common protocols.</p>"},{"location":"docs/events/builtin/network-events/#available-network-events","title":"Available network events","text":"<ul> <li>net_packet_ipv4</li> <li>net_packet_ipv6</li> <li>net_packet_tcp</li> <li>net_packet_udp</li> <li>net_packet_icmp</li> <li>net_packet_icmpv6</li> <li>net_packet_dns</li> <li>net_packet_dns_request</li> <li>net_packet_dns_response</li> <li>net_packet_http</li> <li>net_packet_http_request</li> <li>net_packet_http_response</li> </ul>"},{"location":"docs/events/builtin/network-events/#network-event-filtering","title":"Network Event Filtering","text":"<p>Supported</p> <p>For now it is NOT possible to filter the events through the header fields, but it IS possible, and recommended, to filter the events through <code>src</code>, <code>dest</code> fields. Not filtering network events might be hard to consume because of the amount of traced events.</p> <p>Trace all TCP packets sent to port 80 anywhere, from any process:</p> <pre><code>tracee --output json --events net_packet_tcp.data.dst_port=80\n</code></pre> <pre><code>{\"timestamp\":1696255674450496178,\"threadStartTime\":1696249856019516599,\"processorId\":6,\"processId\":1014858,\"cgroupId\":5650,\"threadId\":1014989,\"parentProcessId\":1729,\"hostProcessId\":1014858,\"hostThreadId\":1014989,\"hostParentProcessId\":1729,\"userId\":1000,\"mountNamespace\":4026531841,\"pidNamespace\":4026531836,\"processName\":\"vlc\",\"executable\":{\"path\":\"\"},\"hostName\":\"rugged\",\"containerId\":\"\",\"container\":{},\"kubernetes\":{},\"eventId\":\"2002\",\"eventName\":\"net_packet_tcp\",\"matchedPolicies\":[\"\"],\"argsNum\":5,\"returnValue\":0,\"syscall\":\"recvmsg\",\"stackAddresses\":[0],\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"threadEntityId\":3489249124,\"processEntityId\":3999221038,\"parentEntityId\":3069802613,\"args\":[{\"name\":\"src\",\"type\":\"const char*\",\"value\":\"192.168.200.50\"},{\"name\":\"dst\",\"type\":\"const char*\",\"value\":\"70.42.73.30\"},{\"name\":\"src_port\",\"type\":\"u16\",\"value\":40020},{\"name\":\"dst_port\",\"type\":\"u16\",\"value\":80},{\"name\":\"proto_tcp\",\"type\":\"trace.ProtoTCP\",\"value\":{\"srcPort\":40020,\"dstPort\":80,\"seq\":4173220235,\"ack\":2867625954,\"dataOffset\":8,\"FIN\":0,\"SYN\":0,\"RST\":0,\"PSH\":0,\"ACK\":1,\"URG\":0,\"ECE\":0,\"CWR\":0,\"NS\":0,\"window\":2766,\"checksum\":6218,\"urgent\":0}}]}\n{\"timestamp\":1696255674454872352,\"threadStartTime\":1696249856019516599,\"processorId\":6,\"processId\":1014858,\"cgroupId\":5650,\"threadId\":1014989,\"parentProcessId\":1729,\"hostProcessId\":1014858,\"hostThreadId\":1014989,\"hostParentProcessId\":1729,\"userId\":1000,\"mountNamespace\":4026531841,\"pidNamespace\":4026531836,\"processName\":\"vlc\",\"executable\":{\"path\":\"\"},\"hostName\":\"rugged\",\"containerId\":\"\",\"container\":{},\"kubernetes\":{},\"eventId\":\"2002\",\"eventName\":\"net_packet_tcp\",\"matchedPolicies\":[\"\"],\"argsNum\":5,\"returnValue\":0,\"syscall\":\"recvmsg\",\"stackAddresses\":[0],\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"threadEntityId\":3489249124,\"processEntityId\":3999221038,\"parentEntityId\":3069802613,\"args\":[{\"name\":\"src\",\"type\":\"const char*\",\"value\":\"192.168.200.50\"},{\"name\":\"dst\",\"type\":\"const char*\",\"value\":\"70.42.73.30\"},{\"name\":\"src_port\",\"type\":\"u16\",\"value\":40020},{\"name\":\"dst_port\",\"type\":\"u16\",\"value\":80},{\"name\":\"proto_tcp\",\"type\":\"trace.ProtoTCP\",\"value\":{\"srcPort\":40020,\"dstPort\":80,\"seq\":4173220235,\"ack\":2867626999,\"dataOffset\":8,\"FIN\":0,\"SYN\":0,\"RST\":0,\"PSH\":0,\"ACK\":1,\"URG\":0,\"ECE\":0,\"CWR\":0,\"NS\":0,\"window\":2766,\"checksum\":6218,\"urgent\":0}}]}\n{\"timestamp\":1696255674459439720,\"threadStartTime\":1696249856019516599,\"processorId\":6,\"processId\":1014858,\"cgroupId\":5650,\"threadId\":1014989,\"parentProcessId\":1729,\"hostProcessId\":1014858,\"hostThreadId\":1014989,\"hostParentProcessId\":1729,\"userId\":1000,\"mountNamespace\":4026531841,\"pidNamespace\":4026531836,\"processName\":\"vlc\",\"executable\":{\"path\":\"\"},\"hostName\":\"rugged\",\"containerId\":\"\",\"container\":{},\"kubernetes\":{},\"eventId\":\"2002\",\"eventName\":\"net_packet_tcp\",\"matchedPolicies\":[\"\"],\"argsNum\":5,\"returnValue\":0,\"syscall\":\"recvmsg\",\"stackAddresses\":[0],\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"threadEntityId\":3489249124,\"processEntityId\":3999221038,\"parentEntityId\":3069802613,\"args\":[{\"name\":\"src\",\"type\":\"const char*\",\"value\":\"192.168.200.50\"},{\"name\":\"dst\",\"type\":\"const char*\",\"value\":\"70.42.73.30\"},{\"name\":\"src_port\",\"type\":\"u16\",\"value\":40020},{\"name\":\"dst_port\",\"type\":\"u16\",\"value\":80},{\"name\":\"proto_tcp\",\"type\":\"trace.ProtoTCP\",\"value\":{\"srcPort\":40020,\"dstPort\":80,\"seq\":4173220235,\"ack\":2867628044,\"dataOffset\":8,\"FIN\":0,\"SYN\":0,\"RST\":0,\"PSH\":0,\"ACK\":1,\"URG\":0,\"ECE\":0,\"CWR\":0,\"NS\":0,\"window\":2766,\"checksum\":6218,\"urgent\":0}}]}\n{\"timestamp\":1696255674459993274,\"threadStartTime\":1696249856019516599,\"processorId\":6,\"processId\":1014858,\"cgroupId\":5650,\"threadId\":1014989,\"parentProcessId\":1729,\"hostProcessId\":1014858,\"hostThreadId\":1014989,\"hostParentProcessId\":1729,\"userId\":1000,\"mountNamespace\":4026531841,\"pidNamespace\":4026531836,\"processName\":\"vlc\",\"executable\":{\"path\":\"\"},\"hostName\":\"rugged\",\"containerId\":\"\",\"container\":{},\"kubernetes\":{},\"eventId\":\"2002\",\"eventName\":\"net_packet_tcp\",\"matchedPolicies\":[\"\"],\"argsNum\":5,\"returnValue\":0,\"syscall\":\"recvmsg\",\"stackAddresses\":[0],\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"threadEntityId\":3489249124,\"processEntityId\":3999221038,\"parentEntityId\":3069802613,\"args\":[{\"name\":\"src\",\"type\":\"const char*\",\"value\":\"192.168.200.50\"},{\"name\":\"dst\",\"type\":\"const char*\",\"value\":\"70.42.73.30\"},{\"name\":\"src_port\",\"type\":\"u16\",\"value\":40020},{\"name\":\"dst_port\",\"type\":\"u16\",\"value\":80},{\"name\":\"proto_tcp\",\"type\":\"trace.ProtoTCP\",\"value\":{\"srcPort\":40020,\"dstPort\":80,\"seq\":4173220235,\"ack\":2867629089,\"dataOffset\":8,\"FIN\":0,\"SYN\":0,\"RST\":0,\"PSH\":0,\"ACK\":1,\"URG\":0,\"ECE\":0,\"CWR\":0,\"NS\":0,\"window\":2766,\"checksum\":6218,\"urgent\":0}}]}\n</code></pre> <p>Trace all DNS packets received ONLY from Google DNS server '8.8.8.8':</p> <pre><code>tracee --output json --events net_packet_dns.data.src=8.8.8.8\n</code></pre> <p>(only systemd-resolved, since all the other processes are resolving using local systemd-resolved server <code>127.0.1.1:53</code>):</p> <pre><code>{\"timestamp\":1696255744257383842,\"threadStartTime\":1695658999333342370,\"processorId\":6,\"processId\":472,\"cgroupId\":2626,\"threadId\":472,\"parentProcessId\":1,\"hostProcessId\":472,\"hostThreadId\":472,\"hostParentProcessId\":1,\"userId\":976,\"mountNamespace\":4026532555,\"pidNamespace\":4026531836,\"processName\":\"systemd-resolve\",\"executable\":{\"path\":\"\"},\"hostName\":\"rugged\",\"containerId\":\"\",\"container\":{},\"kubernetes\":{},\"eventId\":\"2006\",\"eventName\":\"net_packet_dns\",\"matchedPolicies\":[\"\"],\"argsNum\":5,\"returnValue\":0,\"syscall\":\"\",\"stackAddresses\":[0],\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"threadEntityId\":131662446,\"processEntityId\":131662446,\"parentEntityId\":1975426032,\"args\":[{\"name\":\"src\",\"type\":\"const char*\",\"value\":\"8.8.8.8\"},{\"name\":\"dst\",\"type\":\"const char*\",\"value\":\"192.168.200.50\"},{\"name\":\"src_port\",\"type\":\"u16\",\"value\":53},{\"name\":\"dst_port\",\"type\":\"u16\",\"value\":36031},{\"name\":\"proto_dns\",\"type\":\"trace.ProtoDNS\",\"value\":{\"ID\":57779,\"QR\":1,\"opCode\":\"query\",\"AA\":0,\"TC\":0,\"RD\":1,\"RA\":1,\"Z\":0,\"responseCode\":\"no error\",\"QDCount\":1,\"ANCount\":1,\"NSCount\":1,\"ARCount\":1,\"questions\":[{\"name\":\"www.zip.net\",\"type\":\"AAAA\",\"class\":\"IN\"}],\"answers\":[{\"name\":\"www.zip.net\",\"type\":\"CNAME\",\"class\":\"IN\",\"TTL\":300,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"amazonas.uol.com.br\",\"PTR\":\"\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"}],\"authorities\":[{\"name\":\"uol.com.br\",\"type\":\"SOA\",\"class\":\"IN\",\"TTL\":600,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"\",\"TXTs\":null,\"SOA\":{\"MName\":\"a10-dns-uolcsfe1.host.intranet\",\"RName\":\"root.uol.com.br\",\"serial\":2016052887,\"refresh\":7200,\"retry\":3600,\"expire\":432000,\"minimum\":900},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"}],\"additionals\":[{\"name\":\"\",\"type\":\"OPT\",\"class\":\"Unknown\",\"TTL\":0,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"}]}}]}\n{\"timestamp\":1696255744409156387,\"threadStartTime\":1695658999333342370,\"processorId\":6,\"processId\":472,\"cgroupId\":2626,\"threadId\":472,\"parentProcessId\":1,\"hostProcessId\":472,\"hostThreadId\":472,\"hostParentProcessId\":1,\"userId\":976,\"mountNamespace\":4026532555,\"pidNamespace\":4026531836,\"processName\":\"systemd-resolve\",\"executable\":{\"path\":\"\"},\"hostName\":\"rugged\",\"containerId\":\"\",\"container\":{},\"kubernetes\":{},\"eventId\":\"2006\",\"eventName\":\"net_packet_dns\",\"matchedPolicies\":[\"\"],\"argsNum\":5,\"returnValue\":0,\"syscall\":\"\",\"stackAddresses\":[0],\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"threadEntityId\":131662446,\"processEntityId\":131662446,\"parentEntityId\":1975426032,\"args\":[{\"name\":\"src\",\"type\":\"const char*\",\"value\":\"8.8.8.8\"},{\"name\":\"dst\",\"type\":\"const char*\",\"value\":\"192.168.200.50\"},{\"name\":\"src_port\",\"type\":\"u16\",\"value\":53},{\"name\":\"dst_port\",\"type\":\"u16\",\"value\":52190},{\"name\":\"proto_dns\",\"type\":\"trace.ProtoDNS\",\"value\":{\"ID\":57212,\"QR\":1,\"opCode\":\"query\",\"AA\":0,\"TC\":0,\"RD\":1,\"RA\":1,\"Z\":0,\"responseCode\":\"no error\",\"QDCount\":1,\"ANCount\":2,\"NSCount\":0,\"ARCount\":1,\"questions\":[{\"name\":\"www.zip.net\",\"type\":\"A\",\"class\":\"IN\"}],\"answers\":[{\"name\":\"www.zip.net\",\"type\":\"CNAME\",\"class\":\"IN\",\"TTL\":300,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"amazonas.uol.com.br\",\"PTR\":\"\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"amazonas.uol.com.br\",\"type\":\"A\",\"class\":\"IN\",\"TTL\":60,\"IP\":\"200.147.100.53\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"}],\"authorities\":[],\"additionals\":[{\"name\":\"\",\"type\":\"OPT\",\"class\":\"Unknown\",\"TTL\":0,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"}]}}]}\n{\"timestamp\":1696255744420477145,\"threadStartTime\":1695658999333342370,\"processorId\":6,\"processId\":472,\"cgroupId\":2626,\"threadId\":472,\"parentProcessId\":1,\"hostProcessId\":472,\"hostThreadId\":472,\"hostParentProcessId\":1,\"userId\":976,\"mountNamespace\":4026532555,\"pidNamespace\":4026531836,\"processName\":\"systemd-resolve\",\"executable\":{\"path\":\"\"},\"hostName\":\"rugged\",\"containerId\":\"\",\"container\":{},\"kubernetes\":{},\"eventId\":\"2006\",\"eventName\":\"net_packet_dns\",\"matchedPolicies\":[\"\"],\"argsNum\":5,\"returnValue\":0,\"syscall\":\"\",\"stackAddresses\":[0],\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"threadEntityId\":131662446,\"processEntityId\":131662446,\"parentEntityId\":1975426032,\"args\":[{\"name\":\"src\",\"type\":\"const char*\",\"value\":\"8.8.8.8\"},{\"name\":\"dst\",\"type\":\"const char*\",\"value\":\"192.168.200.50\"},{\"name\":\"src_port\",\"type\":\"u16\",\"value\":53},{\"name\":\"dst_port\",\"type\":\"u16\",\"value\":56275},{\"name\":\"proto_dns\",\"type\":\"trace.ProtoDNS\",\"value\":{\"ID\":54436,\"QR\":1,\"opCode\":\"query\",\"AA\":0,\"TC\":0,\"RD\":1,\"RA\":1,\"Z\":0,\"responseCode\":\"no error\",\"QDCount\":1,\"ANCount\":0,\"NSCount\":1,\"ARCount\":1,\"questions\":[{\"name\":\"amazonas.uol.com.br\",\"type\":\"AAAA\",\"class\":\"IN\"}],\"answers\":[],\"authorities\":[{\"name\":\"uol.com.br\",\"type\":\"SOA\",\"class\":\"IN\",\"TTL\":518,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"\",\"TXTs\":null,\"SOA\":{\"MName\":\"a10-dns-uolcsfe1.host.intranet\",\"RName\":\"root.uol.com.br\",\"serial\":2016052887,\"refresh\":7200,\"retry\":3600,\"expire\":432000,\"minimum\":900},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"}],\"additionals\":[{\"name\":\"\",\"type\":\"OPT\",\"class\":\"Unknown\",\"TTL\":0,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"}]}}]}\n{\"timestamp\":1696255744441387358,\"threadStartTime\":1695658999333342370,\"processorId\":6,\"processId\":472,\"cgroupId\":2626,\"threadId\":472,\"parentProcessId\":1,\"hostProcessId\":472,\"hostThreadId\":472,\"hostParentProcessId\":1,\"userId\":976,\"mountNamespace\":4026532555,\"pidNamespace\":4026531836,\"processName\":\"systemd-resolve\",\"executable\":{\"path\":\"\"},\"hostName\":\"rugged\",\"containerId\":\"\",\"container\":{},\"kubernetes\":{},\"eventId\":\"2006\",\"eventName\":\"net_packet_dns\",\"matchedPolicies\":[\"\"],\"argsNum\":5,\"returnValue\":0,\"syscall\":\"\",\"stackAddresses\":[0],\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"threadEntityId\":131662446,\"processEntityId\":131662446,\"parentEntityId\":1975426032,\"args\":[{\"name\":\"src\",\"type\":\"const char*\",\"value\":\"8.8.8.8\"},{\"name\":\"dst\",\"type\":\"const char*\",\"value\":\"192.168.200.50\"},{\"name\":\"src_port\",\"type\":\"u16\",\"value\":53},{\"name\":\"dst_port\",\"type\":\"u16\",\"value\":33877},{\"name\":\"proto_dns\",\"type\":\"trace.ProtoDNS\",\"value\":{\"ID\":20551,\"QR\":1,\"opCode\":\"query\",\"AA\":0,\"TC\":0,\"RD\":1,\"RA\":1,\"Z\":0,\"responseCode\":\"no error\",\"QDCount\":1,\"ANCount\":48,\"NSCount\":0,\"ARCount\":1,\"questions\":[{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\"}],\"answers\":[{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"manualdaquimica.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"roteiroceara.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"roteirosincriveis.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"enem.club\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"brpaycard.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"200-147-100-53.static.uol.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minizinhachip.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minnisinhashipi.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minnisinhaship.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minnisinhachipi.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minizinhashipi.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minizinhaship.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minizinhachipi.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minisinhashipi.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minisinhaship.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minisinhachipi.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minisinhachip.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minnisinhashipi.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minnisinhaship.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minnisinhachipi.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minnisinhachip.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minizinhashipi.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minizinhaship.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minizinhachipi.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minisinhashipi.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minisinhaship.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minisinhachipi.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minisinhachip.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"www.minnisinhachip.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"minnisinhachip.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"somostodosum.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"poderjp.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"tvpanico.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"jptvweb.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"jptvdigital.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"jptvd.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"jovempantv.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"tvjovempan.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"panicotv.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"tvpanico.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"jptvweb.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"jptvdigital.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"jptvd.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"jp.tv.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"jovempantv.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"tvjovempan.com.br\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"meunegocio.uol\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"},{\"name\":\"53.100.147.200.in-addr.arpa\",\"type\":\"PTR\",\"class\":\"IN\",\"TTL\":16493,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"biologianet.com\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"}],\"authorities\":[],\"additionals\":[{\"name\":\"\",\"type\":\"OPT\",\"class\":\"Unknown\",\"TTL\":0,\"IP\":\"\",\"NS\":\"\",\"CNAME\":\"\",\"PTR\":\"\",\"TXTs\":null,\"SOA\":{\"MName\":\"\",\"RName\":\"\",\"serial\":0,\"refresh\":0,\"retry\":0,\"expire\":0,\"minimum\":0},\"SRV\":{\"priority\":0,\"weight\":0,\"port\":0,\"name\":\"\"},\"MX\":{\"preference\":0,\"name\":\"\"},\"OPT\":[],\"URI\":{\"priority\":0,\"weight\":0,\"target\":\"\"},\"TXT\":\"\"}]}}]}\n</code></pre>"},{"location":"docs/events/builtin/network-events/#network-based-signatures","title":"Network Based Signatures","text":"<p>It is possible to create Golang signatures for the network events. If you haven't read about how to create signatures, do it HERE.</p> <p>Examples</p> <p>Below is an example of how to create a signature for the <code>net_packet_dns</code> event. This same example is used by Tracee CI/CD tests and can be found at the GitHub repository, together with some other signatures for the network events.</p> <ol> <li>net_packet_dns signature example</li> </ol> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n\n    \"github.com/aquasecurity/tracee/types/detect\"\n    \"github.com/aquasecurity/tracee/types/protocol\"\n    \"github.com/aquasecurity/tracee/types/trace\"\n)\n\n//\n// HOWTO: The way to trigger this test signature is to execute:\n//\n//        nslookup -type=mx uol.com.br      and then\n//        nslookup -type=ns uol.com.br      and then\n//        nslookup -type=soa uol.com.br     and then\n//        nslookup -type=txt uol.com.br\n//\n//        This will cause it trigger once and reset it status.\n\ntype e2eDNS struct {\n    foundMX   bool\n    foundNS   bool\n    foundSOA  bool\n    foundTXTs bool\n    cb        detect.SignatureHandler\n}\n\nfunc (sig *e2eDNS) Init(cb detect.SignatureHandler) error {\n    sig.cb = cb\n    sig.foundMX = false   // proforma\n    sig.foundNS = false   // proforma\n    sig.foundSOA = false  // proforma\n    sig.foundTXTs = false // proforma\n    return nil\n}\n\nfunc (sig *e2eDNS) GetMetadata() (detect.SignatureMetadata, error) {\n    return detect.SignatureMetadata{\n        ID:          \"DNS\",\n        Version:     \"0.1.0\",\n        Name:        \"Network DNS Test\",\n        Description: \"Network E2E Tests: DNS\",\n        Tags:        []string{\"e2e\", \"network\"},\n    }, nil\n}\n\nfunc (sig *e2eDNS) GetSelectedEvents() ([]detect.SignatureEventSelector, error) {\n    return []detect.SignatureEventSelector{\n        {Source: \"tracee\", Name: \"net_packet_dns\"},\n    }, nil\n}\n\nfunc (sig *e2eDNS) OnEvent(event protocol.Event) error {\n    eventObj, ok := event.Payload.(trace.Event)\n    if !ok {\n        return errors.New(\"failed to cast event's payload\")\n    }\n\n    if eventObj.EventName == \"net_packet_dns\" {\n        dns, err := eventObj.GetProtoDNSByName(\"proto_dns\")\n        if err != nil {\n            return err\n        }\n\n        if len(dns.Answers) &gt; 0 {\n            for _, answer := range dns.Answers {\n                // check if MX works\n                if answer.MX.Name == \"mx.uol.com.br\" &amp;&amp; answer.MX.Preference == 10 {\n                    sig.foundMX = true\n                }\n                // check if NS works\n                if answer.NS == \"eliot.uol.com.br\" {\n                    sig.foundNS = true\n                }\n                // check if SOA works\n                if answer.SOA.RName == \"root.uol.com.br\" {\n                    sig.foundSOA = true\n                }\n                // check if TXTs works\n                if answer.TXTs != nil &amp;&amp; len(answer.TXTs) &gt; 0 {\n                    for _, txt := range answer.TXTs {\n                        if strings.Contains(txt, \"spf.uol.com.br\") {\n                            sig.foundTXTs = true\n                        }\n                    }\n                }\n            }\n        }\n\n        if !sig.foundMX || !sig.foundNS || !sig.foundSOA || !sig.foundTXTs {\n            return nil\n        }\n\n        if sig.foundMX &amp;&amp; sig.foundNS &amp;&amp; sig.foundSOA &amp;&amp; sig.foundTXTs { // reset signature state\n            sig.foundMX = false\n            sig.foundNS = false\n            sig.foundSOA = false\n            sig.foundTXTs = false\n        }\n\n        m, _ := sig.GetMetadata()\n\n        sig.cb(detect.Finding{\n            SigMetadata: m,\n            Event:       event,\n            Data:        map[string]interface{}{},\n        })\n    }\n\n    return nil\n}\n\nfunc (sig *e2eDNS) OnSignal(s detect.Signal) error {\n    return nil\n}\n\nfunc (sig *e2eDNS) Close() {}\n</code></pre>"},{"location":"docs/events/builtin/security-events/","title":"Security Events","text":""},{"location":"docs/events/builtin/security-events/#understanding-signatures-in-tracee","title":"Understanding Signatures in Tracee","text":"<p>In Tracee, a signature is a set of criteria designed to detect specific system activities based on events such as syscalls, network interactions, and LSM hook occurrences. When these foundational system events align with the conditions set by a signature, Tracee generates a corresponding \"security event.\" This process enables Tracee to actively monitor and report potential security concerns arising from observed system interactions.</p>"},{"location":"docs/events/builtin/security-events/#functionality-and-scope-of-signatures","title":"Functionality and Scope of Signatures","text":"<p>The signatures documented herein focus on key system operations. For instance, one signature identifies attempts to manipulate the syscall tables or the <code>/proc</code> filesystem, operations that are indicative of rootkit behaviors. Another detects the dynamic introduction of new executables into the system, flagging potential security issues. Upon a match, these signatures prompt Tracee to produce a security event, capturing the specifics of the underlying event and any associated implications.</p>"},{"location":"docs/events/builtin/security-events/#the-role-of-security-events-in-tracee","title":"The Role of Security Events in Tracee","text":"<p>Security events play a critical role in maintaining system integrity. They provide an analytical layer, translating raw events like syscalls into actionable insights about potential threats or anomalies. With the power of eBPF, Tracee efficiently monitors system activities in real-time, generating security events that equip users with the information they need to assess and respond to the state of their digital environments.</p>"},{"location":"docs/events/builtin/security-events/#be-prepared","title":"Be Prepared!","text":"<p>For optimal utilization of Tracee and effective response to potential threats, we strongly recommend readers to meticulously review each security event documentation page.</p> <p>A good understanding of what each signature detects will empower users to make informed decisions and take appropriate actions when a security event arises. Being well-versed in the nuances of each signature ensures that you're not just alerted to risks, but also equipped to address them effectively.</p>"},{"location":"docs/events/builtin/security-events/#list-of-default-security-events","title":"List of Default Security Events","text":"Name of Signature Description Anti-Debugging Technique Detects anti-debugging techniques. ASLR Inspection Detects ASLR inspections. Cgroups notify_on_release File Modification Monitors <code>notify_on_release</code> file changes in cgroups. Cgroups Release Agent File Modification Detects changes to the cgroup release_agent. Core Dumps Config File Modification Monitors core dump configuration alterations. Default Dynamic Loader Modification Tracks changes to the default binary loader. Container Device Mount Detects unauthorized container device mounts. Docker Socket Abuse Flags potential Docker socket misuse. Dropped Executables Detects runtime-dropped executables. Dynamic Code Loading Monitors dynamic code loading events. Fileless Execution Flags fileless execution techniques. Hidden Executable File Creation Detects creation of hidden executable files. Illegitimate Shell Flags unauthorized or unexpected shell executions. Kernel Module Loading Monitors kernel module load events. Kubernetes API Server Connection Detects connections to the Kubernetes API server. Kubernetes TLS Certificate Theft Flags potential theft of Kubernetes certificates. LD_PRELOAD Code Injection Monitors LD_PRELOAD injection attempts. File Operations Hooking on Proc Filesystem Detects hooks on file operations in /proc. Kcore Memory File Read Monitors reads of /proc/kcore. Process Memory Access Flags unauthorized /proc/mem access. Procfs Mem Code Injection Detects code injections via /proc/mem. Process VM Write Code Injection Monitors injections via process_vm_writev. Ptrace Code Injection Detects ptrace-facilitated code injections. RCD Modification Monitors changes to the remote control daemon. Sched Debug Reconnaissance Flags /proc/sched_debug reconnaissance. Scheduled Tasks Modification Tracks modifications to scheduled tasks. Process Standard Input/Output over Socket Detects IO redirection over sockets. Sudoers File Modification Monitors alterations to the sudoers file. Syscall Table Hooking Detects syscall table hook attempts. System Request Key Configuration Modification Monitors system request key configuration changes."},{"location":"docs/events/builtin/syscall-events/","title":"Syscalls","text":"<p>Tracee supports tracing all Linux system calls. Each system call is available as an event with the same name as the syscall. For example, to trace the <code>open</code> system call, use the <code>open</code> event name.</p> <p>The arguments of the system call are automatically captured as event data fields, with types properly mapped from kernel types to Go types (e.g., <code>const char*</code> becomes <code>string</code>).</p> <p>For detailed documentation about any specific system call, including its purpose, arguments, return values, and error conditions, please consult the standard Linux manual pages (man section 2). These can be accessed via:</p> <ul> <li><code>man 2 syscall_name</code> (e.g., <code>man 2 open</code>)</li> <li>Online at man7.org</li> </ul>"},{"location":"docs/events/builtin/syscall-events/#event-sets","title":"Event Sets","text":"<p>All syscall events automatically belong to the syscalls set. Many syscalls also belong to additional sets based on their functionality:</p> <ul> <li>fs: File system operations (e.g., open, read, write)</li> <li>net: Network operations (e.g., socket, connect, bind)</li> <li>proc: Process operations (e.g., fork, execve, exit)</li> <li>ipc: Inter-process communication (e.g., pipe, mmap)</li> <li>time: Time-related operations (e.g., clock_gettime)</li> <li>signals: Signal handling (e.g., kill, sigaction)</li> </ul>"},{"location":"docs/events/builtin/syscall-events/#examples","title":"Examples","text":"<p>Tracing specific syscalls: <pre><code># Trace file opens\ntracee -e open\n\n# Trace process creation\ntracee -e execve,fork,clone\n\n# Trace network connections\ntracee -e socket,connect,bind,accept\n</code></pre></p>"},{"location":"docs/events/builtin/syscall-events/#notes","title":"Notes","text":"<ul> <li>Event data fields use Go types (string, uint32, etc.)</li> <li>Some syscalls may have architecture-specific variants</li> <li>Some syscalls may be deprecated or not available on all systems</li> </ul>"},{"location":"docs/events/builtin/man/containers/container_create/","title":"TRACEE-CONTAINER-CREATE","text":""},{"location":"docs/events/builtin/man/containers/container_create/#name","title":"NAME","text":"<p>container_create - a new container is created</p>"},{"location":"docs/events/builtin/man/containers/container_create/#description","title":"DESCRIPTION","text":"<p>Triggered when a new container is created in the system. This derived event monitors container orchestration by tracking cgroup directory creation and examining metadata to identify new containers.</p> <p>The event leverages the <code>cgroup_mkdir</code> event and examines metadata within <code>cgroupfs</code> subdirectories to determine if a new directory corresponds to a freshly instantiated container, gathering detailed information about the container including runtime, image details, and pod data.</p> <p>This event is useful for:</p> <ul> <li>Security monitoring: Detecting unexpected or malicious container creation</li> <li>Compliance audits: Ensuring only approved container images are used</li> <li>Performance monitoring: Identifying resource-intensive containers</li> </ul>"},{"location":"docs/events/builtin/man/containers/container_create/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/containers/container_create/#data-fields","title":"DATA FIELDS","text":"<p>runtime (string) : The container runtime used (e.g., Docker, containerd)</p> <p>container_id (string) : The unique identifier for the container</p> <p>ctime (uint64) : Creation timestamp of the container</p> <p>container_image (string) : Image used to create the container</p> <p>container_image_digest (string) : Digest of the container image</p> <p>container_name (string) : Name of the container</p> <p>pod_name (string) : Name of the pod that this container belongs to (if applicable)</p> <p>pod_namespace (string) : Namespace of the pod</p> <p>pod_uid (string) : Unique identifier for the pod</p> <p>pod_sandbox (bool) : Indicates if the pod is acting as a sandbox</p>"},{"location":"docs/events/builtin/man/containers/container_create/#dependencies","title":"DEPENDENCIES","text":"<p>Source Events:</p> <ul> <li>cgroup_mkdir (required): Primary event from which container_create is derived</li> </ul> <p>Derivation Logic:</p> <p>The event is derived from <code>cgroup_mkdir</code> by checking if the cgroup event belongs to a container root directory being created, then using the <code>cgroup_id</code> from the directory inode to retrieve container-specific information.</p>"},{"location":"docs/events/builtin/man/containers/container_create/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Detect creation of unexpected or malicious containers</p> </li> <li> <p>Compliance auditing: Ensure only approved container images are used in production</p> </li> <li> <p>Performance monitoring: Identify newly created containers that may consume significant resources</p> </li> <li> <p>Container lifecycle tracking: Monitor container creation patterns and trends</p> </li> </ul>"},{"location":"docs/events/builtin/man/containers/container_create/#related-events","title":"RELATED EVENTS","text":"<ul> <li>cgroup_mkdir: Primary source event for container creation detection</li> <li>container_remove: Container deletion events</li> <li>existing_container: Events for already running containers</li> </ul>"},{"location":"docs/events/builtin/man/containers/container_remove/","title":"TRACEE-CONTAINER-REMOVE","text":""},{"location":"docs/events/builtin/man/containers/container_remove/#name","title":"NAME","text":"<p>container_remove - a container is terminated</p>"},{"location":"docs/events/builtin/man/containers/container_remove/#description","title":"DESCRIPTION","text":"<p>Triggered when an existing container is terminated. This derived event monitors container lifecycle by tracking cgroup directory removal and examining metadata to identify container termination events.</p> <p>The event leverages the <code>cgroup_rmdir</code> event and examines metadata within <code>cgroupfs</code> subdirectories to determine if a directory's removal correlates with a container's termination, capturing vital information about the terminated container.</p> <p>This event is useful for:</p> <ul> <li>Security monitoring: Scrutinize container terminations for potential security breaches</li> <li>Resource management: Monitor container terminations to manage and reclaim system resources</li> <li>System reliability: Track container terminations to ensure stable operations</li> </ul>"},{"location":"docs/events/builtin/man/containers/container_remove/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/containers/container_remove/#data-fields","title":"DATA FIELDS","text":"<p>runtime (string) : The container runtime used (e.g., Docker, containerd)</p> <p>container_id (string) : The unique identifier of the terminated container</p>"},{"location":"docs/events/builtin/man/containers/container_remove/#dependencies","title":"DEPENDENCIES","text":"<p>Source Events:</p> <ul> <li>cgroup_rmdir (required): Primary event from which container_remove is derived</li> </ul> <p>Derivation Logic:</p> <p>The event is derived from <code>cgroup_rmdir</code> by assessing whether the cgroup event pertains to the root directory of a terminating container, then using the <code>cgroup_id</code> from the directory inode to gather container-specific information.</p>"},{"location":"docs/events/builtin/man/containers/container_remove/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Detect unexpected or unauthorized container terminations</p> </li> <li> <p>Resource management: Track container cleanup and resource reclamation</p> </li> <li> <p>System reliability: Monitor container lifecycle for operational stability</p> </li> <li> <p>Compliance auditing: Ensure proper container termination procedures</p> </li> <li> <p>Incident response: Investigate container termination patterns</p> </li> </ul>"},{"location":"docs/events/builtin/man/containers/container_remove/#related-events","title":"RELATED EVENTS","text":"<ul> <li>cgroup_rmdir: Primary source event for container termination detection</li> <li>container_create: Container creation events</li> <li>existing_container: Events for already running containers</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bpf_prog/","title":"TRACEE-SECURITY-BPF-PROG","text":""},{"location":"docs/events/builtin/man/lsm/security_bpf_prog/#name","title":"NAME","text":"<p>security_bpf_prog - security check for BPF program file descriptor generation</p>"},{"location":"docs/events/builtin/man/lsm/security_bpf_prog/#description","title":"DESCRIPTION","text":"<p>Triggered when the kernel performs a security check before generating and returning a file descriptor for a BPF program. This LSM (Linux Security Module) hook event occurs during BPF program loading or when explicitly requested by a user.</p> <p>The event provides detailed information about the BPF program, including its type, name, helper functions used, and loading status. This visibility is crucial for monitoring BPF program usage and ensuring security policies are enforced.</p> <p>This event is useful for:</p> <ul> <li>BPF monitoring: Track BPF program loading and usage</li> <li>Security auditing: Monitor BPF program permissions and capabilities</li> <li>Helper function analysis: Track which BPF helpers are being used</li> <li>Program identification: Monitor BPF program types and names</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bpf_prog/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/lsm/security_bpf_prog/#data-fields","title":"DATA FIELDS","text":"<p>type (int32) : The BPF program type</p> <p>name (string) : The BPF program name (first 16 bytes only, as stored in kernel)</p> <p>helpers ([]uint64) : List of all BPF helper functions used by the program</p> <p>id (uint32) : The BPF program ID assigned by the kernel</p> <p>load (bool) : Whether this BPF program is currently being loaded</p>"},{"location":"docs/events/builtin/man/lsm/security_bpf_prog/#dependencies","title":"DEPENDENCIES","text":"<p>Kernel Probes:</p> <ul> <li>security_bpf_prog (kprobe, required): LSM hook for BPF program file descriptor generation</li> <li>bpf_check (kprobe, required): Track BPF program loading status</li> <li>check_helper_call (kprobe, required): Monitor BPF helper function usage</li> <li>check_map_func_compatibility (kprobe, required): Additional BPF helper function monitoring</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bpf_prog/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Track BPF program loading and permissions</p> </li> <li> <p>Helper function auditing: Monitor which BPF helpers are being used</p> </li> <li> <p>Program identification: Track BPF program types and names</p> </li> <li> <p>Load monitoring: Detect when new BPF programs are being loaded</p> </li> <li> <p>Resource tracking: Monitor BPF program resource allocation</p> </li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bpf_prog/#bpf-program-types","title":"BPF PROGRAM TYPES","text":"<p>Common BPF program types that can be monitored:</p> <ul> <li>Socket filters: Network packet filtering</li> <li>Kprobes: Kernel function tracing</li> <li>Tracepoints: Kernel tracepoint monitoring</li> <li>XDP: Network packet processing</li> <li>Cgroup: Control group operations</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bpf_prog/#helper-functions","title":"HELPER FUNCTIONS","text":"<p>The event tracks BPF helper function usage:</p> <ul> <li>Map operations: Map access and manipulation</li> <li>Network helpers: Packet and socket operations</li> <li>Tracing helpers: Event and context information</li> <li>Time helpers: Timestamp and timing operations</li> <li>Security helpers: LSM and capability checks</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bpf_prog/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Important security considerations:</p> <ul> <li>Privilege escalation: BPF programs can access sensitive kernel functionality</li> <li>Resource consumption: BPF programs can impact system performance</li> <li>Helper restrictions: Different program types have different helper access</li> <li>Verification: Programs must pass kernel verifier checks</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bpf_prog/#related-events","title":"RELATED EVENTS","text":"<ul> <li>bpf_attach: BPF program attachment events</li> <li>security_bpf: General BPF security events</li> <li>bpf_map_create: BPF map creation events</li> <li>bpf_prog_load: BPF program loading events</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bprm_check/","title":"TRACEE-SECURITY-BPRM-CHECK","text":""},{"location":"docs/events/builtin/man/lsm/security_bprm_check/#name","title":"NAME","text":"<p>security_bprm_check - verify permissions prior to binary handler search</p>"},{"location":"docs/events/builtin/man/lsm/security_bprm_check/#description","title":"DESCRIPTION","text":"<p>Triggered during the execution of a binary via execve or execveat, just before the kernel begins searching for the specific binary handler. This LSM (Linux Security Module) hook event occurs at a critical point where new process attributes are being set but the context is still that of the pre-execution process.</p> <p>This event is particularly valuable when the pre-execution context is significant, as it provides resolved path and binary details. While it offers less comprehensive information than sched_process_exec, it captures the execution state at a unique point in the process lifecycle.</p> <p>This event is useful for:</p> <ul> <li>Permission verification: Monitor execution permission checks</li> <li>Binary execution tracking: Track program execution with resolved paths</li> <li>Pre-execution analysis: Examine process state before context change</li> <li>Security monitoring: Verify execution permissions and context</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bprm_check/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/lsm/security_bprm_check/#data-fields","title":"DATA FIELDS","text":"<p>pathname (string) : The resolved path of the file being executed</p> <p>dev (uint32) : The device identifier of the executed file</p> <p>inode (uint64) : The inode number of the executed file</p> <p>argv ([]string) : The arguments provided during execution</p> <p>envp ([]string) : The environment variables passed during execution (optional, filled only if requested)</p>"},{"location":"docs/events/builtin/man/lsm/security_bprm_check/#dependencies","title":"DEPENDENCIES","text":"<p>LSM Hook:</p> <ul> <li>security_bprm_check (required): LSM hook for execution phase before context change</li> </ul> <p>Tracepoint:</p> <ul> <li>sys_enter (required): Used to capture argv from syscall arguments</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bprm_check/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Verify execution permissions and context</p> </li> <li> <p>Binary tracking: Monitor program execution with resolved paths</p> </li> <li> <p>Context analysis: Examine process state before execution</p> </li> <li> <p>Permission auditing: Track execution permission checks</p> </li> <li> <p>Environment monitoring: Analyze execution context and variables</p> </li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bprm_check/#execution-context","title":"EXECUTION CONTEXT","text":"<p>The event captures the execution state at a unique point:</p> <ul> <li>Pre-handler search: Before binary format handler selection</li> <li>Pre-context change: Original process context still available</li> <li>Post-path resolution: Full path information available</li> <li>Pre-execution: Before actual program loading</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bprm_check/#security-considerations","title":"SECURITY CONSIDERATIONS","text":"<p>Important security aspects to monitor:</p> <ul> <li>Permission verification: Check execution permissions</li> <li>Path resolution: Track resolved binary paths</li> <li>Environment inspection: Monitor execution context</li> <li>Argument validation: Check execution parameters</li> <li>TOCTOU concerns: Be aware of potential race conditions</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bprm_check/#limitations","title":"LIMITATIONS","text":"<ul> <li>TOCTOU: Arguments and environment subject to race conditions</li> <li>Partial information: Less comprehensive than sched_process_exec</li> <li>Optional data: Environment variables only if configured</li> <li>Pre-execution only: No information about actual execution success</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_bprm_check/#related-events","title":"RELATED EVENTS","text":"<ul> <li>sched_process_exec: Process execution after context change</li> <li>execve: System call for executing programs</li> <li>execveat: Extended program execution system call</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/","title":"TRACEE-SECURITY-FILE-MPROTECT","text":""},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/#name","title":"NAME","text":"<p>security_file_mprotect - memory protection change security check</p>"},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/#description","title":"DESCRIPTION","text":"<p>Triggered when there is an attempt to change the access protection of a memory region through the Linux Security Module (LSM) hook. This event occurs during permissions checks for operations like <code>mprotect</code> or <code>pkey_mprotect</code> system calls, capturing attempts to modify memory access permissions.</p> <p>Memory protection changes are critical security events as they can indicate code injection, exploitation attempts, or legitimate application behavior like JIT compilation. The event provides detailed information about the memory addresses, protection changes, and associated files.</p> <p>This event is useful for:</p> <ul> <li>Exploit detection: Identify code injection and ROP/JOP attack preparations</li> <li>JIT monitoring: Track just-in-time compilation memory operations</li> <li>Security analysis: Monitor memory protection modifications for malicious patterns</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/#event-sets","title":"EVENT SETS","text":"<p>lsm_hooks</p>"},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/#data-fields","title":"DATA FIELDS","text":"<p>pathname (string) : The path of the file associated with the memory region (if file-backed)</p> <p>prot (int32) : The new access protection for the memory region (parsed to string if parse-arguments enabled)</p> <p>ctime (uint64) : The creation time of the file associated with the memory region</p> <p>prev_prot (int32) : The previous access protection for the memory region (parsed to string if parse-arguments enabled)</p> <p>addr (trace.Pointer) : The start of virtual memory address where protection change is requested</p> <p>len (uint64) : The length of the memory region to apply the new protection</p> <p>pkey (int32, optional) : The protection key used for the operation (only available for <code>pkey_mprotect</code> syscall)</p>"},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>mprotect</code></li> <li><code>pkey_mprotect</code></li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Exploit detection: Identify attempts to make data pages executable for code injection</p> </li> <li> <p>JIT compilation monitoring: Track legitimate just-in-time compilation activities</p> </li> <li> <p>Memory forensics: Analyze memory protection patterns during incident investigation</p> </li> <li> <p>Security auditing: Monitor applications making unusual memory protection changes</p> </li> <li> <p>Malware analysis: Identify malware attempting to modify memory protections</p> </li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/#memory-protection-flags","title":"MEMORY PROTECTION FLAGS","text":"<p>Common protection flags (prot values):</p> <ul> <li>PROT_NONE (0): No access permissions</li> <li>PROT_READ (1): Read access</li> <li>PROT_WRITE (2): Write access</li> <li>PROT_EXEC (4): Execute access</li> <li>Combinations: PROT_READ|PROT_WRITE (3), PROT_READ|PROT_EXEC (5), etc.</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/#suspicious-patterns","title":"SUSPICIOUS PATTERNS","text":"<p>Monitor for potentially malicious protection changes:</p> <ul> <li>Making data executable: Changing non-executable pages to executable (W\u2192X, RW\u2192RX)</li> <li>Removing write protection: Making code pages writable for modification</li> <li>Anonymous memory execution: Making heap/stack regions executable</li> <li>Large memory operations: Protecting unusually large memory regions</li> <li>Frequent changes: Rapid succession of protection modifications</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/#legitimate-use-cases","title":"LEGITIMATE USE CASES","text":"<p>Common legitimate scenarios:</p> <ul> <li>JIT compilers: Java, .NET, JavaScript engines modifying code pages</li> <li>Dynamic loaders: Runtime library loading and symbol resolution</li> <li>Garbage collectors: Memory management in managed languages</li> <li>Code generation: Template engines and runtime code generation</li> <li>Self-modifying code: Some legitimate applications and libraries</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/#memory-regions","title":"MEMORY REGIONS","text":"<p>Different memory region types:</p> <ul> <li>File-backed mappings: Memory mapped from files (pathname provided)</li> <li>Anonymous mappings: Heap, stack, or anonymous memory (no pathname)</li> <li>Shared mappings: Memory shared between processes</li> <li>Private mappings: Process-private memory regions</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/#exploitation-techniques","title":"EXPLOITATION TECHNIQUES","text":"<p>Memory protection changes in attacks:</p> <ul> <li>Code injection: Making injected shellcode executable</li> <li>Return-oriented programming: Preparing ROP/JOP gadget execution</li> <li>Process hollowing: Modifying legitimate process memory</li> <li>DLL injection: Preparing injected libraries for execution</li> <li>Heap spraying: Preparing heap memory for exploitation</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Memory protection changes can enable:</p> <ul> <li>Arbitrary code execution: Making data regions executable</li> <li>Defense evasion: Bypassing DEP/NX bit protections</li> <li>Control flow hijacking: Preparing memory for malicious code</li> <li>Information disclosure: Modifying protections to read sensitive data</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_file_mprotect/#related-events","title":"RELATED EVENTS","text":"<ul> <li>mprotect: The underlying system call for memory protection changes</li> <li>pkey_mprotect: Protection key-based memory protection system call</li> <li>mem_prot_alert: Custom signature for suspicious protection changes</li> <li>vma_modification: Virtual memory area modification events</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_inode_unlink/","title":"TRACEE-SECURITY-INODE-UNLINK","text":""},{"location":"docs/events/builtin/man/lsm/security_inode_unlink/#name","title":"NAME","text":"<p>security_inode_unlink - security check before unlinking an inode</p>"},{"location":"docs/events/builtin/man/lsm/security_inode_unlink/#description","title":"DESCRIPTION","text":"<p>Triggered when an inode is about to be unlinked, representing file or directory deletion operations. This LSM (Linux Security Module) hook event captures detailed information about the inode being unlinked, including its path, filesystem metadata, and timing information.</p> <p>The event provides critical visibility into file deletion operations, which is essential for security monitoring, system auditing, and tracking changes to sensitive files or directories. It captures the state of the file or directory before it is removed from the filesystem.</p> <p>This event is useful for:</p> <ul> <li>File deletion monitoring: Track removal of files and directories</li> <li>Security auditing: Monitor deletion of sensitive files</li> <li>System integrity: Detect unauthorized file removal operations</li> <li>Compliance monitoring: Track file deletions for audit requirements</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_inode_unlink/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/lsm/security_inode_unlink/#data-fields","title":"DATA FIELDS","text":"<p>pathname (string) : The path to the file or directory being unlinked</p> <p>inode (uint64) : Inode number of the file or directory</p> <p>dev (uint32) : Device number associated with the inode</p> <p>ctime (uint64) : Creation time of the file or directory</p>"},{"location":"docs/events/builtin/man/lsm/security_inode_unlink/#dependencies","title":"DEPENDENCIES","text":"<p>LSM Hook:</p> <ul> <li>security_inode_unlink (required): LSM hook for inode unlink operations</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_inode_unlink/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Track deletion of sensitive files and directories</p> </li> <li> <p>Audit compliance: Monitor file removal for regulatory compliance</p> </li> <li> <p>Incident response: Investigate unauthorized file deletion activities</p> </li> <li> <p>System integrity: Detect tampering with critical system files</p> </li> <li> <p>Forensic analysis: Track file deletion patterns during investigations</p> </li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_inode_unlink/#performance-considerations","title":"PERFORMANCE CONSIDERATIONS","text":"<p>The event captures details on each unlinked inode, which may introduce overhead:</p> <ul> <li>High-frequency operations: Impact in environments with frequent file creation/deletion</li> <li>Directory monitoring: Additional overhead when monitoring large directories</li> <li>Cache pressure: Potential memory pressure from tracking many operations</li> <li>System load: Consider monitoring scope in high-throughput environments</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_inode_unlink/#filesystem-operations","title":"FILESYSTEM OPERATIONS","text":"<p>The event captures various unlink scenarios:</p> <ul> <li>File deletion: Regular file removal operations</li> <li>Directory removal: Empty directory deletion</li> <li>Hard link removal: Unlinking one of multiple hard links</li> <li>Temporary file cleanup: Removal of temporary files</li> <li>Application uninstallation: Bulk file removal operations</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_inode_unlink/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Critical security aspects to monitor:</p> <ul> <li>Sensitive file deletion: Unauthorized removal of important files</li> <li>System file tampering: Modification of critical system files</li> <li>Malware cleanup: Detection of malware self-removal</li> <li>Data destruction: Monitoring for mass file deletion events</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_inode_unlink/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_inode_mknod: Inode creation events</li> <li>security_inode_symlink: Symbolic link creation events</li> <li>security_inode_rename: File/directory rename operations</li> <li>unlink: Unlink system call events</li> <li>unlinkat: Unlink-at system call events</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_path_notify/","title":"TRACEE-SECURITY-PATH-NOTIFY","text":""},{"location":"docs/events/builtin/man/lsm/security_path_notify/#name","title":"NAME","text":"<p>security_path_notify - security check for filesystem notification registration</p>"},{"location":"docs/events/builtin/man/lsm/security_path_notify/#description","title":"DESCRIPTION","text":"<p>Triggered when a process attempts to register a filesystem notification through any of the filesystem notification APIs (dnotify, inotify, or fanotify). This LSM (Linux Security Module) hook event captures the security check performed when setting up filesystem watches.</p> <p>The event provides detailed information about the filesystem object being watched and the types of events being monitored. This is particularly important for security monitoring as filesystem notifications can be used for both legitimate monitoring and potential malicious activities.</p> <p>This event is useful for:</p> <ul> <li>Filesystem monitoring: Track who's watching filesystem changes</li> <li>Security auditing: Monitor filesystem notification setup</li> <li>Access control: Verify notification registration permissions</li> <li>Behavior analysis: Understand application monitoring patterns</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_path_notify/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/lsm/security_path_notify/#data-fields","title":"DATA FIELDS","text":"<p>pathname (string) : Filesystem path for which the watch is being registered</p> <p>inode (uint64) : Inode number of the filesystem object</p> <p>dev (uint32) : Device identifier of the filesystem object</p> <p>mask (uint64) : Mask representing the filesystem events to monitor</p> <p>obj_type (uint32) : The type of filesystem object to be watched</p>"},{"location":"docs/events/builtin/man/lsm/security_path_notify/#dependencies","title":"DEPENDENCIES","text":"<p>LSM Hook:</p> <ul> <li>security_path_notify (required): LSM hook for filesystem notification security checks</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_path_notify/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Track filesystem watch registration attempts</p> </li> <li> <p>Access control: Verify notification registration permissions</p> </li> <li> <p>Behavior analysis: Understand application monitoring patterns</p> </li> <li> <p>Audit compliance: Track filesystem monitoring activities</p> </li> <li> <p>Threat detection: Identify suspicious monitoring behavior</p> </li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_path_notify/#notification-apis","title":"NOTIFICATION APIS","text":"<p>The event captures notifications from multiple APIs:</p> <ul> <li>dnotify: Directory notification (legacy)</li> <li>inotify: File and directory monitoring</li> <li>fanotify: Advanced filesystem monitoring and access control</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_path_notify/#watch-masks","title":"WATCH MASKS","text":"<p>Common notification mask combinations:</p> <ul> <li>IN_ACCESS: File access</li> <li>IN_MODIFY: File modification</li> <li>IN_ATTRIB: Metadata changes</li> <li>IN_CLOSE: File close operations</li> <li>IN_OPEN: File open operations</li> <li>IN_MOVED: File move operations</li> <li>IN_CREATE: File/directory creation</li> <li>IN_DELETE: File/directory deletion</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_path_notify/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Important security considerations:</p> <ul> <li>Information disclosure: Monitoring sensitive files</li> <li>Resource exhaustion: Excessive watch registrations</li> <li>Privilege escalation: Unauthorized monitoring</li> <li>Side-channel attacks: Information leakage through notifications</li> <li>Denial of service: Watch limit exhaustion</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_path_notify/#performance-considerations","title":"PERFORMANCE CONSIDERATIONS","text":"<p>Watch registration impact:</p> <ul> <li>Watch limits: System-wide and per-process limits</li> <li>Memory usage: Each watch consumes kernel resources</li> <li>Notification overhead: Event generation and delivery cost</li> <li>Filesystem impact: Additional metadata tracking</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_path_notify/#related-events","title":"RELATED EVENTS","text":"<ul> <li>inotify_add_watch: inotify watch registration</li> <li>fanotify_mark: fanotify mark operations</li> <li>security_file_open: File open security events</li> <li>security_inode_unlink: File deletion security events</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_mount/","title":"TRACEE-SECURITY-SB-MOUNT","text":""},{"location":"docs/events/builtin/man/lsm/security_sb_mount/#name","title":"NAME","text":"<p>security_sb_mount - security check for filesystem mount operations</p>"},{"location":"docs/events/builtin/man/lsm/security_sb_mount/#description","title":"DESCRIPTION","text":"<p>Triggered when a filesystem mount operation is attempted in the system. This LSM (Linux Security Module) hook event captures the security check performed before a filesystem is mounted, providing critical visibility into storage operations and system configuration changes.</p> <p>The event provides detailed information about the mount operation, including the device being mounted, mount point, filesystem type, and mount flags. This visibility is crucial for both system administration and security monitoring, as unexpected mount operations could indicate security breaches or misconfigurations.</p> <p>This event is useful for:</p> <ul> <li>Mount monitoring: Track filesystem mount operations</li> <li>Security auditing: Detect unauthorized mount attempts</li> <li>System configuration: Monitor storage setup changes</li> <li>Compliance verification: Track storage access patterns</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_mount/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/lsm/security_sb_mount/#data-fields","title":"DATA FIELDS","text":"<p>dev_name (string) : The name of the device being mounted</p> <p>path (string) : The destination path where the device will be mounted</p> <p>type (string) : The filesystem type being mounted (e.g., ext4, nfs)</p> <p>flags (uint32) : Mount flags that specify mount options and behavior</p>"},{"location":"docs/events/builtin/man/lsm/security_sb_mount/#dependencies","title":"DEPENDENCIES","text":"<p>LSM Hook:</p> <ul> <li>security_sb_mount (required): LSM hook for filesystem mount security checks</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_mount/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Detect unauthorized mount operations</p> </li> <li> <p>System administration: Track filesystem mount activities</p> </li> <li> <p>Configuration auditing: Verify storage setup changes</p> </li> <li> <p>Compliance monitoring: Ensure proper storage access controls</p> </li> <li> <p>Threat detection: Identify suspicious mount operations</p> </li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_mount/#mount-flags","title":"MOUNT FLAGS","text":"<p>Common mount flags to monitor:</p> <ul> <li>MS_RDONLY: Read-only mount</li> <li>MS_NOSUID: Ignore suid and sgid bits</li> <li>MS_NODEV: Prevent device-file access</li> <li>MS_NOEXEC: Prevent program execution</li> <li>MS_SYNCHRONOUS: Synchronous updates</li> <li>MS_REMOUNT: Remount existing mount</li> <li>MS_BIND: Bind mount</li> <li>MS_SHARED: Shared subtree</li> <li>MS_PRIVATE: Private subtree</li> <li>MS_SLAVE: Slave subtree</li> <li>MS_UNBINDABLE: Unbindable mount</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_mount/#filesystem-types","title":"FILESYSTEM TYPES","text":"<p>Common filesystem types to monitor:</p> <ul> <li>Local filesystems: ext4, xfs, btrfs</li> <li>Network filesystems: nfs, cifs, smbfs</li> <li>Special filesystems: tmpfs, devfs, procfs</li> <li>Container filesystems: overlayfs, aufs</li> <li>Encrypted filesystems: ecryptfs, encfs</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_mount/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Critical security aspects to monitor:</p> <ul> <li>Privilege escalation: Through suid/dev files</li> <li>Data exposure: Through unexpected mounts</li> <li>Container escapes: Through host filesystem access</li> <li>Persistence: Through autostart locations</li> <li>Resource abuse: Through large filesystems</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_mount/#related-events","title":"RELATED EVENTS","text":"<ul> <li>mount: Mount system call events</li> <li>umount: Unmount system call events</li> <li>security_sb_umount: Filesystem unmount security events</li> <li>security_sb_remount: Filesystem remount security events</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_umount/","title":"TRACEE-SECURITY-SB-UMOUNT","text":""},{"location":"docs/events/builtin/man/lsm/security_sb_umount/#name","title":"NAME","text":"<p>security_sb_umount - security check for filesystem unmount operations</p>"},{"location":"docs/events/builtin/man/lsm/security_sb_umount/#description","title":"DESCRIPTION","text":"<p>Triggered when a filesystem unmount operation is attempted in the system. This LSM (Linux Security Module) hook event captures the security check performed before a filesystem is unmounted, providing critical visibility into storage operations and system configuration changes.</p> <p>The event provides detailed information about the unmount operation, including the device being unmounted, mount point, filesystem type, and unmount flags. This visibility is crucial for both system administration and security monitoring, as unexpected unmount operations could indicate security breaches or system instability.</p> <p>This event is useful for:</p> <ul> <li>Unmount monitoring: Track filesystem unmount operations</li> <li>Security auditing: Detect unauthorized unmount attempts</li> <li>System stability: Monitor storage configuration changes</li> <li>Resource management: Track storage availability</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_umount/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/lsm/security_sb_umount/#data-fields","title":"DATA FIELDS","text":"<p>dev_name (string) : The name of the device being unmounted</p> <p>path (string) : The filesystem path being unmounted</p> <p>type (string) : The filesystem type being unmounted (e.g., ext4, nfs)</p> <p>flags (uint32) : Unmount flags that specify unmount behavior</p>"},{"location":"docs/events/builtin/man/lsm/security_sb_umount/#dependencies","title":"DEPENDENCIES","text":"<p>LSM Hook:</p> <ul> <li>security_sb_umount (required): LSM hook for filesystem unmount security checks</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_umount/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Detect unauthorized unmount operations</p> </li> <li> <p>System administration: Track filesystem unmount activities</p> </li> <li> <p>Stability monitoring: Verify proper storage detachment</p> </li> <li> <p>Resource tracking: Monitor storage availability changes</p> </li> <li> <p>Threat detection: Identify suspicious unmount operations</p> </li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_umount/#unmount-flags","title":"UNMOUNT FLAGS","text":"<p>Common unmount flags to monitor:</p> <ul> <li>MNT_FORCE: Force unmount even if busy</li> <li>MNT_DETACH: Perform lazy unmount</li> <li>MNT_EXPIRE: Mark for expiry</li> <li>UMOUNT_NOFOLLOW: Don't follow symlinks</li> <li>MNT_EXCL: Only unmount if not shared</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_umount/#filesystem-types","title":"FILESYSTEM TYPES","text":"<p>Common filesystem types affected:</p> <ul> <li>Local filesystems: ext4, xfs, btrfs</li> <li>Network filesystems: nfs, cifs, smbfs</li> <li>Special filesystems: tmpfs, devfs, procfs</li> <li>Container filesystems: overlayfs, aufs</li> <li>Encrypted filesystems: ecryptfs, encfs</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_umount/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Critical security aspects to monitor:</p> <ul> <li>Data loss: Through forced unmounts</li> <li>Service disruption: Through unexpected unmounts</li> <li>Resource denial: Through malicious unmounts</li> <li>System instability: Through improper unmounts</li> <li>Container isolation: Through shared mount unmounts</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_sb_umount/#related-events","title":"RELATED EVENTS","text":"<ul> <li>umount: Unmount system call events</li> <li>umount2: Extended unmount system call events</li> <li>security_sb_mount: Filesystem mount security events</li> <li>security_sb_remount: Filesystem remount security events</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_settime64/","title":"TRACEE-SECURITY-SETTIME64","text":""},{"location":"docs/events/builtin/man/lsm/security_settime64/#name","title":"NAME","text":"<p>security_settime64 - security check for system time modification</p>"},{"location":"docs/events/builtin/man/lsm/security_settime64/#description","title":"DESCRIPTION","text":"<p>Triggered when a process attempts to modify the system time. This LSM (Linux Security Module) hook event captures the security check performed before the system time is changed, providing visibility into time-related system modifications.</p> <p>The event provides detailed information about the requested time change, including both seconds and nanoseconds components, as well as timezone adjustments. This visibility is crucial for security monitoring as system time modifications can affect logging, authentication, and other time-dependent security mechanisms.</p> <p>This event is useful for:</p> <ul> <li>Time change monitoring: Track system time modifications</li> <li>Security auditing: Detect unauthorized time changes</li> <li>Compliance verification: Monitor time synchronization</li> <li>System integrity: Track time-based security controls</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_settime64/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/lsm/security_settime64/#data-fields","title":"DATA FIELDS","text":"<p>tv_sec (uint64) : The time in seconds</p> <p>tv_nsec (uint64) : The time in nanoseconds</p> <p>tz_minuteswest (int32) : Minutes west of Greenwich</p> <p>tz_dsttime (int32) : Type of DST correction</p>"},{"location":"docs/events/builtin/man/lsm/security_settime64/#dependencies","title":"DEPENDENCIES","text":"<p>LSM Hook:</p> <ul> <li>security_settime64 (required): LSM hook for system time modification security checks</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_settime64/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Detect unauthorized time changes</p> </li> <li> <p>Compliance auditing: Track time synchronization events</p> </li> <li> <p>System integrity: Monitor time-based security controls</p> </li> <li> <p>Forensic analysis: Track time manipulation attempts</p> </li> <li> <p>Configuration monitoring: Verify time and timezone settings</p> </li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_settime64/#time-components","title":"TIME COMPONENTS","text":"<p>The event captures multiple time aspects:</p> <ul> <li>Seconds: Unix timestamp in seconds</li> <li>Nanoseconds: Sub-second precision</li> <li>Timezone offset: Minutes west of GMT</li> <li>DST settings: Daylight saving time configuration</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_settime64/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Critical security aspects to monitor:</p> <ul> <li>Log manipulation: Through time rollbacks</li> <li>Certificate validation: Through time advancement</li> <li>Authentication bypass: Through time-based token manipulation</li> <li>Audit trail integrity: Through time desynchronization</li> <li>Service disruption: Through time jumps</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_settime64/#timezone-considerations","title":"TIMEZONE CONSIDERATIONS","text":"<p>Important timezone aspects:</p> <ul> <li>UTC offset: Minutes west of Greenwich</li> <li>DST handling: Daylight saving time transitions</li> <li>Time zones: Geographic time zone changes</li> <li>Local time: System local time settings</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_settime64/#related-events","title":"RELATED EVENTS","text":"<ul> <li>settimeofday: System call for setting time</li> <li>clock_settime: Clock setting system call</li> <li>adjtimex: Time adjustment system call</li> <li>ntp_adjtime: NTP time adjustment events</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_accept/","title":"TRACEE-SECURITY-SOCKET-ACCEPT","text":""},{"location":"docs/events/builtin/man/lsm/security_socket_accept/#name","title":"NAME","text":"<p>security_socket_accept - security check for socket accept operations</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_accept/#description","title":"DESCRIPTION","text":"<p>Triggered when a socket attempts to accept an incoming connection. This LSM (Linux Security Module) hook event captures the security check performed before a connection is accepted, providing visibility into network connection establishment.</p> <p>The event provides information about the accepting socket and the local address details of the accepted connection. This visibility is crucial for security monitoring and network behavior analysis, as it helps identify potential threats or irregular connection patterns.</p> <p>This event is useful for:</p> <ul> <li>Connection monitoring: Track incoming connection acceptances</li> <li>Security auditing: Monitor network service activity</li> <li>Access control: Verify connection acceptance permissions</li> <li>Service analysis: Understand network service behavior</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_accept/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_accept/#data-fields","title":"DATA FIELDS","text":"<p>sockfd (int32) : The file descriptor of the socket accepting the connection</p> <p>local_addr (trace.SockAddr) : Structure containing the local address details of the accepted connection</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_accept/#dependencies","title":"DEPENDENCIES","text":"<p>LSM Hook:</p> <ul> <li>security_socket_accept (required): LSM hook for socket accept security checks</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_accept/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Track incoming connection patterns</p> </li> <li> <p>Service auditing: Monitor network service activity</p> </li> <li> <p>Access control: Verify connection acceptance permissions</p> </li> <li> <p>Network diagnostics: Troubleshoot connection issues</p> </li> <li> <p>Behavior analysis: Understand service connection patterns</p> </li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_accept/#connection-states","title":"CONNECTION STATES","text":"<p>Important connection acceptance states:</p> <ul> <li>Pre-acceptance: Initial security check phase</li> <li>Acceptance: Connection establishment</li> <li>Post-acceptance: New socket creation</li> <li>Error states: Failed acceptance scenarios</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_accept/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Critical security aspects to monitor:</p> <ul> <li>Unauthorized access: Unexpected connection attempts</li> <li>Service abuse: Connection flooding or DoS attempts</li> <li>Protocol violations: Invalid connection patterns</li> <li>Resource exhaustion: Connection queue flooding</li> <li>Access control bypass: Unauthorized service access</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_accept/#performance-considerations","title":"PERFORMANCE CONSIDERATIONS","text":"<p>Connection acceptance impact:</p> <ul> <li>Backlog management: Connection queue handling</li> <li>Resource allocation: Socket descriptor usage</li> <li>Processing overhead: Security check costs</li> <li>Queue limits: Maximum pending connections</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_accept/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_socket_create: Socket creation security events</li> <li>security_socket_listen: Socket listen security events</li> <li>security_socket_connect: Socket connect security events</li> <li>security_socket_bind: Socket bind security events</li> <li>security_socket_setsockopt: Socket option security events</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_bind/","title":"TRACEE-SECURITY-SOCKET-BIND","text":""},{"location":"docs/events/builtin/man/lsm/security_socket_bind/#name","title":"NAME","text":"<p>security_socket_bind - socket bind operation security check</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_bind/#description","title":"DESCRIPTION","text":"<p>Triggered when a socket is bound to a local address and port through the Linux Security Module (LSM) hook. This event captures socket binding operations, which are crucial for setting up servers, defining source addresses for outgoing connections, and establishing network services.</p> <p>Socket binding is a fundamental networking operation where applications specify which local address and port they want to use for network communication. Monitoring these operations provides visibility into service initialization and network configuration changes.</p> <p>This event is useful for:</p> <ul> <li>Service monitoring: Track server and service initialization</li> <li>Network security: Monitor unexpected port bindings and service exposure</li> <li>Configuration auditing: Verify intended network service configurations</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_bind/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_bind/#data-fields","title":"DATA FIELDS","text":"<p>sockfd (int32) : The file descriptor referring to the socket being bound</p> <p>local_addr (trace.SockAddr) : The local address structure containing the address and port details for the binding operation</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_bind/#dependencies","title":"DEPENDENCIES","text":"<p>LSM Hook:</p> <ul> <li>security_socket_bind (required): LSM hook for socket bind security checks</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_bind/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Service monitoring: Track when network services are started or reconfigured</p> </li> <li> <p>Security auditing: Detect unauthorized service bindings or port usage</p> </li> <li> <p>Network configuration: Monitor network service setup and port allocation</p> </li> <li> <p>Incident response: Investigate unexpected network service activity</p> </li> <li> <p>Compliance monitoring: Ensure network services comply with policies</p> </li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_bind/#binding-scenarios","title":"BINDING SCENARIOS","text":"<p>Common socket binding scenarios:</p> <ul> <li>Server initialization: Web servers, database servers binding to listening ports</li> <li>Service discovery: Applications binding to well-known ports</li> <li>Dynamic port allocation: Applications requesting any available port (port 0)</li> <li>Specific interface binding: Binding to specific network interfaces</li> <li>Privilege port binding: Binding to ports below 1024 (requires privileges)</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_bind/#address-families","title":"ADDRESS FAMILIES","text":"<p>The <code>local_addr</code> field contains different address types:</p> <ul> <li>IPv4: <code>sockaddr_in</code> with IPv4 address and port</li> <li>IPv6: <code>sockaddr_in6</code> with IPv6 address and port</li> <li>UNIX: <code>sockaddr_un</code> with filesystem socket path</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_bind/#security-considerations","title":"SECURITY CONSIDERATIONS","text":"<p>Monitor for suspicious binding patterns:</p> <ul> <li>Privilege escalation: Unauthorized binding to privileged ports</li> <li>Service hijacking: Binding to ports used by other services</li> <li>Backdoor services: Unexpected services binding to unusual ports</li> <li>Network reconnaissance: Applications probing port availability</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_bind/#port-categories","title":"PORT CATEGORIES","text":"<ul> <li>Well-known ports (0-1023): Require root privileges to bind</li> <li>Registered ports (1024-49151): Commonly used application ports</li> <li>Dynamic/private ports (49152-65535): Typically used for client connections</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_bind/#performance-considerations","title":"PERFORMANCE CONSIDERATIONS","text":"<p>Socket binding events are relatively infrequent compared to data transfer operations, but can be numerous in environments with frequent service starts/stops or applications that create many sockets.</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_bind/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_socket_create: Socket creation security events</li> <li>security_socket_listen: Socket listen security events</li> <li>security_socket_accept: Socket accept security events</li> <li>security_socket_connect: Socket connect security events</li> <li>bind: Bind system call events</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_connect/","title":"TRACEE-SECURITY-SOCKET-CONNECT","text":""},{"location":"docs/events/builtin/man/lsm/security_socket_connect/#name","title":"NAME","text":"<p>security_socket_connect - socket connection security check</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_connect/#description","title":"DESCRIPTION","text":"<p>Triggered when a socket attempts to establish a connection through the Linux Security Module (LSM) hook. This event captures information about the socket and the remote address it's trying to connect to, providing visibility into outbound network communications.</p> <p>The event monitors socket connections for security, diagnostics, and compliance purposes by hooking into the kernel's <code>security_socket_connect</code> function.</p> <p>This event is useful for:</p> <ul> <li>Network security monitoring: Track outbound connections and detect malicious communications</li> <li>Connection auditing: Monitor network connections for compliance purposes</li> <li>Network diagnostics: Debug network-related issues in applications</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_connect/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_connect/#data-fields","title":"DATA FIELDS","text":"<p>sockfd (int32) : The file descriptor referring to the socket attempting the connection</p> <p>remote_addr (trace.SockAddr) : The remote address structure containing connection destination details. Depending on the address family (IPv4, IPv6, or UNIX), this contains different address information</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_connect/#dependencies","title":"DEPENDENCIES","text":"<p>LSM Hook:</p> <ul> <li>security_socket_connect (required): LSM hook for socket connection security checks</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_connect/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Track outbound connections to detect malicious communications</p> </li> <li> <p>Network auditing: Monitor connections for compliance and security policies</p> </li> <li> <p>Incident response: Investigate suspicious network connections during security incidents</p> </li> <li> <p>Application debugging: Diagnose network connectivity issues in applications</p> </li> <li> <p>Traffic analysis: Understand application network communication patterns</p> </li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_connect/#address-families","title":"ADDRESS FAMILIES","text":"<p>The <code>remote_addr</code> field can contain different address types:</p> <ul> <li>IPv4: <code>sockaddr_in</code> structure with IP address and port</li> <li>IPv6: <code>sockaddr_in6</code> structure with IPv6 address and port</li> <li>UNIX: <code>sockaddr_un</code> structure with socket path</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_connect/#performance-considerations","title":"PERFORMANCE CONSIDERATIONS","text":"<p>Monitoring every socket connection may introduce overhead in systems with frequent network communications. Consider filtering or adjusting monitoring scope for high-throughput environments.</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_connect/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_socket_create: Socket creation security events</li> <li>security_socket_listen: Socket listen security events</li> <li>security_socket_accept: Socket accept security events</li> <li>security_socket_bind: Socket bind security events</li> <li>security_socket_setsockopt: Socket option security events</li> <li>connect: Connect system call events</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_setsockopt/","title":"TRACEE-SECURITY-SOCKET-SETSOCKOPT","text":""},{"location":"docs/events/builtin/man/lsm/security_socket_setsockopt/#name","title":"NAME","text":"<p>security_socket_setsockopt - check permissions before setting socket options</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_setsockopt/#description","title":"DESCRIPTION","text":"<p>This event is triggered by the Linux Security Module (LSM) hook when checking permissions before setting socket options via the setsockopt system call. It provides visibility into socket option modifications and their security implications.</p> <p>Unlike the setsockopt syscall event which only provides the socket file descriptor, this LSM event provides detailed socket information including socket type and addressing details. However, it does not include the actual option value being set, as it occurs during the permission check phase.</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_setsockopt/#event-sets","title":"EVENT SETS","text":"<p>lsm_hooks, net, net_sock</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_setsockopt/#data-fields","title":"DATA FIELDS","text":"<p>sockfd (int32) : File descriptor of the socket being modified</p> <p>level (int32) : Protocol level for the option (e.g., SOL_SOCKET, IPPROTO_TCP)</p> <p>optname (int32) : Option name being set</p> <p>local_addr (SockAddr) : Socket details including:   - Socket type   - Local IP address   - Local port number   - Protocol-specific information</p>"},{"location":"docs/events/builtin/man/lsm/security_socket_setsockopt/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_socket_setsockopt</code>: LSM hook for socket option setting</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_setsockopt/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Track socket configuration changes</p> </li> <li> <p>Network control: Audit socket option modifications</p> </li> <li> <p>Compliance: Verify socket security settings</p> </li> <li> <p>Debugging: Diagnose socket configuration issues</p> </li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_setsockopt/#socket-options","title":"SOCKET OPTIONS","text":"<p>Common socket option levels:</p> <ul> <li>SOL_SOCKET: Socket level options</li> <li>SO_REUSEADDR: Address reuse</li> <li>SO_KEEPALIVE: Connection keepalive</li> <li>SO_BROADCAST: Broadcast permissions</li> <li>SO_SNDBUF/SO_RCVBUF: Buffer sizes</li> <li> <p>SO_LINGER: Connection termination</p> </li> <li> <p>IPPROTO_IP: IP level options</p> </li> <li>IP_TTL: Time to live</li> <li>IP_TOS: Type of service</li> <li> <p>IP_OPTIONS: IP header options</p> </li> <li> <p>IPPROTO_TCP: TCP level options</p> </li> <li>TCP_NODELAY: Disable Nagle's algorithm</li> <li>TCP_MAXSEG: Maximum segment size</li> <li>TCP_KEEPIDLE: Keepalive idle time</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_setsockopt/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Important security aspects:</p> <ul> <li>Resource limits: Buffer size controls</li> <li>Access control: Broadcast permissions</li> <li>Network behavior: Protocol configurations</li> <li>Connection handling: Timeout settings</li> <li>Performance tuning: Protocol optimizations</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_setsockopt/#audit-tips","title":"AUDIT TIPS","text":"<p>Key monitoring points:</p> <ul> <li>Changes to security-relevant options</li> <li>Unusual option combinations</li> <li>Privileged option modifications</li> <li>Protocol-specific security settings</li> <li>Resource allocation changes</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_socket_setsockopt/#related-events","title":"RELATED EVENTS","text":"<ul> <li>setsockopt: System call for setting options</li> <li>getsockopt: System call for getting options</li> <li>security_socket_bind: Socket binding security</li> <li>security_socket_connect: Connection security</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_task_setrlimit/","title":"TRACEE-SECURITY-TASK-SETRLIMIT","text":""},{"location":"docs/events/builtin/man/lsm/security_task_setrlimit/#name","title":"NAME","text":"<p>security_task_setrlimit - check permissions before setting task resource limits</p>"},{"location":"docs/events/builtin/man/lsm/security_task_setrlimit/#description","title":"DESCRIPTION","text":"<p>This event is triggered by the Linux Security Module (LSM) hook when checking permissions before modifying a task's resource limits. Resource limits (rlimits) control the amount of system resources a process can use, such as CPU time, file size, or number of open files.</p> <p>The event provides information about both the target process and the new limits being set, allowing monitoring of resource limit changes that could affect system stability or security. It occurs during the permission check phase, before the actual limit modification.</p>"},{"location":"docs/events/builtin/man/lsm/security_task_setrlimit/#event-sets","title":"EVENT SETS","text":"<p>lsm</p>"},{"location":"docs/events/builtin/man/lsm/security_task_setrlimit/#data-fields","title":"DATA FIELDS","text":"<p>target_host_pid (uint32) : Process ID of the target task on the host</p> <p>resource (int32) : Resource type being limited (e.g., RLIMIT_CPU, RLIMIT_NOFILE)</p> <p>new_rlim_cur (uint64) : New soft limit value being set</p> <p>new_rlim_max (uint64) : New hard limit value being set</p>"},{"location":"docs/events/builtin/man/lsm/security_task_setrlimit/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_task_setrlimit</code>: LSM hook for resource limit setting</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_task_setrlimit/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Resource control: Monitor limit changes</p> </li> <li> <p>Security monitoring: Track privilege changes</p> </li> <li> <p>System protection: Prevent resource exhaustion</p> </li> <li> <p>Compliance: Verify resource constraints</p> </li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_task_setrlimit/#resource-types","title":"RESOURCE TYPES","text":"<p>Common resource limits:</p> <ul> <li>RLIMIT_CPU: CPU time limit</li> <li>RLIMIT_FSIZE: Maximum file size</li> <li>RLIMIT_DATA: Data segment size</li> <li>RLIMIT_STACK: Stack size limit</li> <li>RLIMIT_CORE: Core file size</li> <li>RLIMIT_RSS: Resident set size</li> <li>RLIMIT_NPROC: Number of processes</li> <li>RLIMIT_NOFILE: Open file descriptors</li> <li>RLIMIT_MEMLOCK: Locked memory</li> <li>RLIMIT_AS: Address space limit</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_task_setrlimit/#limit-types","title":"LIMIT TYPES","text":"<p>Understanding limit values:</p> <ul> <li>Soft limit (rlim_cur):</li> <li>Current enforcement level</li> <li>Can be changed by process</li> <li>Must be \u2264 hard limit</li> <li> <p>Generates signal when exceeded</p> </li> <li> <p>Hard limit (rlim_max):</p> </li> <li>Maximum allowed value</li> <li>Requires privileges to increase</li> <li>Cannot be exceeded by soft limit</li> <li>Absolute resource boundary</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_task_setrlimit/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Important security aspects:</p> <ul> <li>Resource exhaustion: Prevent DoS</li> <li>Process constraints: Control behavior</li> <li>System stability: Protect resources</li> <li>Privilege escalation: Limit scope</li> <li>Container isolation: Resource boundaries</li> </ul>"},{"location":"docs/events/builtin/man/lsm/security_task_setrlimit/#related-events","title":"RELATED EVENTS","text":"<ul> <li>setrlimit: System call for setting limits</li> <li>prlimit64: Process resource limits</li> <li>security_bprm_check: Binary execution checks</li> <li>security_task_kill: Process signal checks</li> </ul>"},{"location":"docs/events/builtin/man/misc/bpf_attach/","title":"TRACEE-BPF-ATTACH","text":""},{"location":"docs/events/builtin/man/misc/bpf_attach/#name","title":"NAME","text":"<p>bpf_attach - a BPF program is attached to a probe</p>"},{"location":"docs/events/builtin/man/misc/bpf_attach/#description","title":"DESCRIPTION","text":"<p>Triggered when a BPF program is attached to a kernel instrumentation point (kprobe, uprobe, tracepoint, or raw_tracepoint). This event provides information about both the BPF program and the probe it's being attached to.</p> <p>This event is useful for:</p> <ul> <li>Monitoring BPF program deployment</li> <li>Security auditing of kernel instrumentation</li> <li>Understanding system behavior changes</li> </ul>"},{"location":"docs/events/builtin/man/misc/bpf_attach/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/bpf_attach/#data-fields","title":"DATA FIELDS","text":"<p>prog_type (int32) : The type of BPF program (e.g., kprobe, tracepoint)</p> <p>prog_name (string) : Name of the BPF program (truncated to 16 characters)</p> <p>prog_id (uint32) : Unique kernel identifier for the BPF program</p> <p>prog_helpers ([]string) : List of BPF helper functions used by this program</p> <p>symbol_name (string) : Name or path of the kernel symbol being instrumented</p> <p>symbol_addr (uint64) : Memory address of the instrumentation point</p> <p>attach_type (int32) : Numeric identifier for the probe type</p>"},{"location":"docs/events/builtin/man/misc/bpf_attach/#dependencies","title":"DEPENDENCIES","text":"<p>Kernel Probes:</p> <ul> <li>security_file_ioctl (required)</li> <li>security_bpf_prog (required)</li> <li>security_bpf (required)</li> <li>tracepoint_probe_register_prio_may_exist (required)</li> <li>check_helper_call (optional)</li> <li>check_map_func_compatibility (optional)</li> </ul>"},{"location":"docs/events/builtin/man/misc/bpf_attach/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Detect unauthorized BPF program installation</p> </li> <li> <p>Performance analysis: Track when monitoring tools attach to kernel functions</p> </li> <li> <p>Debugging: Understand which BPF programs are active in the system</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/bpf_attach/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_bpf_prog: BPF program loading and verification</li> <li>bpf_map_create: BPF map creation events</li> </ul>"},{"location":"docs/events/builtin/man/misc/cgroup_mkdir/","title":"TRACEE-CGROUP-MKDIR","text":""},{"location":"docs/events/builtin/man/misc/cgroup_mkdir/#name","title":"NAME","text":"<p>cgroup_mkdir - cgroup directory creation</p>"},{"location":"docs/events/builtin/man/misc/cgroup_mkdir/#description","title":"DESCRIPTION","text":"<p>Triggered when a new cgroup directory is created in the cgroup filesystem. This event tracks the creation of new cgroup directories, which often signals container initiation, process group creation, or resource management operations.</p> <p>Since containers utilize control groups (cgroups) for resource management and isolation, monitoring cgroup directory creation provides valuable insights into container operations, resource allocations, and overall system container activity.</p> <p>This event is useful for:</p> <ul> <li>Container lifecycle monitoring: Track container creation and resource allocation</li> <li>Resource management: Monitor cgroup-based resource control mechanisms</li> <li>System activity analysis: Understand process grouping and isolation patterns</li> </ul>"},{"location":"docs/events/builtin/man/misc/cgroup_mkdir/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/cgroup_mkdir/#data-fields","title":"DATA FIELDS","text":"<p>cgroup_id (uint64) : The unique identifier for the cgroup</p> <p>cgroup_path (string) : The filesystem path to the cgroup directory</p> <p>hierarchy_id (uint32) : Identifier indicating the hierarchy level of the cgroup</p>"},{"location":"docs/events/builtin/man/misc/cgroup_mkdir/#dependencies","title":"DEPENDENCIES","text":"<p>Kernel Tracepoint:</p> <ul> <li>cgroup_mkdir (raw tracepoint, required): Kernel tracepoint for cgroup directory creation</li> </ul>"},{"location":"docs/events/builtin/man/misc/cgroup_mkdir/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Container monitoring: Detect when new containers are created by tracking cgroup creation</p> </li> <li> <p>Resource accounting: Monitor cgroup creation for resource utilization tracking</p> </li> <li> <p>Security monitoring: Identify unexpected or malicious container creation activity</p> </li> <li> <p>System administration: Track container orchestration and resource management</p> </li> <li> <p>Performance analysis: Monitor container lifecycle and resource allocation patterns</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/cgroup_mkdir/#cgroup-hierarchy","title":"CGROUP HIERARCHY","text":"<p>Cgroups are organized in hierarchies:</p> <ul> <li>v1 (legacy): Multiple hierarchies with different controllers</li> <li>v2 (unified): Single unified hierarchy with all controllers</li> <li>Hierarchy ID: Identifies which cgroup hierarchy the directory belongs to</li> </ul>"},{"location":"docs/events/builtin/man/misc/cgroup_mkdir/#container-relationship","title":"CONTAINER RELATIONSHIP","text":"<p>Cgroup directory creation often correlates with:</p> <ul> <li>Container creation: New containers typically create new cgroup directories</li> <li>Process isolation: Applications using cgroups for resource control</li> <li>Resource limits: Setting up resource constraints and monitoring</li> <li>Namespace isolation: Combined with other isolation mechanisms</li> </ul>"},{"location":"docs/events/builtin/man/misc/cgroup_mkdir/#performance-considerations","title":"PERFORMANCE CONSIDERATIONS","text":"<p>This event can be frequent in container-heavy environments. Consider filtering or adjusting monitoring scope based on:</p> <ul> <li>Specific cgroup paths of interest</li> <li>Container runtime patterns</li> <li>Resource management policies</li> </ul>"},{"location":"docs/events/builtin/man/misc/cgroup_mkdir/#related-events","title":"RELATED EVENTS","text":"<ul> <li>container_create: High-level derived event for container creation</li> <li>cgroup_rmdir: Cgroup directory removal events</li> <li>cgroup_attach_task: Task attachment to cgroups</li> <li>sched_process_fork: Process creation that may trigger cgroup assignment</li> </ul>"},{"location":"docs/events/builtin/man/misc/cgroup_rmdir/","title":"TRACEE-CGROUP-RMDIR","text":""},{"location":"docs/events/builtin/man/misc/cgroup_rmdir/#name","title":"NAME","text":"<p>cgroup_rmdir - Event triggered when a cgroup directory is removed</p>"},{"location":"docs/events/builtin/man/misc/cgroup_rmdir/#description","title":"DESCRIPTION","text":"<p>The cgroup_rmdir event monitors the removal of directories within the cgroup filesystem. As containers are orchestrated and managed using control groups (cgroups), the removal of a directory often indicates the termination or scaling down of a container instance.</p> <p>By monitoring these directory removal events, operators can capture crucial insights into container terminations, resource deallocations, and other significant container lifecycle events within the system.</p> <p>This event is pivotal for administrators looking to scrutinize container lifecycle events and for understanding the orchestration dynamics in complex containerized environments.</p>"},{"location":"docs/events/builtin/man/misc/cgroup_rmdir/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/cgroup_rmdir/#data-fields","title":"DATA FIELDS","text":"<p>cgroup_id (uint64) : The unique identifier associated with the cgroup being removed</p> <p>cgroup_path (string) : The file system path pointing to the cgroup directory that's being removed</p> <p>hierarchy_id (uint32) : Denotes the hierarchy level of the cgroup that's being removed</p>"},{"location":"docs/events/builtin/man/misc/cgroup_rmdir/#dependencies","title":"DEPENDENCIES","text":"<p>Kernel Tracepoint:</p> <ul> <li>cgroup_rmdir (required): Kernel tracepoint for cgroup directory removal</li> </ul>"},{"location":"docs/events/builtin/man/misc/cgroup_rmdir/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Container Termination Monitoring: By tracing cgroup directory removals, the system can identify when containers are terminated, offering a perspective into system scaling dynamics and potential anomalies</p> </li> <li> <p>Resource Cleanup: Keeping track of the removal of cgroups helps in understanding resource deallocations and ensuring efficient resource usage across the infrastructure</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/cgroup_rmdir/#related-events","title":"RELATED EVENTS","text":"<ul> <li>container_remove: A derived event that focuses on providing detailed insights about the container corresponding to the removed cgroup directory</li> </ul>"},{"location":"docs/events/builtin/man/misc/chmod_common/","title":"TRACEE-CHMOD-COMMON","text":""},{"location":"docs/events/builtin/man/misc/chmod_common/#name","title":"NAME","text":"<p>chmod_common - Event capturing changes to access permissions of files and directories</p>"},{"location":"docs/events/builtin/man/misc/chmod_common/#description","title":"DESCRIPTION","text":"<p>The chmod_common event captures any changes to file and directory access permissions, typically triggered by the <code>chmod</code>, <code>fchmod</code>, and <code>fchmodat</code> system calls. This event provides visibility into permission modifications that could be security-relevant.</p>"},{"location":"docs/events/builtin/man/misc/chmod_common/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/chmod_common/#data-fields","title":"DATA FIELDS","text":"<p>pathname (string) : Path of the file or directory whose permissions are being changed</p> <p>mode (uint16) : The new mode (permission bits) being applied to the file or directory</p>"},{"location":"docs/events/builtin/man/misc/chmod_common/#dependencies","title":"DEPENDENCIES","text":"<p>Kernel Probe:</p> <ul> <li>chmod_common (required): Kernel probe to catch access permission changes of files and directories</li> </ul>"},{"location":"docs/events/builtin/man/misc/chmod_common/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security Monitoring: Track unauthorized permission changes that could indicate privilege escalation attempts</p> </li> <li> <p>Compliance Auditing: Monitor file permission changes for regulatory compliance requirements</p> </li> <li> <p>System Administration: Track configuration changes that modify file access controls</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/chmod_common/#related-events","title":"RELATED EVENTS","text":"<ul> <li>chmod: System call to change file permissions</li> <li>fchmod: System call to change permissions using file descriptor</li> <li>fchmodat: System call to change permissions relative to directory file descriptor</li> </ul>"},{"location":"docs/events/builtin/man/misc/do_sigaction/","title":"TRACEE-DO-SIGACTION","text":""},{"location":"docs/events/builtin/man/misc/do_sigaction/#name","title":"NAME","text":"<p>do_sigaction - Event triggered when registering new signal handler or getting information about current one</p>"},{"location":"docs/events/builtin/man/misc/do_sigaction/#description","title":"DESCRIPTION","text":"<p>The do_sigaction event marks that an attempt to get current task signal handler or to change the signal handler of the current task for a specific signal occurred. Signal handler changes mark the change of program behavior, and might indicate an attempt to defy expected signal behavior.</p> <p>This event is relevant for each syscall related to signal handling - <code>rt_sigaction</code>, <code>sigaction</code> and <code>signal</code>.</p> <p>In the kernel, the handle method and the handler are united to one field. To make it more accessible to the user, Tracee splits the two apart. Normally, the value can be one of the following: <code>SIG_DFL</code>(0), <code>SIG_IGN</code>(1) or pointer to user-mode handler function. To deal with the case of a user-mode handler, the value <code>SIG_HND</code>(2) is created to specify that the method is by handler.</p>"},{"location":"docs/events/builtin/man/misc/do_sigaction/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/do_sigaction/#data-fields","title":"DATA FIELDS","text":"<p>sig (int32) : The signal that its handler is inspected or changed</p> <p>is_sa_initialized (bool) : Is a new signal handler given. If not, this event marks only inspection of data</p> <p>sa_flags (uint64) : The flags given for the new signal handler</p> <p>sa_mask (uint64) : The mask given for the new signal handler</p> <p>sa_handle_method (uint8) : The handling method of the new signal handler</p> <p>sa_handler (trace.Pointer) : The address of the new signal handling function if method is SIG_HND</p> <p>is_old_sa_initialized (bool) : Is an old signal handler given. If given, the old signal handler will be copied back to the caller</p> <p>old_sa_flags (uint64) : The flags of the old signal handler</p> <p>old_sa_mask (uint64) : The mask of the old signal handler</p> <p>old_sa_handle_method (uint8) : The handling method of the old signal handler</p> <p>old_sa_handler (trace.Pointer) : The address of the old signal handling function if method was SIG_HND</p>"},{"location":"docs/events/builtin/man/misc/do_sigaction/#dependencies","title":"DEPENDENCIES","text":"<p>Kernel Probe:</p> <ul> <li>do_sigaction (required): Kernel probe on the function implementing the signal handler inspection/modification for syscalls</li> </ul>"},{"location":"docs/events/builtin/man/misc/do_sigaction/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Malware Detection: Monitor signal handler modifications that could indicate process injection or evasion techniques</p> </li> <li> <p>Security Analysis: Track changes to signal handling behavior that might bypass security controls</p> </li> <li> <p>Debugging: Monitor signal handler registration during application debugging</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/do_sigaction/#related-events","title":"RELATED EVENTS","text":"<ul> <li>rt_sigaction: Real-time signal action system call</li> <li>sigaction: Signal action system call</li> <li>signal: Signal system call</li> </ul>"},{"location":"docs/events/builtin/man/misc/file_modification/","title":"TRACEE-FILE-MODIFICATION","text":""},{"location":"docs/events/builtin/man/misc/file_modification/#name","title":"NAME","text":"<p>file_modification - a file was modified by a process</p>"},{"location":"docs/events/builtin/man/misc/file_modification/#description","title":"DESCRIPTION","text":"<p>Triggered when a file is modified by a process. This event is submitted once between the open and close of the file to reduce event volume while still providing modification detection capabilities.</p> <p>The event monitors file changes by tracking file open/close operations and detecting ctime changes during the file's lifetime. It uses kernel probes to efficiently capture file modification events without overwhelming the system with excessive events for frequently modified files.</p> <p>This event is useful for:</p> <ul> <li>File integrity monitoring: Track unauthorized file modifications</li> <li>Security monitoring: Detect malicious file changes</li> <li>Audit compliance: Monitor file access and modification patterns</li> <li>System monitoring: Track application file I/O behavior</li> </ul>"},{"location":"docs/events/builtin/man/misc/file_modification/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/file_modification/#data-fields","title":"DATA FIELDS","text":"<p>file_path (string) : The path of the file that was modified</p> <p>dev (uint32) : The device identifier that contains this file</p> <p>inode (uint64) : The inode number of the modified file</p> <p>old_ctime (uint64) : The ctime (change time) of the file before modification</p> <p>new_ctime (uint64) : The ctime (change time) of the file after modification</p>"},{"location":"docs/events/builtin/man/misc/file_modification/#dependencies","title":"DEPENDENCIES","text":"<p>Kernel Probes:</p> <ul> <li>fd_install (kprobe, required): Captures file open operations to track files for modification events</li> <li>filp_close (kprobe, required): Captures file close operations to remove files from tracking cache</li> <li>file_update_time (kprobe + kretprobe, required): Detects ctime changes during file updates</li> <li>file_modified (kprobe + kretprobe, optional): Alternative detection of file ctime changes (kernels &gt;= 5.3)</li> </ul>"},{"location":"docs/events/builtin/man/misc/file_modification/#use-cases","title":"USE CASES","text":"<ul> <li> <p>File integrity monitoring: Detect unauthorized changes to critical system files</p> </li> <li> <p>Security auditing: Monitor file modifications for compliance and security</p> </li> <li> <p>Malware detection: Identify suspicious file modification patterns</p> </li> <li> <p>System debugging: Track application file modification behavior</p> </li> <li> <p>Backup systems: Trigger backup operations based on file changes</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/file_modification/#implementation-notes","title":"IMPLEMENTATION NOTES","text":"<ul> <li>Event deduplication: Only the first modification event is submitted between file open and close</li> <li>LRU caching: Uses LRU map to track files, which may cause occasional duplicate events when cache is full</li> <li>Performance optimization: Reduces event volume for frequently modified files</li> </ul>"},{"location":"docs/events/builtin/man/misc/file_modification/#limitations","title":"LIMITATIONS","text":"<p>The event may occasionally be submitted more than once between file open and close due to LRU cache eviction when the cache is full, causing tracking information to be lost.</p>"},{"location":"docs/events/builtin/man/misc/file_modification/#related-events","title":"RELATED EVENTS","text":"<ul> <li>vfs_write: Virtual filesystem write operations</li> <li>vfs_read: Virtual filesystem read operations</li> <li>security_file_open: LSM hook for file open operations</li> <li>do_truncate: File truncation operations</li> </ul>"},{"location":"docs/events/builtin/man/misc/kallsyms_lookup_name/","title":"TRACEE-KALLSYMS-LOOKUP-NAME","text":""},{"location":"docs/events/builtin/man/misc/kallsyms_lookup_name/#name","title":"NAME","text":"<p>kallsyms_lookup_name - kernel symbol address lookup</p>"},{"location":"docs/events/builtin/man/misc/kallsyms_lookup_name/#description","title":"DESCRIPTION","text":"<p>Triggered when the <code>kallsyms_lookup_name()</code> kernel function is called to look up the address of a kernel symbol. This function is primarily used by external kernel extensions such as kernel modules, eBPF programs, and other kernel-level code that needs to resolve symbol addresses dynamically.</p> <p>Monitoring symbol lookups can reveal potentially suspicious activity, such as rootkits or malicious kernel modules attempting to locate and hook kernel functions, or legitimate kernel extensions resolving symbol addresses for their operations.</p> <p>This event is useful for:</p> <ul> <li>Kernel security monitoring: Detect attempts to locate sensitive kernel symbols</li> <li>Rootkit detection: Identify malicious modules looking up symbols for hooking</li> <li>Kernel extension monitoring: Track legitimate kernel module symbol resolution</li> </ul>"},{"location":"docs/events/builtin/man/misc/kallsyms_lookup_name/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/kallsyms_lookup_name/#data-fields","title":"DATA FIELDS","text":"<p>symbol_name (string) : The name of the kernel symbol being looked up</p> <p>symbol_address (trace.Pointer) : The resolved address of the symbol returned by the function (0 if symbol not found)</p>"},{"location":"docs/events/builtin/man/misc/kallsyms_lookup_name/#dependencies","title":"DEPENDENCIES","text":"<p>Kernel Probes:</p> <ul> <li>kallsyms_lookup_name (kprobe + kretprobe, required): Hooks the kernel symbol lookup function on entry and exit</li> </ul>"},{"location":"docs/events/builtin/man/misc/kallsyms_lookup_name/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Detect attempts to locate sensitive kernel symbols for malicious purposes</p> </li> <li> <p>Rootkit detection: Identify malicious kernel modules looking up symbols for function hooking</p> </li> <li> <p>Kernel debugging: Monitor symbol resolution during kernel development and debugging</p> </li> <li> <p>System analysis: Understand kernel extension behavior and dependencies</p> </li> <li> <p>Forensic analysis: Track symbol lookup patterns during incident investigation</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/kallsyms_lookup_name/#common-symbol-lookups","title":"COMMON SYMBOL LOOKUPS","text":"<p>Legitimate kernel extensions often look up:</p> <ul> <li>System call table symbols: For syscall interception or monitoring</li> <li>VFS operation symbols: For filesystem operation hooking</li> <li>Network stack symbols: For network monitoring or filtering</li> <li>Security framework symbols: For security policy enforcement</li> <li>Hardware abstraction symbols: For device driver functionality</li> </ul>"},{"location":"docs/events/builtin/man/misc/kallsyms_lookup_name/#suspicious-patterns","title":"SUSPICIOUS PATTERNS","text":"<p>Monitor for lookups of sensitive symbols:</p> <ul> <li>sys_call_table: System call table (common rootkit target)</li> <li>security_* functions: Security framework functions</li> <li>do_exit, do_fork: Process lifecycle functions</li> <li>vfs_* functions: Virtual filesystem operations</li> <li>network stack functions: Network monitoring points</li> </ul>"},{"location":"docs/events/builtin/man/misc/kallsyms_lookup_name/#symbol-resolution-process","title":"SYMBOL RESOLUTION PROCESS","text":"<p>The <code>kallsyms_lookup_name</code> function:</p> <ol> <li>Searches symbol table: Looks through the kernel symbol table</li> <li>Name matching: Performs string comparison for symbol name</li> <li>Address resolution: Returns the memory address if found</li> <li>Permission checking: May verify caller permissions for sensitive symbols</li> </ol>"},{"location":"docs/events/builtin/man/misc/kallsyms_lookup_name/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Symbol address knowledge enables:</p> <ul> <li>Function hooking: Redirecting function calls to malicious code</li> <li>Data structure access: Direct manipulation of kernel data structures</li> <li>Control flow hijacking: Altering kernel execution flow</li> <li>Information disclosure: Bypassing kernel address space layout randomization (KASLR)</li> </ul>"},{"location":"docs/events/builtin/man/misc/kallsyms_lookup_name/#legitimate-use-cases","title":"LEGITIMATE USE CASES","text":"<ul> <li>Device drivers: Hardware abstraction and device management</li> <li>Security modules: LSM implementations and security frameworks</li> <li>Debugging tools: Kernel debuggers and profiling tools</li> <li>Virtualization: Hypervisor and container runtime components</li> <li>Monitoring tools: System monitoring and observability frameworks</li> </ul>"},{"location":"docs/events/builtin/man/misc/kallsyms_lookup_name/#related-events","title":"RELATED EVENTS","text":"<ul> <li>module_load: Kernel module loading events</li> <li>init_module: Module initialization system call</li> <li>symbols_loaded: Symbol loading in user-space libraries</li> <li>shared_object_loaded: Shared library loading events</li> </ul>"},{"location":"docs/events/builtin/man/misc/magic_write/","title":"TRACEE-MAGIC-WRITE","text":""},{"location":"docs/events/builtin/man/misc/magic_write/#name","title":"NAME","text":"<p>magic_write - write operation to a file which changed the file's headers</p>"},{"location":"docs/events/builtin/man/misc/magic_write/#description","title":"DESCRIPTION","text":"<p>Triggered when a write operation occurs at offset 0 of a file, indicating either a new file creation or modification of an existing file's headers. This event is crucial for monitoring file content changes, particularly focusing on the initial bytes that often contain file type identification and metadata.</p> <p>The event provides detailed information about the written file, including its path, initial content bytes, and filesystem metadata. This information is valuable for identifying potential threats through file type analysis and content inspection.</p> <p>This event is useful for:</p> <ul> <li>File integrity monitoring: Track changes to file headers and content</li> <li>Malware detection: Identify suspicious file modifications</li> <li>File type analysis: Monitor file type changes through header modifications</li> <li>Security auditing: Track file creation and modification patterns</li> </ul>"},{"location":"docs/events/builtin/man/misc/magic_write/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/magic_write/#data-fields","title":"DATA FIELDS","text":"<p>pathname (string) : The path of the file being written</p> <p>bytes ([]byte) : The first 20 bytes of the file's content</p> <p>dev (uint32) : The device identifier where the file resides</p> <p>inode (uint64) : The inode number of the file in the filesystem</p>"},{"location":"docs/events/builtin/man/misc/magic_write/#dependencies","title":"DEPENDENCIES","text":"<p>Kernel Probes:</p> <ul> <li>vfs_write (kprobe + kretprobe, required): Catch write operations via write syscall</li> <li>vfs_writev (kprobe + kretprobe, required): Catch write operations via writev syscall</li> <li>__kernel_write (kprobe + kretprobe, required): Catch kernel-space write operations</li> </ul>"},{"location":"docs/events/builtin/man/misc/magic_write/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Malware detection: Identify malicious file modifications or creations</p> </li> <li> <p>File integrity monitoring: Track changes to critical system files</p> </li> <li> <p>Security analysis: Monitor file content modifications for potential threats</p> </li> <li> <p>Compliance monitoring: Track file modifications for audit requirements</p> </li> <li> <p>File type verification: Ensure files maintain their expected types</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/magic_write/#limitations","title":"LIMITATIONS","text":"<p>The event has specific limitations to prevent excessive event generation:</p> <ul> <li>Does not trigger for FIFO files</li> <li>Does not trigger for files without persistent offsets</li> <li>Only captures the first 20 bytes of content</li> <li>Subject to TOCTOU (Time of Check, Time of Use) race conditions</li> </ul>"},{"location":"docs/events/builtin/man/misc/magic_write/#write-operations","title":"WRITE OPERATIONS","text":"<p>The event captures writes from multiple sources:</p> <ul> <li>User-space writes: Through write() and writev() syscalls</li> <li>Kernel-space writes: Through __kernel_write operations</li> <li>Zero-offset writes: Only triggers for writes at file offset 0</li> </ul>"},{"location":"docs/events/builtin/man/misc/magic_write/#security-considerations","title":"SECURITY CONSIDERATIONS","text":"<ul> <li>TOCTOU vulnerabilities: File content may change between detection and analysis</li> <li>Race conditions: Multiple writes may occur between event triggers</li> <li>Header spoofing: Malicious files may attempt to masquerade as other types</li> <li>Partial writes: Only initial bytes are captured, missing subsequent modifications</li> </ul>"},{"location":"docs/events/builtin/man/misc/magic_write/#related-events","title":"RELATED EVENTS","text":"<ul> <li>write: Write system call events</li> <li>writev: Vectored write system call events</li> <li>vfs_write: Virtual filesystem write events</li> <li>vfs_writev: Virtual filesystem vectored write events</li> <li>security_file_open: File open security events</li> </ul>"},{"location":"docs/events/builtin/man/misc/net_tcp_connect/","title":"TRACEE-NET-TCP-CONNECT","text":""},{"location":"docs/events/builtin/man/misc/net_tcp_connect/#name","title":"NAME","text":"<p>net_tcp_connect - monitor TCP connection attempts with DNS resolution</p>"},{"location":"docs/events/builtin/man/misc/net_tcp_connect/#description","title":"DESCRIPTION","text":"<p>A high-level event derived from the security_socket_connect LSM (Linux Security Module) hook that monitors TCP connection attempts. This event provides enriched information about outbound connections, including DNS resolution data for destination addresses.</p> <p>Unlike direct kernel probes, this LSM-based approach avoids Time-Of-Check to Time-Of-Use (TOCTOU) race conditions, making it a reliable source for connection monitoring. The event combines low-level connection details with high-level DNS context for comprehensive network visibility.</p> <p>This event is useful for:</p> <ul> <li>Network monitoring: Track outbound connection patterns</li> <li>Security analysis: Detect connections to suspicious endpoints</li> <li>DNS tracking: Monitor domain name resolution patterns</li> <li>Behavioral analysis: Understand application network usage</li> </ul>"},{"location":"docs/events/builtin/man/misc/net_tcp_connect/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/net_tcp_connect/#data-fields","title":"DATA FIELDS","text":"<p>dst_ip (string) : The destination IP address of the connection attempt</p> <p>dst_port (uint16) : The destination port number</p> <p>results ([]string) : DNS resolutions associated with the destination IP</p>"},{"location":"docs/events/builtin/man/misc/net_tcp_connect/#dependencies","title":"DEPENDENCIES","text":"<p>LSM Hook:</p> <ul> <li>security_socket_connect (required): LSM hook for socket connection security checks</li> </ul>"},{"location":"docs/events/builtin/man/misc/net_tcp_connect/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Detect connections to suspicious or malicious endpoints</p> </li> <li> <p>Network behavior analysis: Track application connection patterns</p> </li> <li> <p>DNS correlation: Link IP addresses with domain names</p> </li> <li> <p>Intrusion detection: Identify unusual connection patterns</p> </li> <li> <p>Compliance monitoring: Track network connections for audit requirements</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/net_tcp_connect/#performance-considerations","title":"PERFORMANCE CONSIDERATIONS","text":"<p>The event generates data for each connection attempt, which can be substantial in high-traffic environments. Consider:</p> <ul> <li>Data volume: High network activity generates many events</li> <li>DNS resolution: Additional overhead for DNS lookups</li> <li>Storage requirements: Connection logs can grow quickly</li> <li>Analysis overhead: Processing connection patterns requires resources</li> </ul>"},{"location":"docs/events/builtin/man/misc/net_tcp_connect/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>The event provides valuable security insights:</p> <ul> <li>Connection tracking: Monitor all outbound connection attempts</li> <li>DNS context: Link IPs to domain names for threat analysis</li> <li>Pattern detection: Identify unusual connection behavior</li> <li>Endpoint verification: Validate connection destinations</li> </ul>"},{"location":"docs/events/builtin/man/misc/net_tcp_connect/#related-events","title":"RELATED EVENTS","text":"<ul> <li>net_flow_tcp_begin: Network flow-based connection tracking</li> <li>security_socket_connect: Low-level socket connection events</li> <li>net_packet_tcp: TCP packet capture events</li> <li>net_packet_dns: DNS packet analysis events</li> </ul>"},{"location":"docs/events/builtin/man/misc/process_execute_failed/","title":"TRACEE-PROCESS-EXECUTE-FAILED","text":""},{"location":"docs/events/builtin/man/misc/process_execute_failed/#name","title":"NAME","text":"<p>process_execute_failed - a failed process execution occurred</p>"},{"location":"docs/events/builtin/man/misc/process_execute_failed/#description","title":"DESCRIPTION","text":"<p>A high-level event that captures process execution failures, providing detailed information about the failed execution attempt including the binary path, interpreter details, and execution context. This event aims to encompass all failure cases of process execution while providing kernel-level execution arguments.</p> <p>The event provides comprehensive visibility into execution failures, which is crucial for debugging application issues, detecting security problems, and monitoring system behavior. It captures both user-space and kernel-initiated execution attempts.</p> <p>This event is useful for:</p> <ul> <li>Execution debugging: Track and analyze process execution failures</li> <li>Security monitoring: Detect failed execution attempts that might indicate attacks</li> <li>System diagnostics: Understand process execution issues</li> <li>Permission analysis: Monitor access control failures</li> </ul>"},{"location":"docs/events/builtin/man/misc/process_execute_failed/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/process_execute_failed/#data-fields","title":"DATA FIELDS","text":"<p>path (string) : The path to the file as provided by the user</p> <p>binary (object) : Binary execution details containing:   - path (string): The binary path being executed   - device_id (uint32): The device ID of the binary   - inode_number (uint64): The inode number of the binary   - ctime (uint64): The change time of the binary   - inode_mode (uint64): The inode mode of the binary</p> <p>interpreter_path (string) : The path to the interpreter used</p> <p>stdin_type (uint16) : The stdin type</p> <p>stdin_path (string) : The stdin path</p> <p>kernel_invoked (bool) : Whether this execution was initiated by the kernel</p> <p>environment ([]string) : The environment variables of this execution</p> <p>arguments ([]string) : The arguments of this execution</p>"},{"location":"docs/events/builtin/man/misc/process_execute_failed/#dependencies","title":"DEPENDENCIES","text":"<p>Kernel Version &gt;= 5.8:</p> <ul> <li>security_bprm_creds_for_exec (kprobe, required): Retrieve execution arguments</li> <li>sys_enter (tracepoint, required): Obtain execution return code</li> </ul> <p>Kernel Version &lt; 5.8:</p> <ul> <li>exec_binprm (kprobe + kretprobe, required): Retrieve execution arguments and return value</li> </ul>"},{"location":"docs/events/builtin/man/misc/process_execute_failed/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Application debugging: Identify why process executions are failing</p> </li> <li> <p>Security monitoring: Detect unauthorized execution attempts</p> </li> <li> <p>System diagnostics: Track execution failures for system health</p> </li> <li> <p>Permission analysis: Monitor access control and capability issues</p> </li> <li> <p>Configuration validation: Verify execution environment setup</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/process_execute_failed/#kernel-version-considerations","title":"KERNEL VERSION CONSIDERATIONS","text":"<p>The event behavior varies by kernel version:</p> <p>Kernel &gt;= 5.8: - Uses security_bprm_creds_for_exec hook - More comprehensive failure detection - Better execution context information</p> <p>Kernel &lt; 5.8: - Uses exec_binprm hook - Limited to failures within exec_binprm - May miss early-stage failures</p>"},{"location":"docs/events/builtin/man/misc/process_execute_failed/#limitations","title":"LIMITATIONS","text":"<ul> <li>Kernel &lt; 5.8: May miss failures occurring before exec_binprm</li> <li>Kernel &gt;= 5.8: May miss failures before security_bprm_creds_for_exec</li> <li>exec_binprm symbol: May not be available in some systems</li> <li>TOCTOU: Environment and arguments subject to race conditions</li> </ul>"},{"location":"docs/events/builtin/man/misc/process_execute_failed/#related-events","title":"RELATED EVENTS","text":"<ul> <li>execve: Process execution system call</li> <li>execveat: Extended process execution system call</li> <li>bprm_check: Binary format preparation check</li> <li>sched_process_exec: Successful process execution events</li> </ul>"},{"location":"docs/events/builtin/man/misc/sched_process_exec/","title":"TRACEE-SCHED-PROCESS-EXEC","text":""},{"location":"docs/events/builtin/man/misc/sched_process_exec/#name","title":"NAME","text":"<p>sched_process_exec - process execution scheduler event</p>"},{"location":"docs/events/builtin/man/misc/sched_process_exec/#description","title":"DESCRIPTION","text":"<p>Triggered when a new process is executed, capturing detailed information about the executed process through the kernel's scheduler tracepoint. This event provides comprehensive process execution details including binary information, interpreter details, arguments, environment variables, and execution context.</p> <p>This is a kernel-level tracepoint that fires whenever the scheduler handles process execution, providing more detailed information than the basic <code>execve</code> system call. It's particularly useful for understanding the complete execution context and metadata about executed programs.</p> <p>This event is useful for:</p> <ul> <li>Comprehensive process monitoring: Track detailed execution information including file metadata</li> <li>Security analysis: Monitor process execution with rich contextual information</li> <li>Binary analysis: Understand interpreter usage and executable characteristics</li> </ul>"},{"location":"docs/events/builtin/man/misc/sched_process_exec/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/sched_process_exec/#data-fields","title":"DATA FIELDS","text":"<p>cmdpath (string) : The path of the command being executed</p> <p>pathname (string) : Path to the executable binary</p> <p>dev (uint32) : Device number associated with the executable</p> <p>inode (uint64) : Inode number of the executable</p> <p>ctime (uint64) : Creation time of the executable</p> <p>inode_mode (uint16) : Mode of the inode for the executable (permissions and file type)</p> <p>interpreter_pathname (string) : Path of the interpreter for the executable (if applicable)</p> <p>interpreter_dev (uint32) : Device number associated with the interpreter</p> <p>interpreter_inode (uint64) : Inode number of the interpreter</p> <p>interpreter_ctime (uint64) : Creation time of the interpreter</p> <p>argv ([]string) : Array of arguments passed to the binary during execution</p> <p>interp (string) : Specifies the interpreter of the binary (from shebang line)</p> <p>stdin_type (uint16) : Mode of the standard input (file type and permissions)</p> <p>stdin_path (string) : Path of the standard input source</p> <p>invoked_from_kernel (bool) : Flag indicating if the process was initiated by the kernel</p> <p>env ([]string) : Environment variables associated with the process</p>"},{"location":"docs/events/builtin/man/misc/sched_process_exec/#dependencies","title":"DEPENDENCIES","text":"<p>Kernel Tracepoint:</p> <ul> <li>sched_process_exec (required): Raw tracepoint in the kernel scheduler</li> </ul>"},{"location":"docs/events/builtin/man/misc/sched_process_exec/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Comprehensive tracking of process execution with metadata</p> </li> <li> <p>Digital forensics: Detailed process execution analysis with file system context</p> </li> <li> <p>Compliance auditing: Complete audit trail of executed programs and their context</p> </li> <li> <p>Malware analysis: Understanding execution patterns and binary characteristics</p> </li> <li> <p>Performance analysis: Monitoring process creation overhead and patterns</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/sched_process_exec/#execution-context","title":"EXECUTION CONTEXT","text":"<p>This event captures execution at the scheduler level, providing:</p> <p>Binary Information: - Complete file system metadata (device, inode, timestamps) - File permissions and type information - Path resolution and location details</p> <p>Interpreter Details: - Script interpreter information from shebang lines - Interpreter binary metadata and location - Multi-level interpretation chains</p> <p>Execution Environment: - Complete command line arguments - Full environment variable set - Standard I/O configuration and sources</p>"},{"location":"docs/events/builtin/man/misc/sched_process_exec/#kernel-vs-user-execution","title":"KERNEL VS USER EXECUTION","text":"<p>The <code>invoked_from_kernel</code> field distinguishes between:</p> <p>Kernel-initiated processes: - Kernel threads and workers - System-initiated tasks and helpers - Device drivers and subsystem processes</p> <p>User-initiated processes: - User commands and applications - Shell-launched programs - Application-spawned child processes</p>"},{"location":"docs/events/builtin/man/misc/sched_process_exec/#interpreter-handling","title":"INTERPRETER HANDLING","text":"<p>Special handling for interpreted programs:</p> <p>Script Execution: - Shebang (#!) line parsing and interpreter identification - Interpreter binary location and metadata - Script vs binary execution distinction</p> <p>Dynamic Linking: - Dynamic linker/loader information - Shared library resolution context - Runtime loading characteristics</p>"},{"location":"docs/events/builtin/man/misc/sched_process_exec/#stdin-analysis","title":"STDIN ANALYSIS","text":"<p>Standard input source tracking:</p> <p>Input Types: - Terminal/TTY input for interactive programs - File redirection sources - Pipe and socket input sources - Device input (e.g., /dev/null, /dev/zero)</p>"},{"location":"docs/events/builtin/man/misc/sched_process_exec/#performance-considerations","title":"PERFORMANCE CONSIDERATIONS","text":"<p>This event provides extensive information but may impact performance:</p> <p>High Overhead Scenarios: - Systems with frequent process creation - Container environments with many short-lived processes - Build systems and CI/CD pipelines</p> <p>Optimization Strategies: - Filter by specific processes or paths when possible - Use sampling for high-frequency environments - Consider selective field collection</p>"},{"location":"docs/events/builtin/man/misc/sched_process_exec/#security-analysis","title":"SECURITY ANALYSIS","text":"<p>Rich context enables sophisticated security analysis:</p> <p>Anomaly Detection: - Unusual execution patterns or locations - Unexpected interpreter usage - Abnormal argument or environment patterns</p> <p>Threat Hunting: - Malware execution characteristics - Living-off-the-land technique detection - Supply chain compromise indicators</p>"},{"location":"docs/events/builtin/man/misc/sched_process_exec/#related-events","title":"RELATED EVENTS","text":"<ul> <li>execve: System call level process execution</li> <li>sched_process_fork: Process creation scheduler event</li> <li>sched_process_exit: Process termination scheduler event</li> <li>security_bprm_check: LSM hook for executable security validation</li> </ul>"},{"location":"docs/events/builtin/man/misc/set_fs_pwd/","title":"TRACEE-SET-FS-PWD","text":""},{"location":"docs/events/builtin/man/misc/set_fs_pwd/#name","title":"NAME","text":"<p>set_fs_pwd - track changes to the current working directory</p>"},{"location":"docs/events/builtin/man/misc/set_fs_pwd/#description","title":"DESCRIPTION","text":"<p>This event captures changes to the current working directory (typically through <code>chdir</code> and <code>fchdir</code> syscalls). It provides both the user-supplied path and the fully resolved filesystem path, helping track directory traversal and potential path manipulation attempts.</p> <p>This event is useful for:</p> <ul> <li>Process monitoring: Track directory changes of processes</li> <li>Security auditing: Monitor for suspicious directory access</li> <li>Debugging: Troubleshoot path-related issues</li> <li>Compliance: Track file system access patterns</li> </ul>"},{"location":"docs/events/builtin/man/misc/set_fs_pwd/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/set_fs_pwd/#data-fields","title":"DATA FIELDS","text":"<p>unresolved_path (string) : The unresolved, user-supplied path for the directory change. This may contain relative paths, symlinks, or \"..\" components. Only available for changes using the <code>chdir</code> syscall.</p> <p>resolved_path (string) : The fully resolved filesystem path after all symlinks and relative components are resolved.</p>"},{"location":"docs/events/builtin/man/misc/set_fs_pwd/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>set_fs_pwd</code>: Kernel probe to catch changes to the current working directory</li> </ul>"},{"location":"docs/events/builtin/man/misc/set_fs_pwd/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Directory traversal detection: Monitor for suspicious path traversal patterns</p> </li> <li> <p>Access auditing: Track which directories processes are accessing</p> </li> <li> <p>Symlink resolution: Understand the relationship between user-provided and resolved paths</p> </li> <li> <p>Process behavior analysis: Map process directory access patterns</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/set_fs_pwd/#implementation-notes","title":"IMPLEMENTATION NOTES","text":"<p>The event uses a kprobe on the kernel's <code>set_fs_pwd</code> function to capture directory changes. This provides visibility into:</p> <ul> <li>Direct directory changes via <code>chdir</code></li> <li>File descriptor-based changes via <code>fchdir</code></li> <li>Relative vs absolute path resolution</li> <li>Symlink traversal</li> </ul>"},{"location":"docs/events/builtin/man/misc/set_fs_pwd/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Directory changes can indicate:</p> <ul> <li>Privilege escalation attempts through path traversal</li> <li>Data exfiltration via sensitive directory access</li> <li>Malware persistence through specific directory targeting</li> <li>Evasion techniques using path manipulation</li> </ul>"},{"location":"docs/events/builtin/man/misc/set_fs_pwd/#related-events","title":"RELATED EVENTS","text":"<ul> <li>chdir: System call for changing directories</li> <li>fchdir: File descriptor-based directory change</li> <li>file_modification: File operations in changed directories</li> <li>security_path_notify: Path-based security events</li> </ul>"},{"location":"docs/events/builtin/man/misc/symbols_collision/","title":"TRACEE-SYMBOLS-COLLISION","text":""},{"location":"docs/events/builtin/man/misc/symbols_collision/#name","title":"NAME","text":"<p>symbols_collision - detect symbol collisions between shared objects</p>"},{"location":"docs/events/builtin/man/misc/symbols_collision/#description","title":"DESCRIPTION","text":"<p>This event is triggered when a shared object is loaded into a process and has symbol collisions with another already-loaded shared object. A symbol collision occurs when two shared objects export the same symbol name, potentially leading to unexpected behavior or security issues.</p> <p>The event helps identify cases where a shared object might override symbols from another library, which could be either legitimate (e.g., symbol versioning) or malicious (e.g., library hijacking).</p> <p>This event is useful for:</p> <ul> <li>Library conflict detection: Identify symbol naming conflicts</li> <li>Security monitoring: Detect potential library hijacking</li> <li>Debugging: Troubleshoot symbol resolution issues</li> <li>Quality assurance: Verify library compatibility</li> </ul>"},{"location":"docs/events/builtin/man/misc/symbols_collision/#event-sets","title":"EVENT SETS","text":"<p>lsm_hooks, fs, fs_file_ops, proc, proc_mem</p>"},{"location":"docs/events/builtin/man/misc/symbols_collision/#data-fields","title":"DATA FIELDS","text":"<p>loaded_path (string) : The path of the newly loaded shared object file</p> <p>collision_path (string) : The path of the already-loaded shared object that has symbol collisions</p> <p>symbols ([]string) : List of symbol names that collide between the two shared objects</p>"},{"location":"docs/events/builtin/man/misc/symbols_collision/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>shared_object_loaded</code>: Provides information about loaded shared objects</li> <li><code>sched_process_exec</code>: Used for mount namespace cache and performance optimization</li> </ul>"},{"location":"docs/events/builtin/man/misc/symbols_collision/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Library hijacking detection: Identify attempts to override libc or other critical library functions</p> </li> <li> <p>Dependency analysis: Understand symbol conflicts in complex applications</p> </li> <li> <p>Security auditing: Monitor for unexpected symbol overrides</p> </li> <li> <p>Debug symbol resolution: Troubleshoot which library version is actually used</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/symbols_collision/#configuration","title":"CONFIGURATION","text":"<p>The event can be configured using data filtering:</p> <ul> <li>symbols: Specify which symbols to watch for collisions</li> <li>Uses <code>=</code> or <code>!=</code> operators</li> <li>No wildcard support</li> <li>Default watches all symbols</li> <li> <p>Example: <code>symbols_collision.data.symbols=malloc,free</code></p> </li> <li> <p>loaded_path/collision_path: Filter by specific libraries</p> </li> <li>Example: <code>symbols_collision.data.loaded_path=/usr/lib/libc.so.6</code></li> </ul>"},{"location":"docs/events/builtin/man/misc/symbols_collision/#implementation-notes","title":"IMPLEMENTATION NOTES","text":"<ul> <li>Implemented in user-mode for deep symbol analysis</li> <li>Uses caching to improve performance</li> <li>May have performance impact due to file operations</li> <li>Event size varies with number of collided symbols</li> <li>Race conditions possible between detection and file access</li> </ul>"},{"location":"docs/events/builtin/man/misc/symbols_collision/#common-patterns","title":"COMMON PATTERNS","text":"<p>Common legitimate collision scenarios:</p> <ul> <li>Standard library variations (e.g., libc and libm)</li> <li>Symbol versioning in newer library versions</li> <li>Intentional symbol overriding for compatibility</li> <li>Debug/profiling library instrumentation</li> </ul>"},{"location":"docs/events/builtin/man/misc/symbols_collision/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Symbol collisions can indicate:</p> <ul> <li>Library hijacking attempts</li> <li>Malicious symbol interposition</li> <li>Supply chain attacks</li> <li>Dynamic linker manipulation</li> </ul>"},{"location":"docs/events/builtin/man/misc/symbols_collision/#related-events","title":"RELATED EVENTS","text":"<ul> <li>shared_object_loaded: Track library loading</li> <li>symbols_loaded: Monitor symbol loading</li> <li>file_modification: Detect library file changes</li> <li>process_vm_write: Detect runtime symbol table modifications</li> </ul>"},{"location":"docs/events/builtin/man/misc/tracee_info/","title":"TRACEE-INFO","text":""},{"location":"docs/events/builtin/man/misc/tracee_info/#name","title":"NAME","text":"<p>tracee_info - export Tracee metadata and runtime information</p>"},{"location":"docs/events/builtin/man/misc/tracee_info/#description","title":"DESCRIPTION","text":"<p>This event is emitted during Tracee's initialization and is typically the first event generated. It provides essential metadata about Tracee's configuration and runtime environment, which is valuable for event processing, troubleshooting, and understanding the context of captured events.</p> <p>The event is particularly useful when working with Tracee's File Source feature, as it provides information about how Tracee was configured during the original capture.</p> <p>This event is useful for:</p> <ul> <li>Timing analysis: Calculate relative event timings</li> <li>Version tracking: Identify Tracee version for compatibility</li> <li>Troubleshooting: Understand runtime environment</li> <li>Event processing: Provide context for other events</li> </ul>"},{"location":"docs/events/builtin/man/misc/tracee_info/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/tracee_info/#data-fields","title":"DATA FIELDS","text":"<p>boot_time (uint64) : The system boot time relative to the Unix epoch</p> <p>start_time (time.Time) : The time when the Tracee process started, relative to system boot time</p> <p>version (string) : The version of Tracee that generated the events</p>"},{"location":"docs/events/builtin/man/misc/tracee_info/#dependencies","title":"DEPENDENCIES","text":"<p>This event has no dependencies as it is generated directly by Tracee during initialization.</p>"},{"location":"docs/events/builtin/man/misc/tracee_info/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Event timing: Calculate relative timestamps for other events</p> </li> <li> <p>Compatibility checking: Verify event stream compatibility with tools</p> </li> <li> <p>Troubleshooting: Identify environment-specific issues</p> </li> <li> <p>Audit logging: Record Tracee version and runtime context</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/tracee_info/#implementation-notes","title":"IMPLEMENTATION NOTES","text":"<ul> <li>Generated in user-mode during initialization</li> <li>Always the first event in an event stream</li> <li>Provides foundational context for event processing</li> <li>No kernel probes or special permissions required</li> </ul>"},{"location":"docs/events/builtin/man/misc/tracee_info/#examples","title":"EXAMPLES","text":"<p>The event can be used to calculate relative event timing: <pre><code>relative_time = event.timestamp - (tracee_info.boot_time + tracee_info.start_time)\n</code></pre></p>"},{"location":"docs/events/builtin/man/misc/tracee_info/#related-events","title":"RELATED EVENTS","text":"<ul> <li>init_namespaces: Namespace initialization information</li> <li>process_execute: Tracee process execution details</li> <li>process_init: Process initialization events</li> </ul>"},{"location":"docs/events/builtin/man/misc/vfs_read/","title":"TRACEE-VFS-READ","text":""},{"location":"docs/events/builtin/man/misc/vfs_read/#name","title":"NAME","text":"<p>vfs_read - generic filesystem file read operation</p>"},{"location":"docs/events/builtin/man/misc/vfs_read/#description","title":"DESCRIPTION","text":"<p>Triggered when a read operation from a file to a buffer is performed through the Virtual File System (VFS) layer. This event captures file read operations at the kernel VFS level, providing filesystem-agnostic monitoring of read operations.</p> <p>The event hooks into the inner implementation of <code>read</code> and other buffer read syscalls after file descriptor resolution, offering detailed information about file access patterns and data consumption.</p> <p>This event is useful for:</p> <ul> <li>File access monitoring: Track file read operations across all filesystems</li> <li>Security analysis: Monitor sensitive file access patterns</li> <li>Performance analysis: Analyze I/O patterns and performance characteristics</li> <li>Data flow tracking: Understand how applications consume file data</li> </ul>"},{"location":"docs/events/builtin/man/misc/vfs_read/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/vfs_read/#data-fields","title":"DATA FIELDS","text":"<p>pathname (string) : The path of the file being read</p> <p>dev (uint32) : The device identifier where the file resides</p> <p>inode (uint64) : The inode number of the file on the device</p> <p>count (uint64) : The number of bytes requested to be read</p> <p>pos (uint64) : The file position offset where the read operation starts</p>"},{"location":"docs/events/builtin/man/misc/vfs_read/#dependencies","title":"DEPENDENCIES","text":"<p>Kernel Probes:</p> <ul> <li>vfs_read (kprobe + kretprobe, required): VFS layer read implementation hook</li> </ul>"},{"location":"docs/events/builtin/man/misc/vfs_read/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Track access to sensitive files and configuration data</p> </li> <li> <p>Performance analysis: Monitor I/O patterns and identify performance bottlenecks</p> </li> <li> <p>Data leakage prevention: Detect unusual file read patterns that might indicate data exfiltration</p> </li> <li> <p>System auditing: Monitor file access for compliance and forensic analysis</p> </li> <li> <p>Application behavior analysis: Understand how applications consume file data</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/vfs_read/#implementation-notes","title":"IMPLEMENTATION NOTES","text":"<ul> <li>Filesystem agnostic: Works across all filesystem types (ext4, xfs, nfs, etc.)</li> <li>VFS level monitoring: Captures reads after file descriptor resolution</li> <li>Alternative methods: Note that files can be read through other methods like <code>vfs_readv</code>, memory mapping, and direct I/O</li> </ul>"},{"location":"docs/events/builtin/man/misc/vfs_read/#limitations","title":"LIMITATIONS","text":"<p>This event does not capture: - Memory-mapped file access - Direct I/O operations that bypass VFS - Other read methods like <code>vfs_readv</code> (vectorized reads)</p>"},{"location":"docs/events/builtin/man/misc/vfs_read/#related-events","title":"RELATED EVENTS","text":"<ul> <li>vfs_write: Virtual filesystem write operations</li> <li>vfs_readv: Vectorized read operations</li> <li>read: Read system call events</li> <li>file_modification: File modification detection events</li> </ul>"},{"location":"docs/events/builtin/man/misc/vfs_readv/","title":"TRACEE-VFS-READV","text":""},{"location":"docs/events/builtin/man/misc/vfs_readv/#name","title":"NAME","text":"<p>vfs_readv - track vectored reads from the virtual filesystem</p>"},{"location":"docs/events/builtin/man/misc/vfs_readv/#description","title":"DESCRIPTION","text":"<p>This event captures read operations from files using the vectored I/O interface (readv). It is triggered by the VFS (Virtual File System) layer implementation of <code>readv</code>, <code>preadv</code>, and <code>preadv2</code> system calls after file descriptor resolution.</p> <p>The event provides information about the file being read, including its path and location in the filesystem, as well as details about the read operation such as the number of buffers and read position.</p> <p>This event is useful for:</p> <ul> <li>I/O monitoring: Track file read patterns</li> <li>Performance analysis: Understand vectored I/O usage</li> <li>Security monitoring: Audit file access</li> <li>Debugging: Troubleshoot I/O issues</li> </ul>"},{"location":"docs/events/builtin/man/misc/vfs_readv/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/misc/vfs_readv/#data-fields","title":"DATA FIELDS","text":"<p>pathname (string) : The path of the file being read</p> <p>dev (uint32) : The device ID where the file resides</p> <p>inode (uint64) : The inode number of the file on the device</p> <p>vlen (uint64) : The number of buffers in the I/O vector for this read operation</p> <p>pos (int64) : The file offset where the read operation starts</p>"},{"location":"docs/events/builtin/man/misc/vfs_readv/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>vfs_readv</code>: Kernel probe on the VFS readv implementation</li> <li><code>vfs_readv_ret</code>: Return probe for operation completion</li> </ul>"},{"location":"docs/events/builtin/man/misc/vfs_readv/#use-cases","title":"USE CASES","text":"<ul> <li> <p>I/O pattern analysis: Understand how applications use vectored I/O</p> </li> <li> <p>Performance optimization: Identify inefficient read patterns</p> </li> <li> <p>Security monitoring: Track sensitive file access</p> </li> <li> <p>Debugging: Diagnose file read issues</p> </li> </ul>"},{"location":"docs/events/builtin/man/misc/vfs_readv/#implementation-notes","title":"IMPLEMENTATION NOTES","text":"<ul> <li>Triggered by the VFS layer, independent of specific filesystems</li> <li>Captures vectored reads from <code>readv</code>, <code>preadv</code>, and <code>preadv2</code> syscalls</li> <li>Does not capture other read methods like <code>read</code>, memory mapping, etc.</li> <li>Uses both entry and return probes for complete operation tracking</li> </ul>"},{"location":"docs/events/builtin/man/misc/vfs_readv/#file-access-methods","title":"FILE ACCESS METHODS","text":"<p>Common file read methods in Linux:</p> <ul> <li>read: Single buffer read</li> <li>readv: Vectored I/O (this event)</li> <li>pread/preadv: Positioned reads</li> <li>mmap: Memory-mapped I/O</li> <li>sendfile: Direct file-to-file transfer</li> </ul>"},{"location":"docs/events/builtin/man/misc/vfs_readv/#related-events","title":"RELATED EVENTS","text":"<ul> <li>vfs_read: Single buffer read operations</li> <li>vfs_writev: Vectored write operations</li> <li>readv: System call for vectored reads</li> <li>preadv: Positioned vectored reads</li> </ul>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_begin/","title":"TRACEE-NET-FLOW-TCP-BEGIN","text":""},{"location":"docs/events/builtin/man/network/net_flow_tcp_begin/#name","title":"NAME","text":"<p>net_flow_tcp_begin - TCP connection initiation detected</p>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_begin/#description","title":"DESCRIPTION","text":"<p>Triggered when a TCP connection is initiated, derived from raw network events captured by cgroup skb eBPF programs. This event monitors the TCP protocol's initiation phase by analyzing IP and TCP headers, specifically focusing on SYN, ACK, and FIN flag statuses to identify the start of TCP communication flows.</p> <p>The event leverages kernel-level packet capture to provide critical data for network monitoring and security analysis, offering visibility into TCP connection establishment patterns.</p> <p>This event is useful for:</p> <ul> <li>Network monitoring: Track TCP connection initiation patterns</li> <li>Security analysis: Detect unauthorized communication attempts</li> <li>Performance monitoring: Analyze network flow characteristics</li> <li>Traffic analysis: Monitor connection establishment patterns</li> </ul>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_begin/#event-sets","title":"EVENT SETS","text":"<p>network_events, flows</p>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_begin/#data-fields","title":"DATA FIELDS","text":"<p>conn_direction (string) : Connection direction classified as 'incoming' or 'outgoing' based on packet direction and SYN flag status</p> <p>src (string) : Source IP address extracted from the IP header</p> <p>dst (string) : Destination IP address from the IP header</p> <p>src_port (uint16) : Source port from the TCP header</p> <p>dst_port (uint16) : Destination port from the TCP header</p> <p>src_dns ([]string) : Domain names related to the source IP, resolved through DNS cache</p> <p>dst_dns ([]string) : Domain names associated with the destination IP, resolved via DNS cache</p>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_begin/#dependencies","title":"DEPENDENCIES","text":"<p>Event Dependencies:</p> <ul> <li>net_packet_flow_base: Base network packet flow event for network packet capture</li> </ul>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_begin/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Network security monitoring: Detect unusual connection patterns or unauthorized communications</p> </li> <li> <p>Traffic analysis: Monitor TCP connection establishment trends</p> </li> <li> <p>Performance monitoring: Analyze connection initiation latency and patterns</p> </li> <li> <p>Incident response: Track network communication during security incidents</p> </li> <li> <p>Compliance monitoring: Ensure network communications follow policy</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_begin/#implementation-details","title":"IMPLEMENTATION DETAILS","text":"<p>The event uses sophisticated packet capture mechanisms:</p> <ul> <li>Flag Analysis: Monitors SYN, ACK, and FIN flags for connection state detection</li> <li>Low Overhead: Optimized for minimal system impact during high-traffic scenarios</li> <li>Header Parsing: Efficiently extracts IP and TCP header information</li> <li>DNS Integration: Correlates IP addresses with domain names when available</li> </ul>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_begin/#performance-considerations","title":"PERFORMANCE CONSIDERATIONS","text":"<p>Event efficiency depends on:</p> <ul> <li>Network traffic volume</li> <li>Complexity of monitored TCP flows</li> <li>System resources and configuration</li> <li>Proper data management and analysis</li> </ul>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_begin/#related-events","title":"RELATED EVENTS","text":"<ul> <li>net_tcp_connect: Similar event based on security_socket_connect calls</li> <li>net_flow_tcp_end: TCP connection termination events</li> <li>security_socket_connect: Socket connection security events</li> <li>net_packet_tcp: Individual TCP packet capture events</li> </ul>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_end/","title":"net_flow_tcp_end(1)","text":""},{"location":"docs/events/builtin/man/network/net_flow_tcp_end/#name","title":"NAME","text":"<p>net_flow_tcp_end - Event for monitoring the termination of TCP flows</p>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_end/#description","title":"DESCRIPTION","text":"<p>The net_flow_tcp_end event is derived from base network raw events and is designed to monitor the termination of TCP flows. It leverages cgroup skb eBPF programs, focusing specifically on the TCP protocol's termination phase, and is instrumental in analyzing IP and TCP headers data to detect the end of TCP connections.</p> <p>The event utilizes cgroup skb eBPF programs to intercept and analyze raw network events at the kernel level, with a particular emphasis on the TCP protocol's termination phase. It processes IP and TCP headers to pinpoint the conclusion of TCP communication flows. The event identifies the termination of TCP connections by analyzing the status of TCP flags, primarily focusing on the FIN and RST flags.</p> <p>By examining these flags, the event provides valuable insights into the end of TCP connections, a critical component for comprehensive network monitoring and security analysis.</p>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_end/#event-sets","title":"EVENT SETS","text":"<p>network_events, flows</p>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_end/#data-fields","title":"DATA FIELDS","text":"<p>conn_direction (string) : Indicates whether the terminated connection was 'incoming' or 'outgoing'</p> <p>src (string) : The source IP address, extracted from the IP header, from the side terminating the connection</p> <p>dst (string) : The destination IP address, obtained from the IP header, of the side receiving the termination</p> <p>src_port (uint16) : The source port number, derived from the TCP header</p> <p>dst_port (uint16) : The destination port number, ascertained from the TCP header</p> <p>src_dns ([]string) : Associated domain names for the source IP, resolved using DNS cache</p> <p>dst_dns ([]string) : Related domain names for the destination IP, determined through DNS cache</p>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_end/#dependencies","title":"DEPENDENCIES","text":"<p>Event Dependencies:</p> <ul> <li>net_packet_flow_base: Base network packet flow event for network packet capture</li> </ul>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_end/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Network Monitoring: Monitor the termination of TCP connections for network security and performance analysis</p> </li> <li> <p>Security Analysis: Detect unusual traffic patterns, potential security threats, or abrupt end of communication</p> </li> <li> <p>Connection Tracking: Track the lifecycle of TCP connections from establishment to termination</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_end/#related-events","title":"RELATED EVENTS","text":"<ul> <li> <p>net_flow_tcp_begin: Event for monitoring the beginning of TCP flows</p> </li> <li> <p>net_packet_tcp: TCP packet capture events</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_flow_tcp_end/#performance-considerations","title":"PERFORMANCE CONSIDERATIONS","text":"<p>While designed to minimize system overhead, performance may vary based on the volume of network traffic and the complexity of monitored TCP flows. Efficient data management and analysis are key to leveraging the full potential of this event without affecting system performance adversely.</p>"},{"location":"docs/events/builtin/man/network/net_packet_dns/","title":"TRACEE-NET-PACKET-DNS","text":""},{"location":"docs/events/builtin/man/network/net_packet_dns/#name","title":"NAME","text":"<p>net_packet_dns - capture and analyze DNS network packets</p>"},{"location":"docs/events/builtin/man/network/net_packet_dns/#description","title":"DESCRIPTION","text":"<p>Triggered for each DNS packet that reaches or leaves one of the processes being traced. This event provides detailed information about DNS queries and responses, including all DNS header fields and resource records, enabling comprehensive DNS traffic analysis.</p> <p>The Domain Name System (DNS) is fundamental to Internet operations, translating human-readable domain names into IP addresses. This event captures the complete DNS protocol exchange for monitoring, security analysis, and troubleshooting.</p> <p>This event is useful for:</p> <ul> <li>DNS monitoring: Track domain name resolution patterns</li> <li>Security analysis: Detect DNS-based attacks and malicious domains</li> <li>Network troubleshooting: Debug DNS resolution issues</li> <li>Traffic analysis: Monitor DNS query patterns and performance</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns/#event-sets","title":"EVENT SETS","text":"<p>network_events</p>"},{"location":"docs/events/builtin/man/network/net_packet_dns/#data-fields","title":"DATA FIELDS","text":"<p>metadata (trace.PacketMetadata) : Network packet metadata containing:   - Source IP address   - Destination IP address   - Source port number (typically 53 for DNS servers)   - Destination port number (typically 53 for DNS)   - Network protocol   - Packet length   - Network interface</p> <p>proto_dns (trace.ProtoDNS) : DNS protocol information containing:   - ID (uint16): Transaction ID for matching queries to responses   - QR (uint8): Query (0) or Response (1) flag   - opCode (string): Operation code (e.g., \"query\", \"iquery\", \"status\")   - AA (uint8): Authoritative Answer flag   - TC (uint8): Truncation flag   - RD (uint8): Recursion Desired flag   - RA (uint8): Recursion Available flag   - Z (uint8): Reserved field   - responseCode (string): Response code (e.g., \"no error\", \"name error\")   - QDCount (uint16): Number of questions   - ANCount (uint16): Number of answer records   - NSCount (uint16): Number of authority records   - ARCount (uint16): Number of additional records   - questions ([]DNSQuestion): DNS questions with name, type, and class   - answers ([]DNSResourceRecord): DNS answer records   - authorities ([]DNSResourceRecord): DNS authority records   - additionals ([]DNSResourceRecord): DNS additional records</p>"},{"location":"docs/events/builtin/man/network/net_packet_dns/#dependencies","title":"DEPENDENCIES","text":"<p>Event Dependencies:</p> <ul> <li>net_packet_dns_base: Base DNS packet capture event for network packet parsing</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Detect DNS tunneling, DGA domains, and malicious DNS traffic</p> </li> <li> <p>Network analysis: Monitor DNS resolution patterns and performance</p> </li> <li> <p>Troubleshooting: Debug DNS resolution failures and timeouts</p> </li> <li> <p>Compliance monitoring: Track DNS queries for policy compliance</p> </li> <li> <p>Threat hunting: Identify suspicious domain resolution patterns</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns/#dns-record-types","title":"DNS RECORD TYPES","text":"<p>Common DNS record types captured:</p> <ul> <li>A: IPv4 address records</li> <li>AAAA: IPv6 address records</li> <li>CNAME: Canonical name records</li> <li>MX: Mail exchange records</li> <li>NS: Name server records</li> <li>PTR: Pointer records for reverse lookups</li> <li>SOA: Start of authority records</li> <li>TXT: Text records</li> <li>SRV: Service records</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns/#dns-flags","title":"DNS FLAGS","text":"<p>Important DNS header flags:</p> <ul> <li>QR: Distinguishes queries from responses</li> <li>AA: Indicates authoritative responses</li> <li>TC: Signals truncated messages</li> <li>RD: Requests recursive resolution</li> <li>RA: Indicates recursive resolution support</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns/#related-events","title":"RELATED EVENTS","text":"<ul> <li>net_packet_udp: UDP packet capture (DNS typically uses UDP)</li> <li>net_packet_tcp: TCP packet capture (DNS over TCP for large responses)</li> <li>net_packet_dns_request: DNS query-specific events</li> <li>net_packet_dns_response: DNS response-specific events</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns_request/","title":"net_packet_dns_request(1)","text":""},{"location":"docs/events/builtin/man/network/net_packet_dns_request/#name","title":"NAME","text":"<p>net_packet_dns_request - DNS request packet capture event</p>"},{"location":"docs/events/builtin/man/network/net_packet_dns_request/#description","title":"DESCRIPTION","text":"<p>The net_packet_dns_request event shows DNS queries only. It provides one event for each existing DNS packet containing a query that reaches or leaves one of the processes being traced (or all OS processes for the default run).</p> <p>DNS queries come in various types, each serving a specific purpose in the domain name resolution process or in retrieving information from DNS servers. Common types include:</p> <ul> <li>Standard Query (A or AAAA): Requests IPv4 (A) or IPv6 (AAAA) address for a domain name</li> <li>Inverse Query (PTR): Provides an IP address and asks for the associated domain name</li> <li>Mail Exchange Query (MX): Retrieves mail exchange servers for a specific domain</li> <li>Name Server Query (NS): Discovers authoritative name servers for a domain</li> <li>Start of Authority Query (SOA): Retrieves SOA record containing essential domain information</li> <li>Service Query (SRV): Locates services associated with a specific domain</li> <li>Text Query (TXT): Retrieves text-based information associated with a domain</li> <li>Canonical Name Query (CNAME): Finds the canonical name of an alias domain</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns_request/#event-sets","title":"EVENT SETS","text":"<p>This event is included in the following event sets:</p> <ul> <li>network_events: Network-related events</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns_request/#data-fields","title":"DATA FIELDS","text":"<p>metadata (trace.PacketMetadata) : Network packet metadata containing:   - Source IP address   - Destination IP address   - Source port number   - Destination port number   - Network protocol (typically UDP/17 for DNS)   - Packet length   - Network interface</p> <p>dns_questions ([]trace.DnsQueryData) : Array of DNS query data containing:   - Domain name being queried   - Type of DNS query (A, AAAA, MX, etc.)   - Query class (typically \"IN\" for Internet)</p>"},{"location":"docs/events/builtin/man/network/net_packet_dns_request/#dependencies","title":"DEPENDENCIES","text":"<p>Event Dependencies:</p> <ul> <li>net_packet_dns_base: Base DNS packet capture event for network packet parsing</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns_request/#use-cases","title":"USE CASES","text":"<ul> <li> <p>DNS Monitoring: Track all DNS queries made by processes for security analysis</p> </li> <li> <p>Network Forensics: Analyze DNS query patterns to identify malicious domains</p> </li> <li> <p>Performance Analysis: Monitor DNS query frequency and response patterns</p> </li> <li> <p>Security Detection: Detect DNS tunneling, exfiltration, or C&amp;C communication</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns_request/#related-events","title":"RELATED EVENTS","text":"<ul> <li> <p>net_packet_dns: General DNS packet events (both requests and responses)</p> </li> <li> <p>net_packet_dns_response: DNS response packet events</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns_request/#example","title":"EXAMPLE","text":"<pre><code>$ tracee --output json --events net_packet_dns_request\n</code></pre> <p>The event captures DNS queries with detailed metadata about the network packet and the specific DNS question being asked.</p>"},{"location":"docs/events/builtin/man/network/net_packet_dns_response/","title":"TRACEE-NET-PACKET-DNS-RESPONSE","text":""},{"location":"docs/events/builtin/man/network/net_packet_dns_response/#name","title":"NAME","text":"<p>net_packet_dns_response - capture DNS response packets</p>"},{"location":"docs/events/builtin/man/network/net_packet_dns_response/#description","title":"DESCRIPTION","text":"<p>This event captures DNS response packets in the network traffic. DNS (Domain Name System) responses contain answers to DNS queries, providing information like IP addresses, mail server records, or other DNS resource records. The event provides detailed information about both the network metadata and the DNS response content.</p> <p>The event is particularly useful for: - Network traffic monitoring - DNS resolution tracking - Security analysis - Protocol debugging</p>"},{"location":"docs/events/builtin/man/network/net_packet_dns_response/#event-sets","title":"EVENT SETS","text":"<p>default, network_events</p>"},{"location":"docs/events/builtin/man/network/net_packet_dns_response/#data-fields","title":"DATA FIELDS","text":"<p>metadata (trace.PktMeta) : Network packet metadata containing:   - src_ip (string): Source IP address   - dst_ip (string): Destination IP address   - src_port (uint16): Source port number   - dst_port (uint16): Destination port number   - protocol (uint8): IP protocol number   - packet_len (uint32): Packet length   - iface (string): Network interface</p> <p>dns_response ([]trace.DnsResponseData) : DNS response data containing:   - query_data: Original query information     - query (string): Queried domain name     - query_type (string): Query type (A, AAAA, MX, etc.)     - query_class (string): Query class (usually IN)   - dns_answer: Array of answers     - answer_type (string): Type of answer (A, CNAME, etc.)     - ttl (uint32): Time to live value     - answer (string): Answer data</p>"},{"location":"docs/events/builtin/man/network/net_packet_dns_response/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>net_packet_dns_base</code>: Base DNS packet processing</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns_response/#use-cases","title":"USE CASES","text":"<ul> <li> <p>DNS monitoring: Track domain resolutions</p> </li> <li> <p>Network debugging: Diagnose DNS issues</p> </li> <li> <p>Security analysis: Detect DNS-based threats</p> </li> <li> <p>Traffic analysis: Understand DNS patterns</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns_response/#dns-response-types","title":"DNS RESPONSE TYPES","text":"<p>Common response types include:</p> <ul> <li>A/AAAA: IPv4/IPv6 addresses</li> <li>CNAME: Canonical names</li> <li>MX: Mail exchange servers</li> <li>NS: Name servers</li> <li>PTR: Reverse DNS lookups</li> <li>SOA: Start of authority</li> <li>TXT: Text records</li> <li>SRV: Service records</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns_response/#response-components","title":"RESPONSE COMPONENTS","text":"<p>Key response elements:</p> <ul> <li>Answer section: Contains resource records</li> <li>Authority section: Authoritative nameservers</li> <li>Additional section: Extra information</li> <li>Response codes: Success/error status</li> <li>Flags: Various control flags</li> <li>TTL values: Cache duration</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns_response/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Important security aspects:</p> <ul> <li>DNS tunneling detection</li> <li>Domain generation algorithms</li> <li>DNS-based malware C2</li> <li>Cache poisoning attempts</li> <li>DNS hijacking</li> <li>Zone transfer attempts</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_dns_response/#related-events","title":"RELATED EVENTS","text":"<ul> <li>net_packet_dns: General DNS packet events</li> <li>net_packet_dns_request: DNS query packets</li> <li>net_packet_ip: IP packet events</li> <li>net_packet_tcp: TCP packet events</li> <li>net_packet_udp: UDP packet events</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http/","title":"TRACEE-NET-PACKET-HTTP","text":""},{"location":"docs/events/builtin/man/network/net_packet_http/#name","title":"NAME","text":"<p>net_packet_http - capture HTTP packet traffic</p>"},{"location":"docs/events/builtin/man/network/net_packet_http/#description","title":"DESCRIPTION","text":"<p>This event captures HTTP (Hypertext Transfer Protocol) packets in the network traffic. HTTP is the foundation of data communication on the World Wide Web, used for transmitting web pages, APIs, and other web resources. The event provides detailed information about both HTTP requests and responses, including headers, methods, status codes, and metadata.</p> <p>The event captures both incoming and outgoing HTTP traffic, making it valuable for monitoring web traffic, debugging applications, and detecting security issues.</p>"},{"location":"docs/events/builtin/man/network/net_packet_http/#event-sets","title":"EVENT SETS","text":"<p>network_events</p>"},{"location":"docs/events/builtin/man/network/net_packet_http/#data-fields","title":"DATA FIELDS","text":"<p>src (string) : Source IP address</p> <p>dst (string) : Destination IP address</p> <p>src_port (uint16) : Source port number</p> <p>dst_port (uint16) : Destination port number</p> <p>metadata (trace.PacketMetadata) : Additional packet metadata</p> <p>proto_http (trace.ProtoHTTP) : HTTP protocol information containing:   - direction (string): \"request\" or \"response\"   - method (string): HTTP method (GET, POST, etc.)   - protocol (string): Protocol version   - host (string): Target host   - uri_path (string): Request URI path   - status (string): Response status text   - status_code (int): Response status code   - headers (map[string][]string): HTTP headers   - content_length (int64): Content length</p>"},{"location":"docs/events/builtin/man/network/net_packet_http/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>net_packet_http_base</code>: Base HTTP packet processing</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Web traffic monitoring: Track HTTP communications</p> </li> <li> <p>Application debugging: Diagnose HTTP issues</p> </li> <li> <p>Security analysis: Detect web-based threats</p> </li> <li> <p>Performance monitoring: Track response times</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http/#http-methods","title":"HTTP METHODS","text":"<p>Common HTTP methods:</p> <ul> <li>GET: Retrieve resources</li> <li>POST: Submit data</li> <li>PUT: Update resources</li> <li>DELETE: Remove resources</li> <li>HEAD: Get headers only</li> <li>OPTIONS: Get capabilities</li> <li>PATCH: Partial updates</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http/#request-components","title":"REQUEST COMPONENTS","text":"<p>Key request elements:</p> <ul> <li>Method: Action to perform</li> <li>URI: Resource identifier</li> <li>Headers: Metadata fields</li> <li>Query parameters: URL parameters</li> <li>Body: Request payload</li> <li>Cookies: Session data</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http/#response-components","title":"RESPONSE COMPONENTS","text":"<p>Key response elements:</p> <ul> <li>Status code: Result indicator</li> <li>Headers: Metadata fields</li> <li>Body: Response content</li> <li>Content type: Data format</li> <li>Cookies: Session updates</li> <li>Cache control: Caching directives</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Important security aspects:</p> <ul> <li>Sensitive data exposure: Clear text transmission</li> <li>Authentication tokens: Session management</li> <li>Input validation: Request parameters</li> <li>Response headers: Security controls</li> <li>Error messages: Information disclosure</li> <li>HTTP methods: Access control</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http/#related-events","title":"RELATED EVENTS","text":"<ul> <li>net_packet_http_request: HTTP request events</li> <li>net_packet_http_response: HTTP response events</li> <li>net_packet_tcp: TCP packet events</li> <li>net_packet_dns: DNS resolution events</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_request/","title":"TRACEE-NET-PACKET-HTTP-REQUEST","text":""},{"location":"docs/events/builtin/man/network/net_packet_http_request/#name","title":"NAME","text":"<p>net_packet_http_request - capture and analyze HTTP request packets</p>"},{"location":"docs/events/builtin/man/network/net_packet_http_request/#description","title":"DESCRIPTION","text":"<p>Triggered for each HTTP request packet that reaches or leaves one of the processes being traced. This event provides detailed information about HTTP requests, including headers, URI paths, methods, and metadata, enabling comprehensive web traffic analysis and security monitoring.</p> <p>HTTP requests are fundamental to web communications, sent by clients (browsers, applications) to servers to retrieve resources, submit data, or interact with web services. Monitoring these requests provides insights into application behavior, security threats, and network performance.</p> <p>This event is useful for:</p> <ul> <li>Web security monitoring: Detect malicious HTTP requests and attacks</li> <li>Application monitoring: Track web application behavior and API usage</li> <li>Network analysis: Monitor HTTP traffic patterns and performance</li> <li>Compliance auditing: Monitor web traffic for policy compliance</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_request/#event-sets","title":"EVENT SETS","text":"<p>network_events</p>"},{"location":"docs/events/builtin/man/network/net_packet_http_request/#data-fields","title":"DATA FIELDS","text":"<p>metadata (trace.PacketMetadata) : Packet metadata containing:   - Source IP address   - Destination IP address   - Source port number   - Destination port number   - Protocol number (typically 6 for TCP)   - Total packet length   - Network interface name</p> <p>proto_http (trace.ProtoHTTP) : HTTP request information containing:   - method (string): HTTP method (GET, POST, PUT, DELETE, etc.)   - protocol (string): HTTP protocol version (HTTP/1.1, HTTP/2, etc.)   - host (string): Target host from Host header   - uri_path (string): Requested URI path   - headers (map[string]string): HTTP headers as key-value pairs   - content_length (uint64): Length of request body content</p>"},{"location":"docs/events/builtin/man/network/net_packet_http_request/#dependencies","title":"DEPENDENCIES","text":"<p>Event Dependencies:</p> <ul> <li>net_packet_http_base: Base HTTP packet capture event for network packet parsing</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_request/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Security monitoring: Detect SQL injection, XSS, and other web attacks</p> </li> <li> <p>API monitoring: Track API usage patterns and performance</p> </li> <li> <p>Compliance auditing: Monitor web traffic for regulatory compliance</p> </li> <li> <p>Performance analysis: Analyze request patterns and response times</p> </li> <li> <p>Threat hunting: Identify suspicious web requests and communication patterns</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_request/#http-methods","title":"HTTP METHODS","text":"<p>Common HTTP methods captured:</p> <ul> <li>GET: Retrieve data from server</li> <li>POST: Submit data to server</li> <li>PUT: Update or create resources</li> <li>DELETE: Remove resources</li> <li>HEAD: Retrieve headers only</li> <li>OPTIONS: Query server capabilities</li> <li>PATCH: Partial resource updates</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_request/#important-headers","title":"IMPORTANT HEADERS","text":"<p>Key HTTP headers monitored:</p> <ul> <li>Host: Target server hostname</li> <li>User-Agent: Client application information</li> <li>Accept: Acceptable response content types</li> <li>Authorization: Authentication credentials</li> <li>Cookie: Session and state information</li> <li>Referer: Source page for the request</li> <li>Content-Type: Request body content type</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_request/#security-considerations","title":"SECURITY CONSIDERATIONS","text":"<p>Monitor for suspicious patterns:</p> <ul> <li>SQL injection: Malicious SQL in parameters</li> <li>XSS attempts: Script injection in parameters</li> <li>Directory traversal: Path manipulation attempts</li> <li>Unusual user agents: Potential automated attacks</li> <li>Authentication bypass: Suspicious authentication patterns</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_request/#performance-monitoring","title":"PERFORMANCE MONITORING","text":"<p>Track performance indicators:</p> <ul> <li>Request frequency: Unusual traffic spikes</li> <li>Large requests: Potential DoS attempts</li> <li>Slow requests: Performance bottlenecks</li> <li>Error patterns: Failed request analysis</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_request/#related-events","title":"RELATED EVENTS","text":"<ul> <li>net_packet_http_response: HTTP response packet capture</li> <li>net_packet_http: General HTTP packet capture</li> <li>net_packet_tcp: TCP packet capture for HTTP traffic</li> <li>security_socket_connect: Socket connection monitoring</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_response/","title":"TRACEE-NET-PACKET-HTTP-RESPONSE","text":""},{"location":"docs/events/builtin/man/network/net_packet_http_response/#name","title":"NAME","text":"<p>net_packet_http_response - capture HTTP response packets</p>"},{"location":"docs/events/builtin/man/network/net_packet_http_response/#description","title":"DESCRIPTION","text":"<p>This event captures HTTP response packets in the network traffic. HTTP responses are server's answers to client requests, containing requested resources along with metadata about the response. The event provides detailed information about response status, headers, and network metadata.</p> <p>The event is particularly useful for monitoring server responses, debugging web applications, and analyzing web traffic patterns. It captures both successful and error responses, making it valuable for troubleshooting and security monitoring.</p>"},{"location":"docs/events/builtin/man/network/net_packet_http_response/#event-sets","title":"EVENT SETS","text":"<p>default, network_events</p>"},{"location":"docs/events/builtin/man/network/net_packet_http_response/#data-fields","title":"DATA FIELDS","text":"<p>metadata (trace.PktMeta) : Network packet metadata containing:   - src_ip (string): Source IP address   - dst_ip (string): Destination IP address   - src_port (uint16): Source port number   - dst_port (uint16): Destination port number   - protocol (uint8): IP protocol number   - packet_len (uint32): Packet length   - iface (string): Network interface</p> <p>http_response (trace.ProtoHTTPResponse) : HTTP response data containing:   - status (string): Response status text   - status_code (int): Response status code   - protocol (string): Protocol version   - headers (map[string][]string): Response headers   - content_length (int64): Content length</p>"},{"location":"docs/events/builtin/man/network/net_packet_http_response/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>net_packet_http_base</code>: Base HTTP packet processing</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_response/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Response monitoring: Track server responses</p> </li> <li> <p>Error detection: Identify failed requests</p> </li> <li> <p>Performance analysis: Monitor response times</p> </li> <li> <p>Security monitoring: Detect suspicious responses</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_response/#status-codes","title":"STATUS CODES","text":"<p>Common response codes:</p> <ul> <li>2xx Success: Request fulfilled</li> <li>200 OK: Standard success</li> <li>201 Created: Resource created</li> <li> <p>204 No Content: Success, no body</p> </li> <li> <p>3xx Redirection: Further action needed</p> </li> <li>301 Moved Permanently</li> <li>302 Found</li> <li> <p>304 Not Modified</p> </li> <li> <p>4xx Client Error: Client-side issue</p> </li> <li>400 Bad Request</li> <li>401 Unauthorized</li> <li>403 Forbidden</li> <li> <p>404 Not Found</p> </li> <li> <p>5xx Server Error: Server-side issue</p> </li> <li>500 Internal Server Error</li> <li>502 Bad Gateway</li> <li>503 Service Unavailable</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_response/#response-headers","title":"RESPONSE HEADERS","text":"<p>Important headers:</p> <ul> <li>Content-Type: Response format</li> <li>Content-Length: Body size</li> <li>Cache-Control: Caching directives</li> <li>Set-Cookie: Session management</li> <li>Location: Redirect target</li> <li>Server: Server software</li> <li>Date: Response timestamp</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_response/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Important security aspects:</p> <ul> <li>Information disclosure: Error messages</li> <li>Session management: Cookie handling</li> <li>Access control: Auth headers</li> <li>Security headers: CORS, CSP</li> <li>Server information: Version leaks</li> <li>Response injection: XSS, MIME sniffing</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_http_response/#related-events","title":"RELATED EVENTS","text":"<ul> <li>net_packet_http: General HTTP packets</li> <li>net_packet_http_request: HTTP request packets</li> <li>net_packet_tcp: TCP packet events</li> <li>net_packet_dns: DNS resolution events</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/","title":"TRACEE-NET-PACKET-ICMP","text":""},{"location":"docs/events/builtin/man/network/net_packet_icmp/#name","title":"NAME","text":"<p>net_packet_icmp - capture and analyze ICMP network packets</p>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/#description","title":"DESCRIPTION","text":"<p>Triggered for each ICMP (Internet Control Message Protocol) packet that reaches or leaves one of the processes being traced. This event provides detailed information about ICMP packets, including message types, codes, and protocol-specific fields used for network diagnostics and error reporting.</p> <p>ICMP is a network layer protocol primarily used for diagnostic and control purposes, enabling devices to communicate error and status information about network conditions. It's commonly used by networking utilities like ping and traceroute for network connectivity testing and troubleshooting.</p> <p>This event is useful for:</p> <ul> <li>Network diagnostics: Monitor ping, traceroute, and other ICMP-based tools</li> <li>Error analysis: Track network error conditions and unreachable destinations</li> <li>Security monitoring: Detect ICMP-based attacks and reconnaissance</li> <li>Network troubleshooting: Analyze connectivity and routing issues</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/#event-sets","title":"EVENT SETS","text":"<p>network_events</p>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/#data-fields","title":"DATA FIELDS","text":"<p>metadata (trace.PacketMetadata) : Network packet metadata containing:   - Source IP address   - Destination IP address   - Network protocol   - Packet length   - Network interface</p> <p>proto_icmp (trace.ProtoICMP) : ICMP protocol information containing:   - typeCode (string): ICMP message type and code (e.g., \"EchoRequest\", \"EchoReply\", \"DestinationUnreachable\")   - checksum (uint16): ICMP checksum for error detection   - id (uint16): Identifier field for matching requests/replies   - seq (uint16): Sequence number for ordering messages</p>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/#dependencies","title":"DEPENDENCIES","text":"<p>Event Dependencies:</p> <ul> <li>net_packet_icmp_base: Base ICMP packet capture event for network packet parsing</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Network connectivity testing: Monitor ping and connectivity testing tools</p> </li> <li> <p>Network troubleshooting: Analyze ICMP error messages and routing issues</p> </li> <li> <p>Security monitoring: Detect ICMP-based reconnaissance and attacks</p> </li> <li> <p>Performance analysis: Monitor network latency and packet loss</p> </li> <li> <p>Infrastructure monitoring: Track network health and reachability</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/#icmp-message-types","title":"ICMP MESSAGE TYPES","text":"<p>Common ICMP message types captured:</p>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/#diagnostic-messages","title":"Diagnostic Messages","text":"<ul> <li>Echo Request (Type 8): Ping requests for connectivity testing</li> <li>Echo Reply (Type 0): Ping responses confirming reachability</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/#error-messages","title":"Error Messages","text":"<ul> <li>Destination Unreachable (Type 3): Target host/network unreachable</li> <li>Time Exceeded (Type 11): TTL expired, indicates routing loops</li> <li>Parameter Problem (Type 12): IP header issues</li> <li>Redirect (Type 5): Better route suggestions from routers</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/#informational-messages","title":"Informational Messages","text":"<ul> <li>Timestamp Request/Reply: Time synchronization</li> <li>Information Request/Reply: Network information queries</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/#icmp-codes","title":"ICMP CODES","text":"<p>Each ICMP type has specific codes providing additional context:</p> <p>Destination Unreachable (Type 3): - Code 0: Network unreachable - Code 1: Host unreachable - Code 2: Protocol unreachable - Code 3: Port unreachable</p> <p>Time Exceeded (Type 11): - Code 0: TTL exceeded in transit - Code 1: Fragment reassembly time exceeded</p>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/#security-considerations","title":"SECURITY CONSIDERATIONS","text":"<p>Monitor for malicious ICMP usage:</p> <ul> <li>ICMP flooding: DoS attacks using ping floods</li> <li>ICMP tunneling: Data exfiltration through ICMP payloads</li> <li>Network reconnaissance: Port scanning using ICMP</li> <li>Covert channels: Hidden communication via ICMP</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/#network-troubleshooting","title":"NETWORK TROUBLESHOOTING","text":"<p>ICMP helps diagnose:</p> <ul> <li>Connectivity issues: Echo requests/replies for reachability testing</li> <li>Routing problems: Time exceeded messages indicating loops</li> <li>MTU discovery: Path MTU discovery using fragmentation needed messages</li> <li>Network configuration: Redirect messages for routing optimization</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmp/#related-events","title":"RELATED EVENTS","text":"<ul> <li>net_packet_ipv4: IPv4 packet capture (ICMP runs over IP)</li> <li>net_packet_ipv6: IPv6 packet capture (ICMPv6 for IPv6)</li> <li>net_packet_icmpv6: ICMPv6 packet capture for IPv6 networks</li> <li>net_packet_udp: UDP packet capture for comparison</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmpv6/","title":"TRACEE-NET-PACKET-ICMPV6","text":""},{"location":"docs/events/builtin/man/network/net_packet_icmpv6/#name","title":"NAME","text":"<p>net_packet_icmpv6 - capture ICMPv6 packet traffic</p>"},{"location":"docs/events/builtin/man/network/net_packet_icmpv6/#description","title":"DESCRIPTION","text":"<p>This event captures ICMPv6 (Internet Control Message Protocol version 6) packets in the network traffic. ICMPv6 is a core protocol in IPv6 networks, used for error reporting, network diagnostics, and neighbor discovery. The event provides detailed information about ICMPv6 messages, including their types, codes, and network metadata.</p> <p>ICMPv6 is essential for IPv6 network operations, handling tasks like router discovery, address autoconfiguration, and path MTU discovery. This event helps monitor these critical network functions and diagnose connectivity issues.</p>"},{"location":"docs/events/builtin/man/network/net_packet_icmpv6/#event-sets","title":"EVENT SETS","text":"<p>default, network_events</p>"},{"location":"docs/events/builtin/man/network/net_packet_icmpv6/#data-fields","title":"DATA FIELDS","text":"<p>src (string) : Source IPv6 address</p> <p>dst (string) : Destination IPv6 address</p> <p>metadata (trace.PacketMetadata) : Additional packet metadata</p> <p>proto_icmpv6 (trace.ProtoICMPv6) : ICMPv6 protocol information containing:   - typeCode (string): ICMPv6 message type and code   - checksum (uint16): Message checksum</p>"},{"location":"docs/events/builtin/man/network/net_packet_icmpv6/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>net_packet_icmpv6_base</code>: Base ICMPv6 packet processing</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmpv6/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Network diagnostics: Debug connectivity issues</p> </li> <li> <p>Neighbor discovery: Monitor IPv6 address resolution</p> </li> <li> <p>Router discovery: Track router advertisements</p> </li> <li> <p>Path MTU: Monitor path MTU discovery</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmpv6/#message-types","title":"MESSAGE TYPES","text":"<p>Common ICMPv6 messages:</p> <ul> <li>Error Messages:</li> <li>Destination Unreachable</li> <li>Packet Too Big</li> <li>Time Exceeded</li> <li> <p>Parameter Problem</p> </li> <li> <p>Informational Messages:</p> </li> <li>Echo Request/Reply</li> <li>Router Advertisement</li> <li>Router Solicitation</li> <li>Neighbor Advertisement</li> <li>Neighbor Solicitation</li> <li>Redirect</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmpv6/#protocol-functions","title":"PROTOCOL FUNCTIONS","text":"<p>Key ICMPv6 roles:</p> <ul> <li>Neighbor Discovery Protocol (NDP):</li> <li>Address resolution</li> <li>Router discovery</li> <li>Prefix discovery</li> <li>Parameter discovery</li> <li>Address autoconfiguration</li> <li>Duplicate address detection</li> <li> <p>Neighbor unreachability detection</p> </li> <li> <p>Path MTU Discovery:</p> </li> <li>Packet size optimization</li> <li>Fragmentation avoidance</li> <li>Path MTU updates</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmpv6/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Important security aspects:</p> <ul> <li>Reconnaissance: Network mapping</li> <li>DoS attacks: ICMPv6 flooding</li> <li>Man-in-the-middle: NDP spoofing</li> <li>Router hijacking: Fake advertisements</li> <li>Address conflicts: DAD attacks</li> <li>Route manipulation: Redirect attacks</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_icmpv6/#related-events","title":"RELATED EVENTS","text":"<ul> <li>net_packet_ipv6: IPv6 packet events</li> <li>net_packet_icmp: ICMPv4 packet events</li> <li>net_packet_tcp: TCP packet events</li> <li>net_packet_udp: UDP packet events</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_ipv4/","title":"TRACEE-NET-PACKET-IPV4","text":""},{"location":"docs/events/builtin/man/network/net_packet_ipv4/#name","title":"NAME","text":"<p>net_packet_ipv4 - capture IPv4 packet traffic</p>"},{"location":"docs/events/builtin/man/network/net_packet_ipv4/#description","title":"DESCRIPTION","text":"<p>This event captures IPv4 (Internet Protocol version 4) packets in the network traffic. IPv4 is the foundational protocol of the Internet, responsible for addressing and routing packets between networks. The event provides detailed information about IPv4 packets, including header fields and network metadata.</p> <p>IPv4 packets carry all types of Internet traffic, from web requests to email to streaming media. This event helps monitor network communication, diagnose routing issues, and analyze traffic patterns.</p>"},{"location":"docs/events/builtin/man/network/net_packet_ipv4/#event-sets","title":"EVENT SETS","text":"<p>network_events</p>"},{"location":"docs/events/builtin/man/network/net_packet_ipv4/#data-fields","title":"DATA FIELDS","text":"<p>src (string) : Source IP address</p> <p>dst (string) : Destination IP address</p> <p>metadata (trace.PacketMetadata) : Additional packet metadata</p> <p>proto_ipv4 (trace.ProtoIPv4) : IPv4 protocol information containing:   - version (uint8): IP version (4)   - IHL (uint8): Internet Header Length   - TOS (uint8): Type of Service   - length (uint16): Total packet length   - id (uint16): Identification   - flags (uint8): Fragment flags   - fragOffset (uint16): Fragment offset   - TTL (uint8): Time to Live   - protocol (string): Upper layer protocol   - checksum (uint16): Header checksum   - srcIP (string): Source IP address   - dstIP (string): Destination IP address</p>"},{"location":"docs/events/builtin/man/network/net_packet_ipv4/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>net_packet_ip_base</code>: Base IP packet processing</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_ipv4/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Network monitoring: Track IP traffic</p> </li> <li> <p>Routing analysis: Debug routing issues</p> </li> <li> <p>Traffic analysis: Study packet patterns</p> </li> <li> <p>Security monitoring: Detect suspicious traffic</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_ipv4/#header-fields","title":"HEADER FIELDS","text":"<p>Key IPv4 header components:</p> <ul> <li>Version: Always 4 for IPv4</li> <li>IHL: Header length in 32-bit words</li> <li>TOS/DSCP: Quality of service</li> <li>Total Length: Packet size in bytes</li> <li>Identification: Fragment identifier</li> <li>Flags: Fragmentation control</li> <li>Fragment Offset: Fragment position</li> <li>TTL: Hop limit counter</li> <li>Protocol: Upper layer protocol</li> <li>Header Checksum: Error detection</li> <li>Source/Destination: IP addresses</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_ipv4/#fragmentation","title":"FRAGMENTATION","text":"<p>Fragmentation controls:</p> <ul> <li>Don't Fragment (DF): Prevent splitting</li> <li>More Fragments (MF): More coming</li> <li>Fragment Offset: Position in data</li> <li>Identification: Group fragments</li> <li>Total Length: Fragment size</li> <li>IHL: Header size</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_ipv4/#protocol-numbers","title":"PROTOCOL NUMBERS","text":"<p>Common upper layer protocols:</p> <ul> <li>1: ICMP</li> <li>2: IGMP</li> <li>6: TCP</li> <li>17: UDP</li> <li>47: GRE</li> <li>50: ESP (IPsec)</li> <li>51: AH (IPsec)</li> <li>89: OSPF</li> <li>132: SCTP</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_ipv4/#related-events","title":"RELATED EVENTS","text":"<ul> <li>net_packet_ipv6: IPv6 packet events</li> <li>net_packet_tcp: TCP packet events</li> <li>net_packet_udp: UDP packet events</li> <li>net_packet_icmp: ICMP packet events</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_ipv6/","title":"TRACEE-NET-PACKET-IPV6","text":""},{"location":"docs/events/builtin/man/network/net_packet_ipv6/#name","title":"NAME","text":"<p>net_packet_ipv6 - capture IPv6 packet traffic</p>"},{"location":"docs/events/builtin/man/network/net_packet_ipv6/#description","title":"DESCRIPTION","text":"<p>This event captures IPv6 (Internet Protocol version 6) packets in the network traffic. IPv6 is the next-generation Internet Protocol, designed to replace IPv4, offering vastly expanded addressing capabilities and improved features. The event provides detailed information about IPv6 packets, including header fields and network metadata.</p> <p>IPv6 introduces a simplified header format, eliminates the need for NAT (Network Address Translation), and provides better support for mobility and security. This event helps monitor IPv6 network communication and analyze traffic patterns.</p>"},{"location":"docs/events/builtin/man/network/net_packet_ipv6/#event-sets","title":"EVENT SETS","text":"<p>network_events</p>"},{"location":"docs/events/builtin/man/network/net_packet_ipv6/#data-fields","title":"DATA FIELDS","text":"<p>src (string) : Source IPv6 address</p> <p>dst (string) : Destination IPv6 address</p> <p>metadata (trace.PacketMetadata) : Additional packet metadata</p> <p>proto_ipv6 (trace.ProtoIPv6) : IPv6 protocol information containing:   - version (uint8): IP version (6)   - trafficClass (uint8): Traffic class/DSCP   - flowLabel (uint32): Flow label   - length (uint16): Payload length   - nextHeader (string): Next header type   - hopLimit (uint8): Hop limit   - srcIP (string): Source IPv6 address   - dstIP (string): Destination IPv6 address</p>"},{"location":"docs/events/builtin/man/network/net_packet_ipv6/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>net_packet_ip_base</code>: Base IP packet processing</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_ipv6/#use-cases","title":"USE CASES","text":"<ul> <li> <p>IPv6 monitoring: Track IPv6 traffic</p> </li> <li> <p>Flow analysis: Study traffic patterns</p> </li> <li> <p>Protocol migration: Debug IPv4 to IPv6</p> </li> <li> <p>Security monitoring: Detect threats</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_ipv6/#header-fields","title":"HEADER FIELDS","text":"<p>Key IPv6 header components:</p> <ul> <li>Version: Always 6 for IPv6</li> <li>Traffic Class: QoS marking</li> <li>Flow Label: Stream identification</li> <li>Payload Length: Data size</li> <li>Next Header: Protocol type</li> <li>Hop Limit: TTL equivalent</li> <li>Source/Destination: 128-bit addresses</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_ipv6/#extension-headers","title":"EXTENSION HEADERS","text":"<p>Common extension types:</p> <ul> <li>Hop-by-Hop Options: Per-hop processing</li> <li>Routing: Source routing</li> <li>Fragment: Packet fragmentation</li> <li>Destination Options: Destination processing</li> <li>Authentication: Security</li> <li>Encapsulating Security: Encryption</li> <li>Mobility: Mobile IPv6</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_ipv6/#next-header-values","title":"NEXT HEADER VALUES","text":"<p>Common protocol numbers:</p> <ul> <li>0: Hop-by-Hop Options</li> <li>6: TCP</li> <li>17: UDP</li> <li>43: Routing</li> <li>44: Fragment</li> <li>50: ESP</li> <li>51: AH</li> <li>58: ICMPv6</li> <li>59: No Next Header</li> <li>60: Destination Options</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_ipv6/#related-events","title":"RELATED EVENTS","text":"<ul> <li>net_packet_ipv4: IPv4 packet events</li> <li>net_packet_icmpv6: ICMPv6 packet events</li> <li>net_packet_tcp: TCP packet events</li> <li>net_packet_udp: UDP packet events</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_tcp/","title":"TRACEE-NET-PACKET-TCP","text":""},{"location":"docs/events/builtin/man/network/net_packet_tcp/#name","title":"NAME","text":"<p>net_packet_tcp - capture and analyze TCP network packets</p>"},{"location":"docs/events/builtin/man/network/net_packet_tcp/#description","title":"DESCRIPTION","text":"<p>Triggered for each TCP packet that reaches or leaves one of the processes being traced. This event provides detailed information about TCP network communication, including all TCP header fields and connection metadata.</p> <p>The Transmission Control Protocol (TCP) is a core protocol in the Internet protocol suite, responsible for reliable and connection-oriented data communication between devices over a network. This event captures the complete TCP header information for network analysis and monitoring.</p> <p>This event is useful for:</p> <ul> <li>Network monitoring: Track TCP network communications</li> <li>Security analysis: Monitor suspicious network connections</li> <li>Performance debugging: Analyze network traffic patterns</li> <li>Protocol analysis: Examine TCP header fields and flow control</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_tcp/#event-sets","title":"EVENT SETS","text":"<p>network_events</p>"},{"location":"docs/events/builtin/man/network/net_packet_tcp/#data-fields","title":"DATA FIELDS","text":"<p>metadata (trace.PacketMetadata) : Network packet metadata containing:   - Source IP address   - Destination IP address   - Source port number   - Destination port number   - Network protocol   - Packet length   - Network interface</p> <p>proto_tcp (trace.ProtoTCP) : TCP protocol fields containing:   - srcPort (uint16): Source port from TCP header   - dstPort (uint16): Destination port from TCP header   - seq (uint32): Sequence number   - ack (uint32): Acknowledgment number   - dataOffset (uint8): TCP header length in 32-bit words   - FIN (bool): Finish flag - end of data transmission   - SYN (bool): Synchronize flag - connection initiation   - RST (bool): Reset flag - connection reset   - PSH (bool): Push flag - immediate data delivery   - ACK (bool): Acknowledgment flag - data receipt confirmation   - URG (bool): Urgent flag - urgent data follows   - ECE (bool): ECN-Echo flag - congestion notification   - CWR (bool): Congestion Window Reduced flag   - NS (bool): Nonce Sum flag - ECN protection   - window (uint16): Window size for flow control   - checksum (uint16): TCP checksum for error detection   - urgent (uint16): Urgent pointer when URG flag is set</p>"},{"location":"docs/events/builtin/man/network/net_packet_tcp/#dependencies","title":"DEPENDENCIES","text":"<p>Event Dependencies:</p> <ul> <li>net_packet_tcp_base: Base TCP packet capture event for network packet parsing</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_tcp/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Network security monitoring: Detect malicious TCP connections</p> </li> <li> <p>Performance analysis: Monitor TCP flow control and congestion</p> </li> <li> <p>Protocol debugging: Analyze TCP handshakes and data transfer</p> </li> <li> <p>Connection tracking: Monitor TCP connection lifecycle</p> </li> <li> <p>Bandwidth analysis: Track data transfer patterns</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_tcp/#related-events","title":"RELATED EVENTS","text":"<ul> <li>net_packet_ipv4: IPv4 packet capture</li> <li>net_packet_ipv6: IPv6 packet capture</li> <li>net_packet_udp: UDP packet capture</li> <li>net_flow_tcp_begin: TCP connection establishment</li> <li>net_flow_tcp_end: TCP connection termination</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_udp/","title":"TRACEE-NET-PACKET-UDP","text":""},{"location":"docs/events/builtin/man/network/net_packet_udp/#name","title":"NAME","text":"<p>net_packet_udp - capture and analyze UDP network packets</p>"},{"location":"docs/events/builtin/man/network/net_packet_udp/#description","title":"DESCRIPTION","text":"<p>Triggered for each UDP (User Datagram Protocol) packet that reaches or leaves one of the processes being traced. This event provides detailed information about UDP datagrams, including header fields and addressing information for connectionless network communication.</p> <p>UDP is a connectionless, minimalistic transport layer protocol designed for simplicity and speed. It offers best-effort delivery service, making it suitable for applications where low overhead and minimal delay are more critical than guaranteed data delivery. UDP is commonly used for DNS, DHCP, streaming media, online gaming, and other real-time applications.</p> <p>This event is useful for:</p> <ul> <li>Network monitoring: Track UDP-based application traffic and communication patterns</li> <li>DNS analysis: Monitor DNS queries and responses</li> <li>Real-time applications: Analyze streaming, gaming, and VoIP traffic</li> <li>Network troubleshooting: Debug UDP connectivity and performance issues</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_udp/#event-sets","title":"EVENT SETS","text":"<p>network_events</p>"},{"location":"docs/events/builtin/man/network/net_packet_udp/#data-fields","title":"DATA FIELDS","text":"<p>metadata (trace.PacketMetadata) : Network packet metadata containing:   - Source IP address   - Destination IP address   - Source port number   - Destination port number   - Network protocol   - Packet length   - Network interface</p> <p>proto_udp (trace.ProtoUDP) : UDP protocol information containing:   - srcPort (uint16): Source port number   - dstPort (uint16): Destination port number   - length (uint16): Length of UDP header and data payload   - checksum (uint16): Checksum for error detection</p>"},{"location":"docs/events/builtin/man/network/net_packet_udp/#dependencies","title":"DEPENDENCIES","text":"<p>Event Dependencies:</p> <ul> <li>net_packet_udp_base: Base UDP packet capture event for network packet parsing</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_udp/#use-cases","title":"USE CASES","text":"<ul> <li> <p>DNS monitoring: Track DNS queries and responses for security and performance analysis</p> </li> <li> <p>DHCP analysis: Monitor network configuration and IP address assignment</p> </li> <li> <p>Streaming media: Analyze video/audio streaming performance and quality</p> </li> <li> <p>Gaming traffic: Monitor online gaming communication and latency</p> </li> <li> <p>IoT communication: Track Internet of Things device communication patterns</p> </li> <li> <p>Network security: Detect UDP-based attacks and reconnaissance</p> </li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_udp/#udp-characteristics","title":"UDP CHARACTERISTICS","text":"<p>Connectionless Protocol: - No connection establishment or teardown required - Each datagram is independent and self-contained - No delivery guarantees or error recovery</p> <p>Minimal Overhead: - Simple 8-byte header (vs TCP's minimum 20 bytes) - No flow control or congestion control - Suitable for real-time applications with latency constraints</p> <p>Best-Effort Delivery: - No acknowledgment of received packets - No automatic retransmission of lost packets - Application responsible for reliability if needed</p>"},{"location":"docs/events/builtin/man/network/net_packet_udp/#common-udp-applications","title":"COMMON UDP APPLICATIONS","text":"<p>Well-Known Port Services: - DNS (Port 53): Domain Name System queries and responses - DHCP (Ports 67/68): Dynamic Host Configuration Protocol - SNMP (Port 161): Simple Network Management Protocol - NTP (Port 123): Network Time Protocol - TFTP (Port 69): Trivial File Transfer Protocol</p> <p>Real-Time Applications: - VoIP: Voice over IP communication - Video streaming: Live video broadcasts and conferencing - Online gaming: Real-time multiplayer game data - IoT sensors: Sensor data collection and telemetry</p>"},{"location":"docs/events/builtin/man/network/net_packet_udp/#udp-header-analysis","title":"UDP HEADER ANALYSIS","text":"<p>The UDP header contains critical information:</p> <p>Source Port (16 bits): - Identifies the sending application or service - Used for return communication path</p> <p>Destination Port (16 bits): - Specifies the target application or service - Determines how the packet should be processed</p> <p>Length (16 bits): - Total size of UDP header (8 bytes) plus data payload - Minimum value is 8 (header only)</p> <p>Checksum (16 bits): - Optional error detection mechanism - Can be zero to disable checksum verification</p>"},{"location":"docs/events/builtin/man/network/net_packet_udp/#security-considerations","title":"SECURITY CONSIDERATIONS","text":"<p>Monitor for malicious UDP usage:</p> <ul> <li>UDP flooding: Denial of service attacks using UDP traffic</li> <li>DNS amplification: Using DNS servers to amplify attack traffic</li> <li>UDP scanning: Port scanning using UDP packets</li> <li>Data exfiltration: Covert channels using UDP communication</li> <li>Reflection attacks: Using UDP services to reflect traffic</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_udp/#performance-characteristics","title":"PERFORMANCE CHARACTERISTICS","text":"<p>UDP offers several performance advantages:</p> <ul> <li>Low latency: No connection setup overhead</li> <li>High throughput: Minimal protocol processing</li> <li>Scalability: Stateless nature reduces server resource usage</li> <li>Efficiency: Smaller header size and less CPU overhead</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_udp/#troubleshooting-with-udp-events","title":"TROUBLESHOOTING WITH UDP EVENTS","text":"<p>Common issues to investigate:</p> <ul> <li>Packet loss: Missing datagrams in communication flows</li> <li>Port unreachable: ICMP responses for closed UDP ports</li> <li>Checksum errors: Data corruption during transmission</li> <li>Firewall blocking: Dropped packets due to security policies</li> </ul>"},{"location":"docs/events/builtin/man/network/net_packet_udp/#related-events","title":"RELATED EVENTS","text":"<ul> <li>net_packet_tcp: TCP packet capture for comparison</li> <li>net_packet_dns: Specific DNS protocol analysis</li> <li>net_packet_ipv4: IPv4 packet capture (UDP runs over IP)</li> <li>net_packet_ipv6: IPv6 packet capture for IPv6 UDP traffic</li> </ul>"},{"location":"docs/events/builtin/man/security/anti_debugging/","title":"TRACEE-ANTI-DEBUGGING","text":""},{"location":"docs/events/builtin/man/security/anti_debugging/#name","title":"NAME","text":"<p>anti_debugging - detect anti-debugging technique usage</p>"},{"location":"docs/events/builtin/man/security/anti_debugging/#description","title":"DESCRIPTION","text":"<p>Triggered when processes employ anti-debugging techniques to thwart or block debugger efforts. This security signature detects the usage of the <code>ptrace</code> system call with the <code>PTRACE_TRACEME</code> request, which is commonly used by malware or commercial applications to deter analysis and reverse engineering.</p> <p>When a process invokes <code>ptrace</code> with <code>PTRACE_TRACEME</code>, it's asking to be traced by its parent, which can be used to determine if it's currently being debugged. This technique is often employed as a defense evasion mechanism.</p> <p>This signature is useful for:</p> <ul> <li>Malware detection: Identify malware using anti-debugging techniques</li> <li>Security analysis: Detect programs attempting to evade analysis</li> <li>Reverse engineering protection: Monitor anti-analysis mechanisms</li> </ul>"},{"location":"docs/events/builtin/man/security/anti_debugging/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>Severity: 3 (Moderate to high threat level)</li> <li>MITRE ATT&amp;CK: Defense Evasion: Execution Guardrails</li> <li>Tags: linux, container</li> </ul>"},{"location":"docs/events/builtin/man/security/anti_debugging/#event-sets","title":"EVENT SETS","text":"<p>signatures, defense_evasion</p>"},{"location":"docs/events/builtin/man/security/anti_debugging/#data-fields","title":"DATA FIELDS","text":"<p>ptrace_request (string) : The specific ptrace request used (typically \"PTRACE_TRACEME\")</p> <p>process_info (object) : Information about the process employing anti-debugging techniques</p>"},{"location":"docs/events/builtin/man/security/anti_debugging/#dependencies","title":"DEPENDENCIES","text":"<p>System Calls:</p> <ul> <li>ptrace (required): Monitors ptrace system call for PTRACE_TRACEME requests</li> </ul>"},{"location":"docs/events/builtin/man/security/anti_debugging/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Malware analysis: Detect malware employing anti-debugging techniques</p> </li> <li> <p>Security monitoring: Identify programs attempting to evade analysis</p> </li> <li> <p>Incident response: Investigate processes using defense evasion techniques</p> </li> <li> <p>Threat hunting: Search for advanced evasion techniques in the environment</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/anti_debugging/#detection-logic","title":"DETECTION LOGIC","text":"<p>The signature monitors for:</p> <ol> <li>ptrace syscall invocation with PTRACE_TRACEME request</li> <li>Process behavior analysis to determine anti-debugging intent</li> <li>Context evaluation to reduce false positives from legitimate debugging</li> </ol>"},{"location":"docs/events/builtin/man/security/anti_debugging/#related-events","title":"RELATED EVENTS","text":"<ul> <li>ptrace: Primary system call monitored for anti-debugging attempts</li> <li>process_vm_write_code_injection: Related code injection detection</li> <li>ptrace_code_injection: Ptrace-based code injection detection</li> </ul>"},{"location":"docs/events/builtin/man/security/aslr_inspection/","title":"TRACEE-ASLR-INSPECTION","text":""},{"location":"docs/events/builtin/man/security/aslr_inspection/#name","title":"NAME","text":"<p>aslr_inspection - ASLR inspection detection signature</p>"},{"location":"docs/events/builtin/man/security/aslr_inspection/#description","title":"DESCRIPTION","text":"<p>The aslr_inspection signature detects instances where the ASLR (address space layout randomization) configuration is being read. ASLR is a vital security mechanism used by Linux operating systems to randomize the memory locations used by processes, making it more difficult to exploit vulnerabilities that rely on predictable memory addresses.</p> <p>However, adversaries may seek to inspect or even disable ASLR in their attempts to exploit vulnerabilities. The signature specifically tracks attempts to open and read the ASLR configuration from its standard location (<code>/proc/sys/kernel/randomize_va_space</code>).</p> <p>By alerting on instances where the ASLR configuration is being inspected, the system can identify potential preparatory actions by adversaries who might be gearing up for more direct attacks or exploit attempts. Disabling or altering ASLR can be a crucial step in a larger attack plan.</p>"},{"location":"docs/events/builtin/man/security/aslr_inspection/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-109</li> <li>Version: 1</li> <li>Severity: 0 (Low)</li> <li>Category: privilege-escalation</li> <li>Technique: Exploitation for Privilege Escalation</li> <li>MITRE ATT&amp;CK: T1068</li> </ul>"},{"location":"docs/events/builtin/man/security/aslr_inspection/#event-sets","title":"EVENT SETS","text":"<p>signatures, security_alert</p>"},{"location":"docs/events/builtin/man/security/aslr_inspection/#data-fields","title":"DATA FIELDS","text":"<p>Upon detection, the signature returns a Finding data structure with metadata about the event, but no specific additional data fields.</p>"},{"location":"docs/events/builtin/man/security/aslr_inspection/#dependencies","title":"DEPENDENCIES","text":"<p>Events Used:</p> <ul> <li>security_file_open: Indicates when a file is opened. The signature checks if the file being opened matches the path of the ASLR configuration and if it's being read</li> </ul>"},{"location":"docs/events/builtin/man/security/aslr_inspection/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Privilege Escalation Detection: Monitor for attempts to inspect ASLR configuration as a potential precursor to privilege escalation attacks</p> </li> <li> <p>Attack Preparation Monitoring: Identify adversaries gathering system information before launching exploits</p> </li> <li> <p>Security Reconnaissance: Detect reconnaissance activities targeting system security mechanisms</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/aslr_inspection/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_file_open: File opening security events</li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_notify_on_release_modification/","title":"TRACEE-CGROUP-NOTIFY-ON-RELEASE-MODIFICATION","text":""},{"location":"docs/events/builtin/man/security/cgroup_notify_on_release_modification/#name","title":"NAME","text":"<p>cgroup_notify_on_release_modification - detect modifications to cgroup notify_on_release file</p>"},{"location":"docs/events/builtin/man/security/cgroup_notify_on_release_modification/#description","title":"DESCRIPTION","text":"<p>This event detects modifications to the <code>notify_on_release</code> file within cgroups. The cgroups (Control Groups) feature in Linux manages resource allocation and isolation for process groups. The <code>notify_on_release</code> file controls whether notifications are sent when cgroup resources are released.</p> <p>Unauthorized modifications to this file could indicate container escape attempts or privilege escalation attacks, as attackers might try to leverage cgroup release notifications for malicious purposes.</p>"},{"location":"docs/events/builtin/man/security/cgroup_notify_on_release_modification/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-106</li> <li>Version: 1</li> <li>Severity: 3</li> <li>Category: privilege-escalation</li> <li>Technique: Escape to Host</li> <li>MITRE ID: attack-pattern--4a5b7ade-8bb5-4853-84ed-23f262002665</li> <li>MITRE External ID: T1611</li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_notify_on_release_modification/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/cgroup_notify_on_release_modification/#data-fields","title":"DATA FIELDS","text":"<p>This signature event has no specific data fields. It uses the fields from the underlying security_file_open event:</p> <p>pathname (string) : Path to the notify_on_release file being accessed</p> <p>flags (string) : File access flags indicating the type of operation</p>"},{"location":"docs/events/builtin/man/security/cgroup_notify_on_release_modification/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_file_open</code>: Monitor file access attempts in containers</li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_notify_on_release_modification/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Container security: Detect potential container escape attempts</p> </li> <li> <p>Privilege escalation detection: Identify unauthorized modifications to cgroup controls</p> </li> <li> <p>Runtime integrity: Monitor changes to container isolation boundaries</p> </li> <li> <p>Compliance monitoring: Track modifications to container security controls</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_notify_on_release_modification/#container-implications","title":"CONTAINER IMPLICATIONS","text":"<p>Modifications to notify_on_release can affect:</p> <ul> <li>Container isolation boundaries</li> <li>Resource cleanup notifications</li> <li>Container lifecycle events</li> <li>Process group management</li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_notify_on_release_modification/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>Unauthorized modifications may enable:</p> <ul> <li>Container escape attempts</li> <li>Privilege escalation</li> <li>Resource exhaustion attacks</li> <li>Container isolation bypasses</li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_notify_on_release_modification/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>High Impact: Can affect container isolation</li> <li>Complex Detection: Changes may appear legitimate</li> <li>False Positives: Legitimate container management tools may modify this file</li> <li>Context Required: Need to correlate with other container events</li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_notify_on_release_modification/#related-events","title":"RELATED EVENTS","text":"<ul> <li>cgroup_mkdir: Cgroup creation events</li> <li>cgroup_rmdir: Cgroup removal events</li> <li>security_file_open: File access monitoring</li> <li>container_create: Container lifecycle events</li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_release_agent_modification/","title":"TRACEE-CGROUP-RELEASE-AGENT-MODIFICATION","text":""},{"location":"docs/events/builtin/man/security/cgroup_release_agent_modification/#name","title":"NAME","text":"<p>cgroup_release_agent - detect modifications to cgroup release_agent file</p>"},{"location":"docs/events/builtin/man/security/cgroup_release_agent_modification/#description","title":"DESCRIPTION","text":"<p>This event detects modifications to the <code>release_agent</code> file within cgroups. The release agent is a critical component that specifies a script or command to be executed whenever a cgroup becomes empty. Due to its ability to execute arbitrary commands, unauthorized modifications to this file could indicate attempts at privilege escalation or container escape.</p> <p>The event monitors both direct modifications and rename operations involving the release_agent file, helping detect various tampering techniques.</p>"},{"location":"docs/events/builtin/man/security/cgroup_release_agent_modification/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1010</li> <li>Version: 1</li> <li>Severity: 3</li> <li>Category: privilege-escalation</li> <li>Technique: Escape to Host</li> <li>MITRE ID: attack-pattern--4a5b7ade-8bb5-4853-84ed-23f262002665</li> <li>MITRE External ID: T1611</li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_release_agent_modification/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/cgroup_release_agent_modification/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying security events:</p> <p>pathname (string) : Path to the release_agent file being accessed</p> <p>flags (string) : File access flags indicating the type of operation</p> <p>old_path (string) : Original path in case of rename operations</p> <p>new_path (string) : New path in case of rename operations</p>"},{"location":"docs/events/builtin/man/security/cgroup_release_agent_modification/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_file_open</code>: Monitor file access attempts</li> <li><code>security_inode_rename</code>: Track file rename operations</li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_release_agent_modification/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Container security: Detect potential container escape attempts</p> </li> <li> <p>Privilege escalation detection: Monitor for unauthorized command execution setup</p> </li> <li> <p>Runtime integrity: Track changes to critical cgroup configurations</p> </li> <li> <p>Incident response: Identify tampering with container isolation mechanisms</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_release_agent_modification/#cgroup-security","title":"CGROUP SECURITY","text":"<p>Critical aspects of release_agent security:</p> <ul> <li>Executes with root privileges</li> <li>Runs outside container context</li> <li>Can access host system resources</li> <li>Triggered automatically on cgroup emptying</li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_release_agent_modification/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Command injection: Inserting malicious commands</li> <li>Container escape: Breaking container isolation</li> <li>Persistence: Establishing automatic execution</li> <li>Privilege escalation: Gaining elevated access</li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_release_agent_modification/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>High Impact: Can lead to container escape</li> <li>Root Access: Commands run with full privileges</li> <li>Automated Execution: Triggers without user interaction</li> <li>Wide Access: Can affect multiple containers</li> </ul>"},{"location":"docs/events/builtin/man/security/cgroup_release_agent_modification/#related-events","title":"RELATED EVENTS","text":"<ul> <li>cgroup_notify_on_release_modification: Related cgroup control file changes</li> <li>security_file_open: File access monitoring</li> <li>security_inode_rename: File rename operations</li> <li>container_create: Container lifecycle events</li> </ul>"},{"location":"docs/events/builtin/man/security/core_pattern_modification/","title":"TRACEE-CORE-PATTERN-MODIFICATION","text":""},{"location":"docs/events/builtin/man/security/core_pattern_modification/#name","title":"NAME","text":"<p>core_pattern_modification - detect modifications to core dump configuration</p>"},{"location":"docs/events/builtin/man/security/core_pattern_modification/#description","title":"DESCRIPTION","text":"<p>This event detects unauthorized changes to the core dump configuration file (<code>/proc/sys/kernel/core_pattern</code>). The core_pattern file controls how the Linux kernel handles core dumps when programs crash, including where the dumps are stored and what program processes them.</p> <p>Modifications to this file are security-sensitive because the core_pattern can specify an executable to process core dumps, potentially allowing attackers to execute arbitrary commands with elevated privileges when programs crash.</p>"},{"location":"docs/events/builtin/man/security/core_pattern_modification/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1011</li> <li>Version: 1</li> <li>Severity: 3</li> <li>Category: privilege-escalation</li> <li>Technique: Escape to Host</li> <li>MITRE ID: attack-pattern--4a5b7ade-8bb5-4853-84ed-23f262002665</li> <li>MITRE External ID: T1611</li> </ul>"},{"location":"docs/events/builtin/man/security/core_pattern_modification/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/core_pattern_modification/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying security_file_open event:</p> <p>pathname (string) : Path to the core_pattern file being accessed</p> <p>flags (string) : File access flags indicating the type of operation</p>"},{"location":"docs/events/builtin/man/security/core_pattern_modification/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_file_open</code>: Monitor file access attempts to core_pattern</li> </ul>"},{"location":"docs/events/builtin/man/security/core_pattern_modification/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Container security: Detect potential container escape attempts</p> </li> <li> <p>Privilege escalation detection: Monitor for unauthorized command execution setup</p> </li> <li> <p>System integrity: Track changes to critical kernel configurations</p> </li> <li> <p>Incident response: Identify attempts to exploit core dump handling</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/core_pattern_modification/#core-pattern-security","title":"CORE PATTERN SECURITY","text":"<p>Critical aspects of core_pattern:</p> <ul> <li>Controls system-wide core dump handling</li> <li>Can specify arbitrary executables</li> <li>Runs with elevated privileges</li> <li>Affects all processes on the system</li> </ul>"},{"location":"docs/events/builtin/man/security/core_pattern_modification/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious modifications include:</p> <ul> <li>Command injection: Setting malicious executables as handlers</li> <li>Container escape: Breaking container isolation via core dumps</li> <li>Privilege escalation: Executing commands with elevated privileges</li> <li>Information disclosure: Capturing sensitive memory contents</li> </ul>"},{"location":"docs/events/builtin/man/security/core_pattern_modification/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>High Impact: System-wide effect on core dump handling</li> <li>Root Access: Core dump handlers run with elevated privileges</li> <li>Automated Execution: Triggers on any program crash</li> <li>Persistence: Changes persist until system reboot</li> </ul>"},{"location":"docs/events/builtin/man/security/core_pattern_modification/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Restrict access to /proc/sys/kernel/</li> <li>Monitor core_pattern modifications</li> <li>Use seccomp to control core dumps</li> <li>Implement proper container isolation</li> </ul>"},{"location":"docs/events/builtin/man/security/core_pattern_modification/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_file_open: File access monitoring</li> <li>process_execute: Track execution of core dump handlers</li> <li>security_bprm_check: Binary execution security checks</li> <li>container_create: Container lifecycle events</li> </ul>"},{"location":"docs/events/builtin/man/security/default_loader_modification/","title":"TRACEE-DEFAULT-LOADER-MODIFICATION","text":""},{"location":"docs/events/builtin/man/security/default_loader_modification/#name","title":"NAME","text":"<p>default_loader_mod - detect modifications to system dynamic loader</p>"},{"location":"docs/events/builtin/man/security/default_loader_modification/#description","title":"DESCRIPTION","text":"<p>This event detects unauthorized modifications to the default dynamic loader (ld.so) on Linux systems. The dynamic loader is a critical component responsible for loading shared libraries for dynamically linked applications. Due to its privileged position in program execution, modifications to the loader can affect nearly every application on the system.</p> <p>Changes to the dynamic loader could indicate attempts to hijack execution flow, bypass security controls, or establish persistent system access. This event monitors both direct modifications and rename operations that might be used to replace the legitimate loader.</p>"},{"location":"docs/events/builtin/man/security/default_loader_modification/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1012</li> <li>Version: 1</li> <li>Severity: 3</li> <li>Category: defense-evasion</li> <li>Technique: Hijack Execution Flow</li> <li>MITRE ID: attack-pattern--aedfca76-3b30-4866-b2aa-0f1d7fd1e4b6</li> <li>MITRE External ID: T1574</li> </ul>"},{"location":"docs/events/builtin/man/security/default_loader_modification/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/default_loader_modification/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying security events:</p> <p>pathname (string) : Path to the dynamic loader file being accessed</p> <p>flags (string) : File access flags indicating the type of operation</p> <p>old_path (string) : Original path in case of rename operations</p> <p>new_path (string) : New path in case of rename operations</p>"},{"location":"docs/events/builtin/man/security/default_loader_modification/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_file_open</code>: Monitor file access attempts</li> <li><code>security_inode_rename</code>: Track file rename operations</li> </ul>"},{"location":"docs/events/builtin/man/security/default_loader_modification/#use-cases","title":"USE CASES","text":"<ul> <li> <p>System integrity: Monitor critical system component modifications</p> </li> <li> <p>Defense evasion detection: Identify attempts to bypass security controls</p> </li> <li> <p>Persistence detection: Detect loader-based persistence mechanisms</p> </li> <li> <p>Supply chain security: Monitor for unauthorized binary modifications</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/default_loader_modification/#loader-security","title":"LOADER SECURITY","text":"<p>Critical aspects of dynamic loader security:</p> <ul> <li>Loads shared libraries for all dynamic executables</li> <li>Runs before application code execution</li> <li>Has system-wide impact</li> <li>Can affect security mechanisms</li> </ul>"},{"location":"docs/events/builtin/man/security/default_loader_modification/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious modifications include:</p> <ul> <li>Library hijacking: Forcing load of malicious libraries</li> <li>Security bypass: Disabling security features</li> <li>Function hooking: Intercepting library calls</li> <li>Information theft: Capturing sensitive data</li> </ul>"},{"location":"docs/events/builtin/man/security/default_loader_modification/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>Critical Impact: Affects all dynamic executables</li> <li>System-Wide Scope: Changes affect entire system</li> <li>Privileged Access: Loader runs with elevated privileges</li> <li>Persistence: Changes persist until loader is restored</li> </ul>"},{"location":"docs/events/builtin/man/security/default_loader_modification/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>File integrity monitoring</li> <li>Restricted write access to loader</li> <li>Regular checksum verification</li> <li>Secure boot mechanisms</li> </ul>"},{"location":"docs/events/builtin/man/security/default_loader_modification/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_file_open: File access monitoring</li> <li>security_inode_rename: File rename operations</li> <li>shared_object_loaded: Library loading events</li> <li>symbols_loaded: Symbol resolution tracking</li> </ul>"},{"location":"docs/events/builtin/man/security/disk_mount/","title":"TRACEE-DISK-MOUNT","text":""},{"location":"docs/events/builtin/man/security/disk_mount/#name","title":"NAME","text":"<p>disk_mount - detect container mounting of host device filesystems</p>"},{"location":"docs/events/builtin/man/security/disk_mount/#description","title":"DESCRIPTION","text":"<p>This event detects when a container attempts to mount a host device filesystem. While some containers legitimately need device access, mounting host devices can be a sign of container escape attempts or privilege escalation attacks.</p> <p>The event specifically monitors mount operations within container contexts, focusing on attempts to mount devices from the host's <code>/dev/</code> directory. This helps identify potential security boundary violations between containers and the host system.</p>"},{"location":"docs/events/builtin/man/security/disk_mount/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1014</li> <li>Version: 1</li> <li>Severity: 3</li> <li>Category: privilege-escalation</li> <li>Technique: Escape to Host</li> <li>MITRE ID: attack-pattern--4a5b7ade-8bb5-4853-84ed-23f262002665</li> <li>MITRE External ID: T1611</li> </ul>"},{"location":"docs/events/builtin/man/security/disk_mount/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/disk_mount/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying security_sb_mount event:</p> <p>device (string) : The device being mounted</p> <p>mount_point (string) : The location where the device is being mounted</p> <p>filesystem_type (string) : The type of filesystem being mounted</p> <p>flags (string) : Mount operation flags</p>"},{"location":"docs/events/builtin/man/security/disk_mount/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_sb_mount</code>: Monitor filesystem mount operations in containers</li> </ul>"},{"location":"docs/events/builtin/man/security/disk_mount/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Container security: Detect potential container escape attempts</p> </li> <li> <p>Device access monitoring: Track container access to host devices</p> </li> <li> <p>Privilege escalation detection: Identify unauthorized device access</p> </li> <li> <p>Compliance monitoring: Ensure containers follow device access policies</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/disk_mount/#container-implications","title":"CONTAINER IMPLICATIONS","text":"<p>Device mounting affects container security:</p> <ul> <li>Breaks container isolation</li> <li>Provides host system access</li> <li>Bypasses container restrictions</li> <li>Enables privilege escalation</li> </ul>"},{"location":"docs/events/builtin/man/security/disk_mount/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Host access: Reading host filesystem data</li> <li>Device control: Manipulating host devices</li> <li>Container escape: Breaking container boundaries</li> <li>Data exfiltration: Accessing sensitive host data</li> </ul>"},{"location":"docs/events/builtin/man/security/disk_mount/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>High Impact: Direct host system access</li> <li>Container Escape: Potential isolation breach</li> <li>Privilege Escalation: Access to privileged devices</li> <li>Data Exposure: Host filesystem visibility</li> </ul>"},{"location":"docs/events/builtin/man/security/disk_mount/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid device mount scenarios:</p> <ul> <li>Storage management containers</li> <li>Device management tools</li> <li>System monitoring tools</li> <li>Hardware access requirements</li> </ul>"},{"location":"docs/events/builtin/man/security/disk_mount/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_sb_mount: Filesystem mount operations</li> <li>security_sb_umount: Filesystem unmount events</li> <li>container_create: Container lifecycle events</li> <li>security_bprm_check: Binary execution security checks</li> </ul>"},{"location":"docs/events/builtin/man/security/docker_abuse/","title":"TRACEE-DOCKER-ABUSE","text":""},{"location":"docs/events/builtin/man/security/docker_abuse/#name","title":"NAME","text":"<p>docker_abuse - Docker socket abuse detection</p>"},{"location":"docs/events/builtin/man/security/docker_abuse/#description","title":"DESCRIPTION","text":"<p>Triggered when malicious activities targeting the Docker UNIX socket are detected, specifically when originating from within a container. The Docker socket serves as the primary entry point for the Docker API, and unauthorized access can enable container escape, host compromise, and unauthorized container management.</p> <p>Docker socket abuse represents a critical security risk as it provides a potential pathway for attackers to execute commands directly on the host system or manipulate other containers, effectively breaking container isolation boundaries.</p> <p>This signature is useful for:</p> <ul> <li>Container escape detection: Identify attempts to break out of container isolation</li> <li>Privilege escalation monitoring: Detect unauthorized access to host resources</li> <li>Docker security: Monitor for Docker API abuse and unauthorized container operations</li> </ul>"},{"location":"docs/events/builtin/man/security/docker_abuse/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1019</li> <li>Version: 1</li> <li>Severity: 2 (Moderate threat level)</li> <li>Category: privilege-escalation</li> <li>Technique: Exploitation for Privilege Escalation</li> <li>MITRE ATT&amp;CK: T1068</li> </ul>"},{"location":"docs/events/builtin/man/security/docker_abuse/#event-sets","title":"EVENT SETS","text":"<p>signatures, privilege_escalation</p>"},{"location":"docs/events/builtin/man/security/docker_abuse/#data-fields","title":"DATA FIELDS","text":"<p>access_info (object) : Information about the Docker socket access attempt</p> <p>container_context (object) : Context information about the container attempting access</p>"},{"location":"docs/events/builtin/man/security/docker_abuse/#dependencies","title":"DEPENDENCIES","text":"<p>System Events:</p> <ul> <li>security_file_open (required): Monitors file access to detect docker.sock file access</li> <li>security_socket_connect (required): Monitors socket connections to detect Docker UNIX socket connections</li> </ul>"},{"location":"docs/events/builtin/man/security/docker_abuse/#detection-logic","title":"DETECTION LOGIC","text":"<p>The signature monitors for:</p> <ol> <li>File access events to docker.sock from within containers</li> <li>Socket connection events to Docker UNIX socket from containers</li> <li>Container context verification to ensure detection only applies to containerized processes</li> </ol>"},{"location":"docs/events/builtin/man/security/docker_abuse/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Container security: Prevent unauthorized container escape attempts</p> </li> <li> <p>Docker environment protection: Secure Docker deployments against socket abuse</p> </li> <li> <p>Incident response: Investigate container-based attacks and privilege escalation</p> </li> <li> <p>Compliance monitoring: Ensure containers don't have unauthorized host access</p> </li> <li> <p>Security auditing: Monitor for violations of container isolation principles</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/docker_abuse/#attack-scenarios","title":"ATTACK SCENARIOS","text":"<p>Docker socket abuse enables:</p> <ul> <li>Container escape: Breaking out of container isolation to access host</li> <li>Privilege escalation: Gaining root access on the host system</li> <li>Lateral movement: Accessing other containers and their data</li> <li>Host manipulation: Installing malware or backdoors on the host</li> <li>Resource abuse: Creating unauthorized containers for cryptomining or other malicious purposes</li> </ul>"},{"location":"docs/events/builtin/man/security/docker_abuse/#socket-access-methods","title":"SOCKET ACCESS METHODS","text":"<p>Attackers may access Docker socket through:</p> <ul> <li>Volume mounts: Mounting <code>/var/run/docker.sock</code> into containers</li> <li>Direct file access: Attempting to read/write the socket file</li> <li>Socket connections: Connecting to the UNIX socket endpoint</li> <li>API calls: Using Docker API commands through the socket</li> </ul>"},{"location":"docs/events/builtin/man/security/docker_abuse/#common-exploitation-techniques","title":"COMMON EXPLOITATION TECHNIQUES","text":"<ul> <li>Privileged container creation: Creating containers with privileged access</li> <li>Host filesystem access: Mounting host directories into containers</li> <li>Container inspection: Enumerating existing containers and their configurations</li> <li>Image manipulation: Pulling malicious images or modifying existing ones</li> <li>Network manipulation: Modifying container network configurations</li> </ul>"},{"location":"docs/events/builtin/man/security/docker_abuse/#prevention-strategies","title":"PREVENTION STRATEGIES","text":"<ul> <li>Socket access control: Restrict docker.sock access using file permissions</li> <li>User namespaces: Use user namespace remapping to limit container privileges</li> <li>Rootless Docker: Run Docker daemon in rootless mode when possible</li> <li>SELinux/AppArmor: Use mandatory access controls to restrict socket access</li> <li>Container runtime security: Use security-focused container runtimes</li> </ul>"},{"location":"docs/events/builtin/man/security/docker_abuse/#legitimate-use-cases","title":"LEGITIMATE USE CASES","text":"<p>Some legitimate scenarios may trigger this detection:</p> <ul> <li>CI/CD pipelines: Build systems that need Docker access</li> <li>Container orchestration: Tools like Kubernetes accessing Docker API</li> <li>Monitoring tools: System monitoring that requires container inspection</li> <li>Development tools: Docker-in-Docker scenarios for development</li> </ul>"},{"location":"docs/events/builtin/man/security/docker_abuse/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_file_open: Primary detection for docker.sock file access</li> <li>security_socket_connect: Primary detection for socket connections</li> <li>container_create: Container creation events for context</li> <li>container_remove: Container removal events for analysis</li> </ul>"},{"location":"docs/events/builtin/man/security/dropped_executable/","title":"TRACEE-DROPPED-EXECUTABLE","text":""},{"location":"docs/events/builtin/man/security/dropped_executable/#name","title":"NAME","text":"<p>dropped_executable - Detection of dropped executables signature</p>"},{"location":"docs/events/builtin/man/security/dropped_executable/#description","title":"DESCRIPTION","text":"<p>The dropped_executable signature is designed to identify instances where a new executable file is introduced into the system during runtime. This type of activity can often be a significant security concern, especially in containerized environments where images are generally built with all necessary binaries included.</p> <p>When running containers, a primary security principle is the immutability of container images. This means that once a container image is built, it should have all the binaries and libraries it needs to function. Any deviation from this, such as dropping or introducing new executables during runtime, is often a sign of malicious intent or an indication that the container's integrity has been compromised.</p> <p>The signature vigilantly monitors for such anomalies. If it detects that a new executable has been introduced into the runtime environment, it triggers an alert.</p>"},{"location":"docs/events/builtin/man/security/dropped_executable/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1022</li> <li>Version: 1</li> <li>Severity: 2 (Moderate)</li> <li>Category: defense-evasion</li> <li>Technique: Masquerading</li> <li>MITRE ATT&amp;CK: T1036</li> </ul>"},{"location":"docs/events/builtin/man/security/dropped_executable/#event-sets","title":"EVENT SETS","text":"<p>signatures, security_alert</p>"},{"location":"docs/events/builtin/man/security/dropped_executable/#data-fields","title":"DATA FIELDS","text":"<p>Once an unexpected executable drop is detected, the signature generates a Finding that contains:</p> <p>SigMetadata (object) : Essential metadata that provides context regarding the detected event's nature and potential threat level</p> <p>Event (object) : An exhaustive log of the triggering event, offering a detailed perspective of the issue</p> <p>Data (object) : Points out the specific path where the unexpected executable has been located, helping to pinpoint the source of the potential breach</p>"},{"location":"docs/events/builtin/man/security/dropped_executable/#dependencies","title":"DEPENDENCIES","text":"<p>Events Used:</p> <ul> <li>magic_write: This event is activated when there's an attempt to introduce a new file or binary within the container's environment</li> </ul>"},{"location":"docs/events/builtin/man/security/dropped_executable/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Container Security: Monitor for unexpected executable drops in containerized environments that violate image immutability principles</p> </li> <li> <p>Malware Detection: Detect potential malware or backdoors being introduced into the system at runtime</p> </li> <li> <p>Intrusion Detection: Identify compromised containers where attackers are dropping additional tools or payloads</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/dropped_executable/#related-events","title":"RELATED EVENTS","text":"<ul> <li>magic_write: File creation and modification events</li> </ul>"},{"location":"docs/events/builtin/man/security/dynamic_code_loading/","title":"TRACEE-DYNAMIC-CODE-LOADING","text":""},{"location":"docs/events/builtin/man/security/dynamic_code_loading/#name","title":"NAME","text":"<p>dynamic_code_loading - detect dynamic code loading through memory protection changes</p>"},{"location":"docs/events/builtin/man/security/dynamic_code_loading/#description","title":"DESCRIPTION","text":"<p>This event detects potential dynamic code loading by monitoring changes in memory protection attributes. It specifically identifies when a memory region transitions from being writable to executable, which often indicates that code has been written to memory and is about to be executed.</p> <p>Dynamic code loading can be used legitimately (e.g., JIT compilation) but is also a common technique used by malware to execute code without writing files to disk, making it harder to detect through static analysis.</p>"},{"location":"docs/events/builtin/man/security/dynamic_code_loading/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-104</li> <li>Version: 1</li> <li>Severity: 2</li> <li>Category: defense-evasion</li> <li>Technique: Software Packing</li> <li>MITRE ID: attack-pattern--deb98323-e13f-4b0c-8d94-175379069062</li> <li>MITRE External ID: T1027.002</li> </ul>"},{"location":"docs/events/builtin/man/security/dynamic_code_loading/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/dynamic_code_loading/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying mem_prot_alert event:</p> <p>pathname (string) : Path to the executable containing the memory region</p> <p>prev_prot (string) : Previous memory protection flags</p> <p>prot (string) : New memory protection flags</p> <p>vm_file (string) : Associated file mapping information</p> <p>offset (uint64) : Offset within the memory region</p>"},{"location":"docs/events/builtin/man/security/dynamic_code_loading/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>mem_prot_alert</code>: Monitor memory protection changes</li> </ul>"},{"location":"docs/events/builtin/man/security/dynamic_code_loading/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Malware detection: Identify fileless malware execution</p> </li> <li> <p>Runtime integrity: Monitor for unexpected code execution</p> </li> <li> <p>Security analysis: Track dynamic code behavior</p> </li> <li> <p>Threat hunting: Detect evasive malware techniques</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/dynamic_code_loading/#memory-protection","title":"MEMORY PROTECTION","text":"<p>Protection flag transitions:</p> <ul> <li>W\u2192X: Write to Execute (suspicious)</li> <li>W+X: Simultaneous Write/Execute (highly suspicious)</li> <li>R\u2192X: Read to Execute (common for JIT)</li> <li>None\u2192X: No access to Execute (potential unpacking)</li> </ul>"},{"location":"docs/events/builtin/man/security/dynamic_code_loading/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Fileless malware: Execute code without files</li> <li>Shellcode injection: Dynamic code execution</li> <li>Packer unpacking: Runtime code decryption</li> <li>Memory-resident malware: Avoid disk artifacts</li> </ul>"},{"location":"docs/events/builtin/man/security/dynamic_code_loading/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>Evasion Technique: Bypasses static analysis</li> <li>Fileless Attack: No filesystem artifacts</li> <li>Memory Analysis: Required for detection</li> <li>False Positives: Common in JIT environments</li> </ul>"},{"location":"docs/events/builtin/man/security/dynamic_code_loading/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid dynamic code scenarios:</p> <ul> <li>JIT compilation</li> <li>Runtime code generation</li> <li>Plugin systems</li> <li>Dynamic language interpreters</li> </ul>"},{"location":"docs/events/builtin/man/security/dynamic_code_loading/#related-events","title":"RELATED EVENTS","text":"<ul> <li>mem_prot_alert: Memory protection changes</li> <li>security_file_mprotect: Memory protection syscalls</li> <li>process_vm_write: Process memory modifications</li> <li>shared_object_loaded: Dynamic library loading</li> </ul>"},{"location":"docs/events/builtin/man/security/fileless_execution/","title":"TRACEE-FILELESS-EXECUTION","text":""},{"location":"docs/events/builtin/man/security/fileless_execution/#name","title":"NAME","text":"<p>fileless_execution - fileless execution attempt detected</p>"},{"location":"docs/events/builtin/man/security/fileless_execution/#description","title":"DESCRIPTION","text":"<p>Triggered when fileless execution is detected - running processes directly from memory rather than from files on the filesystem. This security signature identifies sophisticated evasion techniques used by adversaries to escape traditional file-based detection mechanisms.</p> <p>Fileless execution allows malicious actors to operate without leaving traditional file artifacts on disk, making detection more challenging through conventional security tools that focus on file system monitoring.</p> <p>This signature is useful for:</p> <ul> <li>Advanced threat detection: Identify sophisticated evasion techniques</li> <li>Memory-based attack detection: Monitor execution from memory locations</li> <li>Defense evasion monitoring: Detect attempts to bypass file-based security controls</li> </ul>"},{"location":"docs/events/builtin/man/security/fileless_execution/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-105</li> <li>Version: 1</li> <li>Severity: 3 (Moderate to high threat level)</li> <li>Category: defense-evasion</li> <li>Technique: Reflective Code Loading</li> <li>MITRE ATT&amp;CK: T1620</li> </ul>"},{"location":"docs/events/builtin/man/security/fileless_execution/#event-sets","title":"EVENT SETS","text":"<p>signatures, defense_evasion</p>"},{"location":"docs/events/builtin/man/security/fileless_execution/#data-fields","title":"DATA FIELDS","text":"<p>process_info (object) : Information about the process executing from memory</p> <p>execution_context (object) : Context information about the fileless execution attempt</p>"},{"location":"docs/events/builtin/man/security/fileless_execution/#dependencies","title":"DEPENDENCIES","text":"<p>System Events:</p> <ul> <li>sched_process_exec (required): Monitors process execution attempts to detect memory-based origins</li> </ul>"},{"location":"docs/events/builtin/man/security/fileless_execution/#detection-logic","title":"DETECTION LOGIC","text":"<p>The signature monitors for:</p> <ol> <li>Process execution events from <code>sched_process_exec</code></li> <li>Memory origin detection - identifies when process origin is memory rather than filesystem</li> <li>Fileless execution patterns - distinguishes legitimate memory execution from malicious attempts</li> </ol>"},{"location":"docs/events/builtin/man/security/fileless_execution/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Advanced persistent threat (APT) detection: Identify sophisticated attack techniques</p> </li> <li> <p>Malware analysis: Detect fileless malware execution patterns</p> </li> <li> <p>Incident response: Investigate memory-based attack techniques</p> </li> <li> <p>Security monitoring: Detect attempts to evade file-based security controls</p> </li> <li> <p>Forensic analysis: Track fileless execution during security investigations</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/fileless_execution/#threat-landscape","title":"THREAT LANDSCAPE","text":"<p>Fileless execution is increasingly used by:</p> <ul> <li>Advanced malware: Sophisticated threats avoiding disk artifacts</li> <li>Living-off-the-land attacks: Using legitimate tools for malicious purposes</li> <li>Nation-state actors: Advanced persistent threats using evasion techniques</li> <li>Ransomware: Modern ransomware variants using fileless techniques</li> </ul>"},{"location":"docs/events/builtin/man/security/fileless_execution/#related-events","title":"RELATED EVENTS","text":"<ul> <li>sched_process_exec: Primary source event for process execution monitoring</li> <li>dynamic_code_loading: Related code loading detection</li> <li>process_vm_write_code_injection: Memory-based code injection detection</li> <li>dropped_executable: Executable dropping detection for comparison</li> </ul>"},{"location":"docs/events/builtin/man/security/ftrace_hook/","title":"TRACEE-FTRACE-HOOK","text":""},{"location":"docs/events/builtin/man/security/ftrace_hook/#name","title":"NAME","text":"<p>ftrace_hook - ftrace function hook detected</p>"},{"location":"docs/events/builtin/man/security/ftrace_hook/#description","title":"DESCRIPTION","text":"<p>Triggered when an ftrace function hook is detected on the system. Ftrace hooks are kernel tracing mechanisms that can be used for legitimate system monitoring or potentially malicious purposes such as rootkits hiding their presence or intercepting system calls.</p> <p>This event monitors the function tracing infrastructure to detect when functions are hooked, providing visibility into both legitimate kernel tracing activities and potential security threats.</p> <p>This event is useful for:</p> <ul> <li>Rootkit detection: Identify malicious function hooks used by rootkits</li> <li>Security monitoring: Detect unauthorized kernel function interception</li> <li>System analysis: Monitor legitimate kernel tracing activities</li> </ul>"},{"location":"docs/events/builtin/man/security/ftrace_hook/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/security/ftrace_hook/#data-fields","title":"DATA FIELDS","text":"<p>symbol (string) : The symbol (function name) that is being hooked</p> <p>trampoline (string) : The name or address of the ftrace trampoline</p> <p>callback (string) : The callback name or address that will be called when the symbol is executed</p> <p>callback_offset (integer) : The callback offset inside the function</p> <p>callback_owner (string) : The owner of the callback (kernel module name if applicable)</p> <p>flags (string) : Ftrace flags indicating hook behavior: - R: Registers are passed to the callback - I: Callback can change the RIP register value - D: Direct call to the function - O: Callsite-specific operations - M: Function has I or D flags</p> <p>count (integer) : The number of callbacks registered with the symbol</p>"},{"location":"docs/events/builtin/man/security/ftrace_hook/#dependencies","title":"DEPENDENCIES","text":"<p>Self-triggered:</p> <ul> <li>Uses internal kernel tracing mechanisms for detection</li> </ul>"},{"location":"docs/events/builtin/man/security/ftrace_hook/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Rootkit detection: Identify kernel-level hooks used by rootkits</p> </li> <li> <p>Security incident response: Investigate unauthorized kernel modifications</p> </li> <li> <p>System integrity monitoring: Verify expected vs. actual kernel hooks</p> </li> <li> <p>Forensic analysis: Understand kernel hooking patterns during incidents</p> </li> <li> <p>Compliance verification: Ensure no unauthorized kernel modifications</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/ftrace_hook/#flag-descriptions","title":"FLAG DESCRIPTIONS","text":"<p>Ftrace flags provide important context about hook behavior:</p> <ul> <li>R (Registers): Hook receives CPU register state</li> <li>I (IP modification): Hook can modify instruction pointer</li> <li>D (Direct): Direct function call bypass</li> <li>O (Ops-specific): Custom operation handling</li> <li>M (Modified): Function has been modified with I or D flags</li> </ul>"},{"location":"docs/events/builtin/man/security/ftrace_hook/#related-events","title":"RELATED EVENTS","text":"<ul> <li>hidden_kernel_module: Hidden kernel module detection</li> <li>hooked_syscall: System call hook detection</li> <li>symbols_loaded: Symbol loading detection</li> <li>syscall_table_hooking: System call table modification detection</li> </ul>"},{"location":"docs/events/builtin/man/security/hidden_file_created/","title":"TRACEE-HIDDEN-FILE-CREATED","text":""},{"location":"docs/events/builtin/man/security/hidden_file_created/#name","title":"NAME","text":"<p>hidden_file_created - detect creation of hidden executable files</p>"},{"location":"docs/events/builtin/man/security/hidden_file_created/#description","title":"DESCRIPTION","text":"<p>This event detects attempts to create hidden executable files (ELF format) in the system. In Unix-like systems, files and directories starting with a dot (.) are hidden from standard directory listings. While this convention is commonly used for configuration files, it can be exploited by attackers to conceal malicious executables.</p> <p>The event combines path analysis (looking for \"/.\") with magic byte checking to identify hidden ELF files being created, providing early warning of potential malicious activity attempting to operate stealthily on the system.</p>"},{"location":"docs/events/builtin/man/security/hidden_file_created/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1015</li> <li>Version: 1</li> <li>Severity: 2</li> <li>Category: defense-evasion</li> <li>Technique: Hidden Files and Directories</li> <li>MITRE ID: attack-pattern--ec8fc7e2-b356-455c-8db5-2e37be158e7d</li> <li>MITRE External ID: T1564.001</li> </ul>"},{"location":"docs/events/builtin/man/security/hidden_file_created/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/hidden_file_created/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying magic_write event:</p> <p>pathname (string) : Path to the file being created</p> <p>bytes ([]byte) : Magic bytes written to the file</p> <p>source (string) : Process or context creating the file</p>"},{"location":"docs/events/builtin/man/security/hidden_file_created/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>magic_write</code>: Monitor file content magic bytes</li> </ul>"},{"location":"docs/events/builtin/man/security/hidden_file_created/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Malware detection: Identify hidden malicious executables</p> </li> <li> <p>Defense evasion detection: Spot attempts to hide malicious tools</p> </li> <li> <p>System integrity: Monitor for unauthorized hidden binaries</p> </li> <li> <p>Incident response: Track creation of suspicious executables</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/hidden_file_created/#hidden-file-patterns","title":"HIDDEN FILE PATTERNS","text":"<p>Common hiding techniques:</p> <ul> <li>Dot files: Starting with \".\"</li> <li>Dot directories: Hidden within \".\" directories</li> <li>Multiple dots: Using \"..\" or \"...\"</li> <li>Unicode tricks: Using special characters</li> <li>Nested hiding: Hidden files in hidden directories</li> </ul>"},{"location":"docs/events/builtin/man/security/hidden_file_created/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Malware persistence: Hiding malicious programs</li> <li>Tool concealment: Masking attacker tools</li> <li>Backdoor placement: Hiding unauthorized access methods</li> <li>Data exfiltration: Concealing collection scripts</li> </ul>"},{"location":"docs/events/builtin/man/security/hidden_file_created/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>Stealth Capability: Hidden from normal ls commands</li> <li>Execution Rights: Binary can be run directly</li> <li>System Access: Full program capabilities</li> <li>Detection Evasion: May bypass security scans</li> </ul>"},{"location":"docs/events/builtin/man/security/hidden_file_created/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid hidden executable scenarios:</p> <ul> <li>Development tools and scripts</li> <li>User-specific binaries</li> <li>Application plugins</li> <li>Package manager internals</li> </ul>"},{"location":"docs/events/builtin/man/security/hidden_file_created/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Regular hidden file audits</li> <li>File integrity monitoring</li> <li>Execute permission controls</li> <li>Hidden file logging</li> </ul>"},{"location":"docs/events/builtin/man/security/hidden_file_created/#related-events","title":"RELATED EVENTS","text":"<ul> <li>magic_write: File content monitoring</li> <li>security_file_open: File access tracking</li> <li>process_execute: Executable file execution</li> <li>dropped_executable: New executable detection</li> </ul>"},{"location":"docs/events/builtin/man/security/hidden_kernel_module/","title":"TRACEE-HIDDEN-KERNEL-MODULE","text":""},{"location":"docs/events/builtin/man/security/hidden_kernel_module/#name","title":"NAME","text":"<p>hidden_kernel_module - a hidden Linux kernel module was detected</p>"},{"location":"docs/events/builtin/man/security/hidden_kernel_module/#description","title":"DESCRIPTION","text":"<p>Triggered when a loaded but hidden kernel module is detected on the system. This event provides a strong indication of system compromise, as hidden kernel modules are commonly used by rootkits and other malicious software to maintain persistence while avoiding detection.</p> <p>The event periodically scans the system to identify kernel modules that are loaded in memory but hidden from standard module listing mechanisms.</p> <p>This event is useful for:</p> <ul> <li>Rootkit detection: Identify hidden kernel modules used by rootkits</li> <li>System compromise detection: Strong indicator of system compromise</li> <li>Security monitoring: Continuous surveillance for stealth techniques</li> </ul>"},{"location":"docs/events/builtin/man/security/hidden_kernel_module/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/security/hidden_kernel_module/#data-fields","title":"DATA FIELDS","text":"<p>address (string) : The memory address of the hidden kernel module</p> <p>name (string) : The name of the hidden kernel module</p> <p>srcversion (string) : The source version string of the kernel module</p>"},{"location":"docs/events/builtin/man/security/hidden_kernel_module/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>hidden_kernel_module_seeker</code>: Internal event that performs periodic scanning for hidden modules</li> </ul>"},{"location":"docs/events/builtin/man/security/hidden_kernel_module/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Rootkit detection: Identify kernel-level rootkits hiding from detection</p> </li> <li> <p>Security incident response: Detect advanced persistent threats using kernel modules</p> </li> <li> <p>System integrity monitoring: Ensure no unauthorized kernel modules are hidden</p> </li> <li> <p>Compliance verification: Verify system integrity for security standards</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/hidden_kernel_module/#related-events","title":"RELATED EVENTS","text":"<ul> <li>module_load: Kernel module loading events</li> <li>module_free: Kernel module unloading events</li> <li>symbols_loaded: Symbol loading detection</li> <li>ftrace_hook: Function tracing hook detection</li> </ul>"},{"location":"docs/events/builtin/man/security/hooked_syscall/","title":"TRACEE-HOOKED-SYSCALL","text":""},{"location":"docs/events/builtin/man/security/hooked_syscall/#name","title":"NAME","text":"<p>hooked_syscall - system call hooking detection</p>"},{"location":"docs/events/builtin/man/security/hooked_syscall/#description","title":"DESCRIPTION","text":"<p>Triggered when system call table hooking is detected in the Linux kernel. This event monitors the syscall table to verify that each system call points to its corresponding legitimate function symbol, helping identify kernel code modifications often used by rootkits and other malicious software.</p> <p>System call hooking is a common technique used by malware to intercept and modify system calls, enabling activities such as hiding processes, files, network connections, or escalating privileges while remaining undetected by traditional monitoring tools.</p> <p>This event is useful for:</p> <ul> <li>Rootkit detection: Identify kernel-level rootkits that hook system calls</li> <li>System integrity monitoring: Verify kernel code integrity</li> <li>Security incident response: Detect unauthorized kernel modifications</li> </ul>"},{"location":"docs/events/builtin/man/security/hooked_syscall/#event-sets","title":"EVENT SETS","text":"<p>derived, security_alert</p>"},{"location":"docs/events/builtin/man/security/hooked_syscall/#data-fields","title":"DATA FIELDS","text":"<p>syscall_number (integer) : The system call number that was found to be hooked</p> <p>expected_address (string) : The expected memory address of the legitimate syscall function</p> <p>actual_address (string) : The actual memory address found in the syscall table</p> <p>hook_target (string) : Information about the hooking function or module if identifiable</p>"},{"location":"docs/events/builtin/man/security/hooked_syscall/#dependencies","title":"DEPENDENCIES","text":"<p>Detection Method:</p> <ul> <li>Uprobe-based detection on various system calls</li> <li>Kernel symbol table verification</li> <li>Syscall table integrity checking</li> </ul>"},{"location":"docs/events/builtin/man/security/hooked_syscall/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Rootkit detection: Identify kernel-level malware that hooks system calls</p> </li> <li> <p>System integrity monitoring: Continuous verification of syscall table integrity</p> </li> <li> <p>Incident response: Investigate unauthorized kernel modifications</p> </li> <li> <p>Security auditing: Verify system call table consistency</p> </li> <li> <p>Forensic analysis: Detect evidence of advanced persistent threats</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/hooked_syscall/#detection-methodology","title":"DETECTION METHODOLOGY","text":"<p>The event performs:</p> <ol> <li>Syscall table scanning: Systematic verification of syscall table entries</li> <li>Symbol verification: Comparison of actual vs. expected function addresses</li> <li>Hook identification: Detection of unauthorized modifications to syscall handlers</li> <li>Integrity validation: Verification that syscalls point to legitimate kernel functions</li> </ol>"},{"location":"docs/events/builtin/man/security/hooked_syscall/#security-implications","title":"SECURITY IMPLICATIONS","text":"<p>System call hooking can enable:</p> <ul> <li>Process hiding: Malware hiding processes from system monitoring</li> <li>File hiding: Concealing malicious files from filesystem operations</li> <li>Network hiding: Hiding network connections and traffic</li> <li>Privilege escalation: Bypassing security controls and access restrictions</li> <li>Anti-forensics: Evading detection and analysis tools</li> </ul>"},{"location":"docs/events/builtin/man/security/hooked_syscall/#mitigation-strategies","title":"MITIGATION STRATEGIES","text":"<ul> <li>Kernel integrity protection: Use technologies like KGDB, KASLR</li> <li>Control Flow Integrity (CFI): Hardware-based protection mechanisms</li> <li>Hypervisor-based protection: Monitor kernel from hypervisor level</li> <li>Regular integrity checks: Periodic verification of critical kernel structures</li> </ul>"},{"location":"docs/events/builtin/man/security/hooked_syscall/#related-events","title":"RELATED EVENTS","text":"<ul> <li>syscall_table_hooking: Alternative detection method for syscall table modifications</li> <li>ftrace_hook: Function tracing hook detection</li> <li>hidden_kernel_module: Hidden kernel module detection</li> <li>symbols_collision: Symbol conflict detection</li> </ul>"},{"location":"docs/events/builtin/man/security/illegitimate_shell/","title":"TRACEE-ILLEGITIMATE-SHELL","text":""},{"location":"docs/events/builtin/man/security/illegitimate_shell/#name","title":"NAME","text":"<p>illegitimate_shell - detect web servers spawning shell processes</p>"},{"location":"docs/events/builtin/man/security/illegitimate_shell/#description","title":"DESCRIPTION","text":"<p>This event detects when a web server program spawns a shell process. Under normal circumstances, web servers serve content and handle web requests without needing shell access. The presence of a shell being spawned by a web server often indicates a compromise, such as a web application vulnerability being exploited for command execution.</p> <p>This detection is particularly important as web shells and command injection attacks are common methods for attackers to gain unauthorized access to web servers and execute arbitrary commands.</p>"},{"location":"docs/events/builtin/man/security/illegitimate_shell/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1016</li> <li>Version: 1</li> <li>Severity: 2</li> <li>Category: initial-access</li> <li>Technique: Exploit Public-Facing Application</li> <li>MITRE ID: attack-pattern--3f886f2a-874f-4333-b794-aa6075009b1c</li> <li>MITRE External ID: T1190</li> </ul>"},{"location":"docs/events/builtin/man/security/illegitimate_shell/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/illegitimate_shell/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying security_bprm_check event:</p> <p>pathname (string) : Path to the shell being executed</p> <p>comm (string) : Name of the web server process</p> <p>interpreter (string) : Path to the interpreter if script execution</p> <p>stdin_type (string) : Type of standard input</p>"},{"location":"docs/events/builtin/man/security/illegitimate_shell/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_bprm_check</code>: Monitor program execution attempts</li> </ul>"},{"location":"docs/events/builtin/man/security/illegitimate_shell/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Web security: Detect web shell installations</p> </li> <li> <p>Command injection: Identify successful exploits</p> </li> <li> <p>Intrusion detection: Spot initial access attempts</p> </li> <li> <p>Incident response: Track compromise indicators</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/illegitimate_shell/#shell-execution-patterns","title":"SHELL EXECUTION PATTERNS","text":"<p>Suspicious patterns to monitor:</p> <ul> <li>Direct shell execution (sh, bash)</li> <li>Command interpreters (python, perl)</li> <li>System utilities (awk, sed)</li> <li>Network tools (nc, curl)</li> <li>Custom interpreters</li> </ul>"},{"location":"docs/events/builtin/man/security/illegitimate_shell/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common exploitation methods:</p> <ul> <li>Web shells: Malicious web scripts</li> <li>Command injection: User input exploitation</li> <li>File upload: Malicious file execution</li> <li>CGI exploitation: Script parameter abuse</li> </ul>"},{"location":"docs/events/builtin/man/security/illegitimate_shell/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>Remote Access: Shell provides system access</li> <li>Command Execution: Full system commands</li> <li>Persistence: Web shell remains active</li> <li>Privilege Level: Runs as web server user</li> </ul>"},{"location":"docs/events/builtin/man/security/illegitimate_shell/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Rare but valid scenarios:</p> <ul> <li>Maintenance scripts</li> <li>System health checks</li> <li>Automated backups</li> <li>Development debugging</li> </ul>"},{"location":"docs/events/builtin/man/security/illegitimate_shell/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Web application firewalls</li> <li>Input validation</li> <li>File upload restrictions</li> <li>Process execution controls</li> <li>Regular security audits</li> </ul>"},{"location":"docs/events/builtin/man/security/illegitimate_shell/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_bprm_check: Binary execution checks</li> <li>process_execute: Process execution tracking</li> <li>dropped_executable: New executable detection</li> <li>dynamic_code_loading: Runtime code execution</li> </ul>"},{"location":"docs/events/builtin/man/security/kernel_module_loading/","title":"TRACEE-KERNEL-MODULE-LOADING","text":""},{"location":"docs/events/builtin/man/security/kernel_module_loading/#name","title":"NAME","text":"<p>kernel_module_loading - kernel module loading detection</p>"},{"location":"docs/events/builtin/man/security/kernel_module_loading/#description","title":"DESCRIPTION","text":"<p>Triggered when kernel module loading is detected. This security signature monitors for kernel module loading activities, which can be legitimate system administration tasks or potentially malicious operations by adversaries seeking elevated privileges and stealth capabilities.</p> <p>Kernel modules operate with elevated privileges and can directly interact with the operating system core. While legitimate modules extend kernel functionality, malicious modules can enable rootkits, hide processes, intercept system calls, and evade detection by operating within kernel space.</p> <p>This signature is useful for:</p> <ul> <li>Persistence detection: Identify attempts to maintain persistent access through kernel modules</li> <li>Privilege escalation monitoring: Detect kernel-level privilege escalation attempts</li> <li>System integrity monitoring: Track unauthorized kernel modifications</li> </ul>"},{"location":"docs/events/builtin/man/security/kernel_module_loading/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1017</li> <li>Version: 1</li> <li>Severity: 2 (Moderate threat level)</li> <li>Category: persistence</li> <li>Technique: Kernel Modules and Extensions</li> <li>MITRE ATT&amp;CK: T1547.006</li> </ul>"},{"location":"docs/events/builtin/man/security/kernel_module_loading/#event-sets","title":"EVENT SETS","text":"<p>signatures, persistence</p>"},{"location":"docs/events/builtin/man/security/kernel_module_loading/#data-fields","title":"DATA FIELDS","text":"<p>module_info (object) : Information about the kernel module being loaded</p> <p>loading_context (object) : Context information about the module loading operation</p>"},{"location":"docs/events/builtin/man/security/kernel_module_loading/#dependencies","title":"DEPENDENCIES","text":"<p>System Events:</p> <ul> <li>init_module (required): Monitors kernel module initialization</li> <li>security_kernel_read_file (required): Monitors kernel file read operations for \"kernel-module\" type files</li> </ul>"},{"location":"docs/events/builtin/man/security/kernel_module_loading/#detection-logic","title":"DETECTION LOGIC","text":"<p>The signature monitors for:</p> <ol> <li>Module initialization events from <code>init_module</code> system calls</li> <li>Kernel file reading from <code>security_kernel_read_file</code> with \"kernel-module\" type</li> <li>Loading pattern analysis to distinguish legitimate from suspicious module loading</li> </ol>"},{"location":"docs/events/builtin/man/security/kernel_module_loading/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Rootkit detection: Identify malicious kernel modules used by rootkits</p> </li> <li> <p>System integrity monitoring: Track unauthorized kernel modifications</p> </li> <li> <p>Incident response: Investigate persistence mechanisms during security incidents</p> </li> <li> <p>Compliance monitoring: Ensure only authorized kernel modules are loaded</p> </li> <li> <p>Forensic analysis: Analyze kernel-level persistence techniques</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/kernel_module_loading/#legitimate-vs-malicious-loading","title":"LEGITIMATE VS. MALICIOUS LOADING","text":"<p>Legitimate scenarios: - Hardware driver installation - System feature activation (e.g., VPN, virtualization) - Administrative tools requiring kernel access - Security software components</p> <p>Suspicious indicators: - Loading from unusual locations - Unsigned or unknown modules - Loading during suspicious timeframes - Modules with obfuscated names - Concurrent with other suspicious activities</p>"},{"location":"docs/events/builtin/man/security/kernel_module_loading/#detection-challenges","title":"DETECTION CHALLENGES","text":"<ul> <li>False positives: Legitimate administrative activities</li> <li>Timing: Detection after module is already loaded</li> <li>Evasion: Advanced modules may use anti-detection techniques</li> <li>Context: Distinguishing legitimate from malicious loading</li> </ul>"},{"location":"docs/events/builtin/man/security/kernel_module_loading/#related-events","title":"RELATED EVENTS","text":"<ul> <li>init_module: Primary system call for module loading</li> <li>security_kernel_read_file: Kernel file access monitoring</li> <li>hidden_kernel_module: Detection of hidden modules after loading</li> <li>module_load: Alternative module loading detection</li> <li>finit_module: File-based module loading system call</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/","title":"TRACEE-K8S-API-CONNECTION","text":""},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/#name","title":"NAME","text":"<p>k8s_api_connection - detect container connections to Kubernetes API server</p>"},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/#description","title":"DESCRIPTION","text":"<p>This event detects attempts by containers to connect to the Kubernetes API server. The Kubernetes API server is the control plane component that exposes the Kubernetes API, making it a critical security boundary. Unauthorized access attempts could indicate reconnaissance, credential theft, or attempts to deploy malicious workloads.</p> <p>The event maintains a mapping of container IDs to their respective Kubernetes API server IP addresses and monitors for connection attempts to these addresses, providing early warning of potential security breaches.</p>"},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1013</li> <li>Version: 0.1.0</li> <li>Severity: 1</li> <li>Category: Discovery</li> <li>Technique: Cloud Service Discovery</li> <li>Tags: container</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/#data-fields","title":"DATA FIELDS","text":"<p>ip (string) : The IP address of the Kubernetes API server being accessed</p> <p>container_id (string) : ID of the container making the connection</p> <p>comm (string) : Name of the process attempting the connection</p> <p>port (uint32) : Destination port of the connection</p>"},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>sched_process_exec</code>: Track process execution in containers</li> <li><code>security_socket_connect</code>: Monitor socket connections</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Access control: Monitor unauthorized API access</p> </li> <li> <p>Container security: Detect container escape attempts</p> </li> <li> <p>Privilege escalation: Identify unauthorized API interactions</p> </li> <li> <p>Reconnaissance detection: Spot information gathering attempts</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/#kubernetes-security","title":"KUBERNETES SECURITY","text":"<p>Critical security aspects:</p> <ul> <li>API server is the cluster control plane</li> <li>Manages all cluster operations</li> <li>Handles authentication and authorization</li> <li>Stores sensitive cluster data</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Information gathering: Enumerate cluster resources</li> <li>Credential theft: Access service account tokens</li> <li>Workload deployment: Launch malicious pods</li> <li>Lateral movement: Access other namespaces</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>Cluster Control: Full API access possible</li> <li>Sensitive Data: Access to secrets</li> <li>Cross-namespace: Potential blast radius</li> <li>Persistence: Ability to create workloads</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid API access scenarios:</p> <ul> <li>Service mesh sidecars</li> <li>Monitoring agents</li> <li>Operators and controllers</li> <li>CI/CD tools</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Network policies</li> <li>RBAC restrictions</li> <li>Service account limits</li> <li>API server audit logging</li> <li>Pod security standards</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_api_connection/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_socket_connect: Network connections</li> <li>sched_process_exec: Process execution</li> <li>container_create: Container lifecycle</li> <li>k8s_cert_theft: Certificate theft attempts</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/","title":"TRACEE-K8S-CERT-THEFT","text":""},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/#name","title":"NAME","text":"<p>k8s_cert_theft - detect Kubernetes TLS certificate theft attempts</p>"},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/#description","title":"DESCRIPTION","text":"<p>This event detects unauthorized access or potential theft of Kubernetes Transport Layer Security (TLS) certificates. These certificates are critical for secure communication between Kubernetes components, and their compromise could allow attackers to impersonate legitimate cluster components.</p> <p>The event monitors both direct file access and rename operations involving Kubernetes certificate files, helping detect various exfiltration techniques. It also verifies that only authorized processes access these sensitive files.</p>"},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1018</li> <li>Version: 1</li> <li>Severity: 3</li> <li>Category: credential-access</li> <li>Technique: Steal Application Access Token</li> <li>MITRE ID: attack-pattern--890c9858-598c-401d-a4d5-c67ebcdd703a</li> <li>MITRE External ID: T1528</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying security events:</p> <p>pathname (string) : Path to the certificate file being accessed</p> <p>flags (string) : File access flags indicating the type of operation</p> <p>old_path (string) : Original path in case of rename operations</p> <p>new_path (string) : New path in case of rename operations</p>"},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_file_open</code>: Monitor certificate file access</li> <li><code>security_inode_rename</code>: Track certificate file renames</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Certificate protection: Monitor sensitive TLS file access</p> </li> <li> <p>Credential theft detection: Identify unauthorized access attempts</p> </li> <li> <p>Cluster security: Protect component authentication</p> </li> <li> <p>Incident response: Track potential certificate compromise</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/#kubernetes-certificates","title":"KUBERNETES CERTIFICATES","text":"<p>Critical certificate types:</p> <ul> <li>API server certificates</li> <li>Kubelet client certificates</li> <li>Service account tokens</li> <li>etcd client certificates</li> <li>Controller manager certificates</li> <li>Scheduler certificates</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Component impersonation: Masquerade as legitimate services</li> <li>Man-in-the-middle: Intercept cluster communications</li> <li>Credential theft: Access to cluster authentication</li> <li>Lateral movement: Cross-namespace access</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>Cluster-wide Impact: Affects all communications</li> <li>Authentication Bypass: Enables impersonation</li> <li>Long-term Access: Valid until certificate expiry</li> <li>Detection Evasion: Legitimate-looking traffic</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Certificate rotation</li> <li>File permissions hardening</li> <li>Process isolation</li> <li>Access auditing</li> <li>Certificate pinning</li> <li>Network segmentation</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid certificate access patterns:</p> <ul> <li>Kubernetes components</li> <li>Certificate managers</li> <li>Backup processes</li> <li>Monitoring agents</li> </ul>"},{"location":"docs/events/builtin/man/security/kubernetes_certificate_theft_attempt/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_file_open: File access monitoring</li> <li>security_inode_rename: File rename operations</li> <li>k8s_api_connection: API server connections</li> <li>container_create: Container lifecycle events</li> </ul>"},{"location":"docs/events/builtin/man/security/ld_preload/","title":"TRACEE-LD-PRELOAD","text":""},{"location":"docs/events/builtin/man/security/ld_preload/#name","title":"NAME","text":"<p>ld_preload - detect library preload code injection attempts</p>"},{"location":"docs/events/builtin/man/security/ld_preload/#description","title":"DESCRIPTION","text":"<p>This event detects potential code injection attempts using library preloading mechanisms. It monitors the use of <code>LD_PRELOAD</code> and <code>LD_LIBRARY_PATH</code> environment variables, as well as modifications to <code>/etc/ld.so.preload</code>. These mechanisms can be exploited to inject malicious code by forcing programs to load unauthorized libraries before their legitimate dependencies.</p> <p>The event provides comprehensive monitoring of both environment-based and file-based preloading techniques, helping detect various code injection and function hooking attempts.</p>"},{"location":"docs/events/builtin/man/security/ld_preload/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-107</li> <li>Version: 1</li> <li>Severity: 2</li> <li>Category: persistence</li> <li>Technique: Hijack Execution Flow</li> <li>MITRE ID: attack-pattern--aedfca76-3b30-4866-b2aa-0f1d7fd1e4b6</li> <li>MITRE External ID: T1574</li> </ul>"},{"location":"docs/events/builtin/man/security/ld_preload/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/ld_preload/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from multiple underlying events:</p> <p>env_vars (map[string]string) : Environment variables related to library loading</p> <p>pathname (string) : Path to preload configuration being accessed</p> <p>flags (string) : File access flags for preload operations</p> <p>old_path (string) : Original path in rename operations</p> <p>new_path (string) : New path in rename operations</p>"},{"location":"docs/events/builtin/man/security/ld_preload/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>sched_process_exec</code>: Monitor process environment variables</li> <li><code>security_file_open</code>: Track preload file access</li> <li><code>security_inode_rename</code>: Monitor preload file renames</li> </ul>"},{"location":"docs/events/builtin/man/security/ld_preload/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Code injection detection: Identify unauthorized library loading</p> </li> <li> <p>Runtime integrity: Monitor library load order tampering</p> </li> <li> <p>Function hooking: Detect API interception attempts</p> </li> <li> <p>Persistence detection: Identify malicious library persistence</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/ld_preload/#preload-mechanisms","title":"PRELOAD MECHANISMS","text":"<p>Common preload vectors:</p> <ul> <li>LD_PRELOAD: Environment variable for single library</li> <li>LD_LIBRARY_PATH: Search path manipulation</li> <li>/etc/ld.so.preload: System-wide preload configuration</li> <li>RPATH/RUNPATH: Binary-specific library paths</li> </ul>"},{"location":"docs/events/builtin/man/security/ld_preload/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Function hooking: Intercept library calls</li> <li>Credential theft: Hook authentication functions</li> <li>Anti-debugging: Intercept debugging APIs</li> <li>Persistence: System-wide library injection</li> </ul>"},{"location":"docs/events/builtin/man/security/ld_preload/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>System-Wide Impact: Affects all dynamic executables</li> <li>Privilege Escalation: Potential for elevated access</li> <li>Stealth Capability: Hard to detect once loaded</li> <li>Persistence: Survives process restarts</li> </ul>"},{"location":"docs/events/builtin/man/security/ld_preload/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid preload scenarios:</p> <ul> <li>Debugging tools</li> <li>Profiling libraries</li> <li>API compatibility layers</li> <li>System monitoring tools</li> </ul>"},{"location":"docs/events/builtin/man/security/ld_preload/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Restrict environment variables</li> <li>Monitor preload files</li> <li>Use static linking</li> <li>Implement library pinning</li> <li>Regular integrity checks</li> </ul>"},{"location":"docs/events/builtin/man/security/ld_preload/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_bprm_check: Binary execution security</li> <li>shared_object_loaded: Library loading events</li> <li>symbols_loaded: Symbol resolution tracking</li> <li>dynamic_code_loading: Runtime code execution</li> </ul>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/","title":"TRACEE-MEM-PROT-ALERT","text":""},{"location":"docs/events/builtin/man/security/mem_prot_alert/#name","title":"NAME","text":"<p>mem_prot_alert - suspicious memory protection change detection</p>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/#description","title":"DESCRIPTION","text":"<p>Triggered when memory region protection changes are detected that are suspicious for malicious activity or that expose memory to potential exploitation. This security signature identifies memory access protection changes that might enable code injection, allow dynamic code execution, or create other security vulnerabilities.</p> <p>Memory protection changes are critical security indicators as they can indicate exploitation attempts, code injection, or evasion techniques. This event provides detailed alerts about specific suspicious patterns in memory protection modifications.</p> <p>This signature is useful for:</p> <ul> <li>Code injection detection: Identify attempts to make data pages executable</li> <li>Exploit prevention: Detect memory manipulation techniques used in attacks</li> <li>Dynamic analysis: Monitor suspicious memory operations during runtime</li> </ul>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1019</li> <li>Version: 1</li> <li>Severity: 2 (Moderate threat level)</li> <li>Category: defense-evasion</li> <li>Technique: Exploitation for Privilege Escalation</li> <li>MITRE ATT&amp;CK: T1068</li> </ul>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/#event-sets","title":"EVENT SETS","text":"<p>signatures, memory, defense_evasion</p>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/#data-fields","title":"DATA FIELDS","text":"<p>alert (uint32) : The specific alert identifier (parsed to meaningful string with parse-args flag)</p> <p>addr (trace.Pointer) : The start address of the memory region where the alert occurred</p> <p>len (uint64) : The length of the memory region where the alert occurred</p> <p>prot (integer) : The new access protection for the memory region</p> <p>prev_prot (integer) : The previous access protection of the memory region</p> <p>pathname (string, optional) : The path of the file related to the memory region (if file-backed)</p> <p>dev (uint32, optional) : The device of the file related to the memory region (if file-backed)</p> <p>inode (uint64, optional) : The inode of the file related to the memory region (if file-backed)</p> <p>ctime (uint64, optional) : The last change time of the file related to the memory region (if file-backed)</p>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/#dependencies","title":"DEPENDENCIES","text":"<p>LSM Hooks:</p> <ul> <li>security_mmap_addr (required): Monitors memory mapping operations for suspicious permissions</li> <li>security_file_mprotect (required): Monitors memory protection changes</li> </ul> <p>Tracepoints:</p> <ul> <li>sys_enter (required): Extracts syscall arguments for deeper analysis</li> </ul>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/#alert-types","title":"ALERT TYPES","text":"<p>Current alert categories and their meanings:</p> <p>\"Mmaped region with W+E permissions!\" : Memory mapping operation creating a region with both write and execute permissions, enabling dynamic code execution</p> <p>\"Protection changed to Executable!\" : Memory region protection changed to allow execution after having different permissions previously</p> <p>\"Protection changed from E to W+E!\" : Memory region changed from execute-only to write+execute, enabling dynamic code modification and execution</p> <p>\"Protection changed from W to E!\" : Memory region changed from write-only to execute-only, potentially indicating evasion attempt after code preparation</p>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Exploit detection: Identify code injection and memory corruption exploits</p> </li> <li> <p>Malware analysis: Monitor malware attempting to execute injected code</p> </li> <li> <p>Incident response: Investigate suspicious memory operations during security events</p> </li> <li> <p>Vulnerability research: Analyze exploitation techniques and memory manipulation</p> </li> <li> <p>Runtime security: Detect real-time attempts to bypass memory protections</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/#attack-scenarios","title":"ATTACK SCENARIOS","text":"<p>Common attack patterns triggering alerts:</p> <ul> <li>Shellcode injection: Making heap/stack regions executable for shellcode</li> <li>ROP/JOP preparation: Preparing memory regions for return/jump-oriented programming</li> <li>Process injection: Modifying target process memory for code injection</li> <li>Dynamic code loading: Malware unpacking and loading additional payloads</li> <li>JIT spraying: Preparing just-in-time compiled code for exploitation</li> </ul>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/#memory-protection-combinations","title":"MEMORY PROTECTION COMBINATIONS","text":"<p>Suspicious protection combinations:</p> <ul> <li>W+E (Write+Execute): Most dangerous, allows dynamic code creation and execution</li> <li>W\u2192E transitions: Writing code then making it executable (common in JIT but also exploits)</li> <li>E\u2192W+E transitions: Adding write permissions to executable regions</li> <li>Large anonymous W+E regions: Unusual for legitimate applications</li> </ul>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/#legitimate-scenarios","title":"LEGITIMATE SCENARIOS","text":"<p>Some legitimate uses that may trigger alerts:</p> <ul> <li>JIT compilers: Languages like Java, .NET, JavaScript with dynamic compilation</li> <li>Dynamic code generation: Template engines and runtime code generators</li> <li>Debugging tools: Debuggers modifying memory for breakpoints and analysis</li> <li>Runtime loaders: Dynamic library loading and symbol resolution</li> <li>Self-modifying code: Some legitimate applications using code modification</li> </ul>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/#evasion-techniques","title":"EVASION TECHNIQUES","text":"<p>Attackers may attempt to evade detection:</p> <ul> <li>Small region modifications: Making small changes to avoid detection thresholds</li> <li>Timing-based evasion: Spacing out protection changes over time</li> <li>Legitimate tool abuse: Using debuggers or JIT environments for malicious purposes</li> <li>Memory fragmentation: Splitting malicious code across multiple regions</li> </ul>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/#mitigation-strategies","title":"MITIGATION STRATEGIES","text":"<ul> <li>DEP/NX enforcement: Hardware-based execution prevention for data pages</li> <li>ASLR: Address Space Layout Randomization to complicate exploitation</li> <li>CFI: Control Flow Integrity to prevent ROP/JOP attacks</li> <li>W^X policies: Enforce write-xor-execute memory policies</li> <li>Memory tagging: Hardware memory tagging for exploit detection</li> </ul>"},{"location":"docs/events/builtin/man/security/mem_prot_alert/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_mmap_addr: Memory mapping security checks</li> <li>security_file_mprotect: Memory protection change security events</li> <li>mmap: Memory mapping system call</li> <li>mprotect: Memory protection change system call</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_fops_hooking/","title":"TRACEE-PROC-FOPS-HOOKING","text":""},{"location":"docs/events/builtin/man/security/proc_fops_hooking/#name","title":"NAME","text":"<p>proc_fops_hooking - detect proc filesystem file operations hooking</p>"},{"location":"docs/events/builtin/man/security/proc_fops_hooking/#description","title":"DESCRIPTION","text":"<p>This event detects malicious hooking of file operations in the proc filesystem. The proc filesystem is a pseudo-filesystem that provides an interface to kernel data structures by representing processes and system information as files. Attackers, particularly rootkits, can hook these file operations to manipulate how the system interacts with process information.</p> <p>By hooking proc filesystem operations, malware can hide processes, modify system information, and interfere with system monitoring tools like ps and top. This type of manipulation often indicates kernel compromise and is a common technique used by rootkits for stealth and persistence.</p>"},{"location":"docs/events/builtin/man/security/proc_fops_hooking/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1020</li> <li>Version: 1</li> <li>Severity: 3</li> <li>Category: defense-evasion</li> <li>Technique: Rootkit</li> <li>MITRE ID: attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b</li> <li>MITRE External ID: T1014</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_fops_hooking/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/proc_fops_hooking/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying hooked_proc_fops event:</p> <p>file_path (string) : Path in procfs being hooked</p> <p>fops_address (trace.Pointer) : Address of the hooked file operations structure</p> <p>hook_address (trace.Pointer) : Address of the hook function</p> <p>symbol_owner (string) : Module owning the hook function</p>"},{"location":"docs/events/builtin/man/security/proc_fops_hooking/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>hooked_proc_fops</code>: Monitor proc filesystem operation hooks</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_fops_hooking/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Rootkit detection: Identify kernel-level malware</p> </li> <li> <p>Process hiding: Detect process manipulation attempts</p> </li> <li> <p>System integrity: Monitor kernel function hooks</p> </li> <li> <p>Anti-debugging: Identify anti-analysis techniques</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/proc_fops_hooking/#proc-filesystem","title":"PROC FILESYSTEM","text":"<p>Critical aspects of procfs:</p> <ul> <li>Process information interface</li> <li>Kernel data structures</li> <li>System statistics</li> <li>Runtime configurations</li> <li>Hardware information</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_fops_hooking/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Process hiding: Conceal malicious processes</li> <li>System info manipulation: Hide system activity</li> <li>Anti-forensics: Prevent analysis</li> <li>Persistence: Maintain kernel-level access</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_fops_hooking/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>Kernel Level: Direct kernel manipulation</li> <li>Stealth Capability: Hides from tools</li> <li>System Impact: Affects all monitoring</li> <li>Recovery Difficulty: Complex remediation</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_fops_hooking/#hooking-techniques","title":"HOOKING TECHNIQUES","text":"<p>Common hooking methods:</p> <ul> <li>Direct modification: Change function pointers</li> <li>Inline hooking: Modify function code</li> <li>Jump/trampoline: Redirect execution</li> <li>Table modification: Alter operation tables</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_fops_hooking/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Kernel integrity monitoring</li> <li>Function pointer validation</li> <li>Memory protection</li> <li>Module signing</li> <li>Regular integrity checks</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_fops_hooking/#related-events","title":"RELATED EVENTS","text":"<ul> <li>hooked_syscall: System call table hooks</li> <li>hidden_kernel_module: Hidden module detection</li> <li>symbols_loaded: Kernel symbol loading</li> <li>ftrace_hook: Function tracing hooks</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_kcore_read/","title":"TRACEE-PROC-KCORE-READ","text":""},{"location":"docs/events/builtin/man/security/proc_kcore_read/#name","title":"NAME","text":"<p>proc_kcore_read - detect access to system memory through /proc/kcore</p>"},{"location":"docs/events/builtin/man/security/proc_kcore_read/#description","title":"DESCRIPTION","text":"<p>This event detects attempts to read the /proc/kcore file, which provides a complete image of the system's physical memory in ELF core dump format. While this file is useful for legitimate debugging purposes, it can be exploited by attackers to dump system memory, potentially exposing sensitive information like credentials, encryption keys, and process data.</p> <p>Access to /proc/kcore is particularly concerning in containerized environments as it could be used for container escape attempts by providing detailed information about the host system's memory layout and contents.</p>"},{"location":"docs/events/builtin/man/security/proc_kcore_read/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1021</li> <li>Version: 1</li> <li>Severity: 2</li> <li>Category: privilege-escalation</li> <li>Technique: Escape to Host</li> <li>MITRE ID: attack-pattern--4a5b7ade-8bb5-4853-84ed-23f262002665</li> <li>MITRE External ID: T1611</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_kcore_read/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/proc_kcore_read/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying security_file_open event:</p> <p>pathname (string) : Path to the file being accessed (/proc/kcore)</p> <p>flags (string) : File access flags indicating read attempt</p> <p>pid (int32) : Process ID attempting the access</p> <p>uid (uint32) : User ID performing the access</p>"},{"location":"docs/events/builtin/man/security/proc_kcore_read/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_file_open</code>: Monitor file access attempts</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_kcore_read/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Memory protection: Prevent unauthorized memory dumps</p> </li> <li> <p>Container security: Detect potential escape attempts</p> </li> <li> <p>Privilege escalation: Identify memory inspection attempts</p> </li> <li> <p>Data protection: Prevent sensitive data exposure</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/proc_kcore_read/#memory-exposure","title":"MEMORY EXPOSURE","text":"<p>Critical data potentially exposed:</p> <ul> <li>Encryption keys</li> <li>Authentication tokens</li> <li>Process memory</li> <li>System credentials</li> <li>Configuration data</li> <li>Runtime secrets</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_kcore_read/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Memory dumping: Extract sensitive data</li> <li>Container escape: Analyze host memory</li> <li>Credential theft: Extract authentication data</li> <li>System analysis: Map memory layout</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_kcore_read/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>Data Exposure: Complete memory visibility</li> <li>Privilege Level: Root access required</li> <li>Attack Surface: Host system exposure</li> <li>Information Leak: Sensitive data access</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_kcore_read/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid access scenarios:</p> <ul> <li>Kernel debugging</li> <li>Memory analysis</li> <li>Crash analysis</li> <li>Performance profiling</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_kcore_read/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Restrict /proc/kcore access</li> <li>Container isolation</li> <li>Process restrictions</li> <li>Memory protection</li> <li>Access auditing</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_kcore_read/#related-events","title":"RELATED EVENTS","text":"<ul> <li>proc_mem_access: Process memory access</li> <li>proc_mem_code_injection: Memory code injection</li> <li>security_file_open: File access monitoring</li> <li>mem_prot_alert: Memory protection alerts</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_access/","title":"TRACEE-PROC-MEM-ACCESS","text":""},{"location":"docs/events/builtin/man/security/proc_mem_access/#name","title":"NAME","text":"<p>proc_mem_access - detect process memory access through /proc filesystem</p>"},{"location":"docs/events/builtin/man/security/proc_mem_access/#description","title":"DESCRIPTION","text":"<p>This event detects attempts to access process memory through the /proc filesystem. In Linux, each process has a mem file in its /proc/[pid] directory that provides direct access to the process's memory space. While this interface is valuable for debugging, it can be exploited to read sensitive information like credentials, secrets, and runtime data from processes.</p> <p>The event monitors access attempts to these memory files, helping detect potential credential theft, memory dumping, or other malicious attempts to extract sensitive information from running processes.</p>"},{"location":"docs/events/builtin/man/security/proc_mem_access/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1023</li> <li>Version: 1</li> <li>Severity: 3</li> <li>Category: credential-access</li> <li>Technique: Proc Filesystem</li> <li>MITRE ID: attack-pattern--3120b9fa-23b8-4500-ae73-09494f607b7d</li> <li>MITRE External ID: T1003.007</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_access/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/proc_mem_access/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying security_file_open event:</p> <p>pathname (string) : Path to the process memory file being accessed</p> <p>flags (string) : File access flags indicating the type of access</p> <p>pid (int32) : Process ID attempting the access</p> <p>target_pid (int32) : Process ID whose memory is being accessed</p>"},{"location":"docs/events/builtin/man/security/proc_mem_access/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_file_open</code>: Monitor file access attempts</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_access/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Credential protection: Prevent memory-based credential theft</p> </li> <li> <p>Process integrity: Monitor unauthorized memory access</p> </li> <li> <p>Secret protection: Protect runtime secrets</p> </li> <li> <p>Attack detection: Identify memory inspection attempts</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_access/#process-memory","title":"PROCESS MEMORY","text":"<p>Sensitive data in process memory:</p> <ul> <li>Authentication tokens</li> <li>Encryption keys</li> <li>Session data</li> <li>Configuration secrets</li> <li>Runtime credentials</li> <li>User input data</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_access/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Credential theft: Extract authentication data</li> <li>Secret extraction: Access runtime secrets</li> <li>Memory dumping: Capture process state</li> <li>Data exfiltration: Access sensitive information</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_access/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>Data Exposure: Direct memory access</li> <li>Privilege Level: Root access required</li> <li>Process Impact: Target process affected</li> <li>Information Leak: Sensitive data access</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_access/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid memory access scenarios:</p> <ul> <li>Process debugging</li> <li>Memory analysis</li> <li>Crash investigation</li> <li>Performance profiling</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_access/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Process isolation</li> <li>Memory protection</li> <li>Access restrictions</li> <li>Audit logging</li> <li>Privilege control</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_access/#related-events","title":"RELATED EVENTS","text":"<ul> <li>proc_kcore_read: System memory access</li> <li>proc_mem_code_injection: Memory code injection</li> <li>security_file_open: File access monitoring</li> <li>mem_prot_alert: Memory protection alerts</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/","title":"TRACEE-PROC-MEM-CODE-INJECTION","text":""},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/#name","title":"NAME","text":"<p>proc_mem_code_injection - detect code injection through /proc/[pid]/mem</p>"},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/#description","title":"DESCRIPTION","text":"<p>This event detects attempts to inject code into processes by writing to their memory through the /proc/[pid]/mem interface. This technique allows direct manipulation of process memory and is commonly used by attackers to inject malicious code, modify process behavior, or establish persistence.</p> <p>Code injection through /proc/[pid]/mem is particularly dangerous as it allows attackers to execute arbitrary code within the context of another process, potentially bypassing security controls or escalating privileges by targeting privileged processes.</p>"},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1024</li> <li>Version: 1</li> <li>Severity: 3</li> <li>Category: defense-evasion</li> <li>Technique: Proc Memory</li> <li>MITRE ID: attack-pattern--d201d4cc-214d-4a74-a1ba-b3fa09fd4591</li> <li>MITRE External ID: T1055.009</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying security_file_open event:</p> <p>pathname (string) : Path to the process memory file being written</p> <p>flags (string) : File access flags indicating write attempt</p> <p>pid (int32) : Process ID performing the injection</p> <p>target_pid (int32) : Process ID being injected into</p>"},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_file_open</code>: Monitor memory file write attempts</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Code injection detection: Identify memory-based attacks</p> </li> <li> <p>Process integrity: Monitor unauthorized modifications</p> </li> <li> <p>Malware detection: Spot injection-based malware</p> </li> <li> <p>Runtime protection: Prevent unauthorized code execution</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/#injection-techniques","title":"INJECTION TECHNIQUES","text":"<p>Common injection methods:</p> <ul> <li>Shellcode injection: Writing executable code</li> <li>Library injection: Loading malicious libraries</li> <li>Function hooking: Modifying function pointers</li> <li>Return-oriented programming: Chain existing code</li> <li>Thread injection: Creating remote threads</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Code execution: Running arbitrary code</li> <li>Process hollowing: Replacing process memory</li> <li>Function hooking: Intercepting calls</li> <li>Persistence: Maintaining access</li> <li>Privilege escalation: Targeting privileged processes</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>Process Context: Runs as target process</li> <li>Permission Bypass: Inherits process privileges</li> <li>Detection Evasion: Memory-only execution</li> <li>System Impact: Affects critical processes</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid memory modification scenarios:</p> <ul> <li>Debuggers</li> <li>Profilers</li> <li>Hot patching</li> <li>Runtime instrumentation</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Process isolation</li> <li>Memory protection</li> <li>Write restrictions</li> <li>Integrity monitoring</li> <li>Behavior analysis</li> </ul>"},{"location":"docs/events/builtin/man/security/proc_mem_code_injection/#related-events","title":"RELATED EVENTS","text":"<ul> <li>proc_mem_access: Process memory access</li> <li>process_vm_write_inject: Process memory writes</li> <li>dynamic_code_loading: Runtime code execution</li> <li>mem_prot_alert: Memory protection alerts</li> </ul>"},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/","title":"TRACEE-PROCESS-VM-WRITE-INJECTION","text":""},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/#name","title":"NAME","text":"<p>process_vm_write_inject - detect code injection via process_vm_writev</p>"},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/#description","title":"DESCRIPTION","text":"<p>This event detects potential code injection attacks using the process_vm_writev system call. This syscall allows one process to write directly into another process's memory space, which while legitimate in some cases, is also a common technique for injecting malicious code.</p> <p>The event specifically monitors for cross-process memory writes where the source and destination process IDs differ, which could indicate an attempt to execute arbitrary code within the context of another process.</p>"},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1025</li> <li>Version: 1</li> <li>Severity: 3</li> <li>Category: defense-evasion</li> <li>Technique: Process Injection</li> <li>MITRE ID: attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d</li> <li>MITRE External ID: T1055</li> </ul>"},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying process_vm_writev event:</p> <p>src_pid (int32) : Process ID performing the write</p> <p>dst_pid (int32) : Process ID being written to</p> <p>local_iov ([]iovec) : Source memory segments</p> <p>remote_iov ([]iovec) : Destination memory segments</p> <p>flags (uint32) : Operation flags</p>"},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>process_vm_writev</code>: Monitor cross-process memory writes</li> </ul>"},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Code injection detection: Identify process memory tampering</p> </li> <li> <p>Process integrity: Monitor unauthorized memory writes</p> </li> <li> <p>Malware detection: Spot injection-based malware</p> </li> <li> <p>Runtime protection: Prevent unauthorized code execution</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/#injection-techniques","title":"INJECTION TECHNIQUES","text":"<p>Common injection methods:</p> <ul> <li>Direct memory writes: Using process_vm_writev</li> <li>Shellcode injection: Writing executable code</li> <li>DLL injection: Loading malicious libraries</li> <li>Thread injection: Creating remote threads</li> <li>Reflective injection: Self-loading code</li> </ul>"},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Code execution: Running arbitrary code</li> <li>Process hollowing: Replacing process memory</li> <li>DLL hijacking: Forcing library loads</li> <li>Credential theft: Accessing process memory</li> </ul>"},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>Process Context: Runs as target process</li> <li>Permission Bypass: Inherits process privileges</li> <li>Detection Evasion: Blends with process activity</li> <li>Memory Persistence: Survives disk scans</li> </ul>"},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid cross-process writes:</p> <ul> <li>Debuggers</li> <li>Performance profilers</li> <li>Memory analysis tools</li> <li>IPC mechanisms</li> </ul>"},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Process isolation</li> <li>Memory protection</li> <li>ASLR enforcement</li> <li>Integrity monitoring</li> <li>Behavior analysis</li> </ul>"},{"location":"docs/events/builtin/man/security/process_vm_write_code_injection/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_file_mprotect: Memory protection changes</li> <li>mem_prot_alert: Memory protection alerts</li> <li>dynamic_code_loading: Runtime code execution</li> <li>process_execute: Process creation tracking</li> </ul>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/","title":"TRACEE-PTRACE-CODE-INJECTION","text":""},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#name","title":"NAME","text":"<p>ptrace_code_injection - ptrace-based code injection detection</p>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#description","title":"DESCRIPTION","text":"<p>Triggered when code injection attempts are detected using the <code>ptrace</code> system call. This security signature specifically monitors for <code>PTRACE_POKETEXT</code> and <code>PTRACE_POKEDATA</code> requests, which are commonly used to alter target process memory and inject malicious code.</p> <p>Code injection through ptrace allows attackers to execute arbitrary code within the context of another process, evading detection and leveraging the permissions of the injected process. This technique is particularly dangerous as malicious operations appear to originate from legitimate processes.</p> <p>This signature is useful for:</p> <ul> <li>Code injection detection: Identify attempts to inject code into other processes</li> <li>Process manipulation monitoring: Detect unauthorized process memory modifications</li> <li>Advanced attack detection: Identify sophisticated evasion techniques</li> </ul>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-103</li> <li>Version: 1</li> <li>Severity: 3 (Moderate to high threat level)</li> <li>Category: defense-evasion</li> <li>Technique: Ptrace System Calls</li> <li>MITRE ATT&amp;CK: T1055.008</li> </ul>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#event-sets","title":"EVENT SETS","text":"<p>signatures, defense_evasion</p>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#data-fields","title":"DATA FIELDS","text":"<p>ptrace_request (string) : The specific ptrace request used (PTRACE_POKETEXT or PTRACE_POKEDATA)</p> <p>target_process (object) : Information about the process being injected into</p> <p>injector_process (object) : Information about the process performing the injection</p>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#dependencies","title":"DEPENDENCIES","text":"<p>System Events:</p> <ul> <li>ptrace (required): Monitors ptrace system call for specific memory manipulation requests</li> </ul>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#detection-logic","title":"DETECTION LOGIC","text":"<p>The signature monitors for:</p> <ol> <li>Ptrace system calls with specific request types</li> <li>PTRACE_POKETEXT requests: Writing to target process text/code segments</li> <li>PTRACE_POKEDATA requests: Writing to target process data segments</li> <li>Memory modification patterns: Identifying potential code injection signatures</li> </ol>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Malware detection: Identify malware using process injection techniques</p> </li> <li> <p>Advanced threat hunting: Detect sophisticated evasion mechanisms</p> </li> <li> <p>Incident response: Investigate process manipulation during security incidents</p> </li> <li> <p>Security monitoring: Detect unauthorized process memory modifications</p> </li> <li> <p>Forensic analysis: Analyze code injection techniques used in attacks</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#ptrace-requests-monitored","title":"PTRACE REQUESTS MONITORED","text":"<ul> <li>PTRACE_POKETEXT: Write data to target process text segment (code injection)</li> <li>PTRACE_POKEDATA: Write data to target process data segment (data modification)</li> </ul>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#attack-scenarios","title":"ATTACK SCENARIOS","text":"<p>Common code injection scenarios:</p> <ul> <li>Shellcode injection: Injecting executable shellcode into target processes</li> <li>DLL injection: Loading malicious libraries into target processes</li> <li>Process hollowing: Replacing legitimate process code with malicious code</li> <li>API hooking: Intercepting and modifying function calls</li> <li>Return-oriented programming: Chaining existing code gadgets</li> </ul>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#legitimate-use-cases","title":"LEGITIMATE USE CASES","text":"<p>Ptrace is also used legitimately by:</p> <ul> <li>Debuggers: GDB, LLDB for debugging applications</li> <li>Profilers: Performance analysis tools</li> <li>Security tools: Anti-malware and monitoring software</li> <li>System administration: Process monitoring and management tools</li> </ul>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#evasion-techniques","title":"EVASION TECHNIQUES","text":"<p>Attackers may attempt to evade detection through:</p> <ul> <li>Timing-based evasion: Spacing out injection operations</li> <li>Process selection: Targeting specific processes less likely to be monitored</li> <li>Small payload injection: Injecting minimal code to avoid detection thresholds</li> <li>Legitimate tool abuse: Using debugging tools for malicious purposes</li> </ul>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#mitigation-strategies","title":"MITIGATION STRATEGIES","text":"<ul> <li>Process isolation: Use containers and sandboxing</li> <li>Privilege restriction: Limit ptrace capabilities through seccomp/AppArmor</li> <li>Monitoring: Deploy comprehensive process monitoring</li> <li>Yama LSM: Use Yama security module to restrict ptrace usage</li> </ul>"},{"location":"docs/events/builtin/man/security/ptrace_code_injection/#related-events","title":"RELATED EVENTS","text":"<ul> <li>ptrace: Primary system call monitored for injection attempts</li> <li>process_vm_write_code_injection: Alternative code injection detection method</li> <li>anti_debugging: Related anti-analysis technique detection</li> <li>suspicious_syscall_source: Unusual syscall source location detection</li> </ul>"},{"location":"docs/events/builtin/man/security/rcd_modification/","title":"TRACEE-RCD-MODIFICATION","text":""},{"location":"docs/events/builtin/man/security/rcd_modification/#name","title":"NAME","text":"<p>rcd_modification - detect modifications to system runlevel scripts</p>"},{"location":"docs/events/builtin/man/security/rcd_modification/#description","title":"DESCRIPTION","text":"<p>This event detects modifications to runlevel control directories (rcd) scripts and related files. These scripts are executed during system boot and runlevel changes, making them attractive targets for attackers seeking to establish persistence. By modifying these initialization scripts, malicious actors can ensure their code runs automatically when the system starts or changes states.</p> <p>The event monitors not only direct modifications to rcd files but also renames and executions of related commands like update-rc.d, providing comprehensive coverage of potential persistence mechanisms targeting system initialization.</p>"},{"location":"docs/events/builtin/man/security/rcd_modification/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1026</li> <li>Version: 1</li> <li>Severity: 2</li> <li>Category: persistence</li> <li>Technique: RC Scripts</li> <li>MITRE ID: attack-pattern--dca670cf-eeec-438f-8185-fd959d9ef211</li> <li>MITRE External ID: T1037.004</li> </ul>"},{"location":"docs/events/builtin/man/security/rcd_modification/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/rcd_modification/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from multiple underlying events:</p> <p>pathname (string) : Path to the rcd file being accessed</p> <p>flags (string) : File access flags indicating modification</p> <p>old_path (string) : Original path in rename operations</p> <p>new_path (string) : New path in rename operations</p> <p>comm (string) : Command being executed (for update-rc.d)</p>"},{"location":"docs/events/builtin/man/security/rcd_modification/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_file_open</code>: Monitor file modifications</li> <li><code>security_inode_rename</code>: Track file renames</li> <li><code>sched_process_exec</code>: Monitor rc management commands</li> </ul>"},{"location":"docs/events/builtin/man/security/rcd_modification/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Persistence detection: Identify boot-time malware</p> </li> <li> <p>System integrity: Monitor init script changes</p> </li> <li> <p>Configuration control: Track service changes</p> </li> <li> <p>Boot sequence protection: Prevent unauthorized changes</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/rcd_modification/#runlevel-scripts","title":"RUNLEVEL SCRIPTS","text":"<p>Critical script locations:</p> <ul> <li>/etc/rc.d/</li> <li>/etc/init.d/</li> <li>/etc/rc*.d/</li> <li>System V init scripts</li> <li>Update-rc.d command</li> <li>Chkconfig command</li> </ul>"},{"location":"docs/events/builtin/man/security/rcd_modification/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Boot persistence: Ensure malware survival</li> <li>Service creation: Add malicious services</li> <li>Privilege escalation: Run as root at boot</li> <li>Defense evasion: Hide in legitimate scripts</li> </ul>"},{"location":"docs/events/builtin/man/security/rcd_modification/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>System-Wide Impact: Affects all users</li> <li>Root Access: Runs with full privileges</li> <li>Boot-Time Execution: Early system access</li> <li>Persistence: Survives reboots</li> </ul>"},{"location":"docs/events/builtin/man/security/rcd_modification/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid modification scenarios:</p> <ul> <li>Service installation</li> <li>System configuration</li> <li>Package management</li> <li>Boot sequence optimization</li> </ul>"},{"location":"docs/events/builtin/man/security/rcd_modification/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>File integrity monitoring</li> <li>Access restrictions</li> <li>Change management</li> <li>Audit logging</li> <li>Configuration control</li> </ul>"},{"location":"docs/events/builtin/man/security/rcd_modification/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_file_open: File access monitoring</li> <li>security_inode_rename: File rename operations</li> <li>sched_process_exec: Command execution</li> <li>scheduled_task_modification: Task scheduling changes</li> </ul>"},{"location":"docs/events/builtin/man/security/sched_debug_recon/","title":"TRACEE-SCHED-DEBUG-RECON","text":""},{"location":"docs/events/builtin/man/security/sched_debug_recon/#name","title":"NAME","text":"<p>sched_debug_recon - detect reconnaissance through scheduler debug files</p>"},{"location":"docs/events/builtin/man/security/sched_debug_recon/#description","title":"DESCRIPTION","text":"<p>This event detects attempts to read the scheduler debug files (/proc/sched_debug and /sys/kernel/debug/sched/debug), which provide detailed information about the system's CPU scheduling and running processes. While these files are intended for debugging purposes, they can be exploited by attackers for system reconnaissance.</p> <p>The information exposed through these files can help attackers understand system resource usage, process relationships, and scheduling patterns, potentially aiding in the planning of further attacks or resource exhaustion attempts.</p>"},{"location":"docs/events/builtin/man/security/sched_debug_recon/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1029</li> <li>Version: 1</li> <li>Severity: 1</li> <li>Category: discovery</li> <li>Technique: Container and Resource Discovery</li> <li>MITRE ID: attack-pattern--0470e792-32f8-46b0-a351-652bc35e9336</li> <li>MITRE External ID: T1613</li> </ul>"},{"location":"docs/events/builtin/man/security/sched_debug_recon/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/sched_debug_recon/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying security_file_open event:</p> <p>pathname (string) : Path to the scheduler debug file being accessed</p> <p>flags (string) : File access flags indicating read attempt</p> <p>pid (int32) : Process ID attempting the access</p> <p>uid (uint32) : User ID performing the access</p>"},{"location":"docs/events/builtin/man/security/sched_debug_recon/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_file_open</code>: Monitor file access attempts</li> </ul>"},{"location":"docs/events/builtin/man/security/sched_debug_recon/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Reconnaissance detection: Identify system profiling</p> </li> <li> <p>Resource monitoring: Track scheduler information access</p> </li> <li> <p>System integrity: Monitor debug file access</p> </li> <li> <p>Attack preparation: Detect pre-attack reconnaissance</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/sched_debug_recon/#exposed-information","title":"EXPOSED INFORMATION","text":"<p>Critical data revealed:</p> <ul> <li>CPU scheduling details</li> <li>Process run queues</li> <li>Thread priorities</li> <li>CPU load balancing</li> <li>Process migration stats</li> <li>Scheduling latencies</li> </ul>"},{"location":"docs/events/builtin/man/security/sched_debug_recon/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>System profiling: Understanding resource usage</li> <li>Process enumeration: Mapping running processes</li> <li>Resource analysis: Planning resource attacks</li> <li>Performance profiling: Identifying bottlenecks</li> </ul>"},{"location":"docs/events/builtin/man/security/sched_debug_recon/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>Information Disclosure: System internals exposed</li> <li>Attack Planning: Aids attack preparation</li> <li>Resource Mapping: System behavior exposed</li> <li>Performance Analysis: System bottlenecks revealed</li> </ul>"},{"location":"docs/events/builtin/man/security/sched_debug_recon/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid access scenarios:</p> <ul> <li>Performance debugging</li> <li>Scheduler tuning</li> <li>System optimization</li> <li>Resource monitoring</li> <li>Performance analysis</li> </ul>"},{"location":"docs/events/builtin/man/security/sched_debug_recon/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Access restrictions</li> <li>Debug file protection</li> <li>Audit logging</li> <li>Process isolation</li> <li>Resource monitoring</li> </ul>"},{"location":"docs/events/builtin/man/security/sched_debug_recon/#related-events","title":"RELATED EVENTS","text":"<ul> <li>proc_kcore_read: System memory access</li> <li>proc_mem_access: Process memory access</li> <li>security_file_open: File access monitoring</li> <li>container_create: Container lifecycle events</li> </ul>"},{"location":"docs/events/builtin/man/security/scheduled_task_modification/","title":"TRACEE-SCHEDULED-TASK-MODIFICATION","text":""},{"location":"docs/events/builtin/man/security/scheduled_task_modification/#name","title":"NAME","text":"<p>scheduled_task_mod - detect modifications to scheduled tasks</p>"},{"location":"docs/events/builtin/man/security/scheduled_task_modification/#description","title":"DESCRIPTION","text":"<p>This event detects modifications to scheduled tasks and their configurations, particularly focusing on crontab and related files. Scheduled tasks are commonly used to execute commands at predefined times, making them attractive targets for attackers seeking to establish persistence or execute malicious code automatically.</p> <p>The event monitors both direct file modifications and command executions related to task scheduling, providing comprehensive coverage of potential persistence mechanisms through scheduled tasks.</p>"},{"location":"docs/events/builtin/man/security/scheduled_task_modification/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1027</li> <li>Version: 1</li> <li>Severity: 2</li> <li>Category: persistence</li> <li>Technique: Cron</li> <li>MITRE ID: attack-pattern--2acf44aa-542f-4366-b4eb-55ef5747759c</li> <li>MITRE External ID: T1053.003</li> </ul>"},{"location":"docs/events/builtin/man/security/scheduled_task_modification/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/scheduled_task_modification/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from multiple underlying events:</p> <p>pathname (string) : Path to the scheduling configuration being accessed</p> <p>flags (string) : File access flags indicating modification</p> <p>old_path (string) : Original path in rename operations</p> <p>new_path (string) : New path in rename operations</p> <p>comm (string) : Command being executed (for scheduling tools)</p>"},{"location":"docs/events/builtin/man/security/scheduled_task_modification/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_file_open</code>: Monitor file modifications</li> <li><code>security_inode_rename</code>: Track file renames</li> <li><code>sched_process_exec</code>: Monitor scheduling commands</li> </ul>"},{"location":"docs/events/builtin/man/security/scheduled_task_modification/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Persistence detection: Identify unauthorized scheduling</p> </li> <li> <p>Configuration control: Track scheduling changes</p> </li> <li> <p>System integrity: Monitor task modifications</p> </li> <li> <p>Compliance monitoring: Track authorized changes</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/scheduled_task_modification/#scheduling-components","title":"SCHEDULING COMPONENTS","text":"<p>Critical files and commands:</p> <ul> <li>/etc/crontab</li> <li>/etc/cron.d/</li> <li>User crontabs</li> <li>Systemd timers</li> <li>at/batch jobs</li> <li>Anacron configurations</li> <li>Scheduling commands (crontab, at, batch)</li> </ul>"},{"location":"docs/events/builtin/man/security/scheduled_task_modification/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Persistence: Ensure malware survival</li> <li>Privilege escalation: Schedule privileged tasks</li> <li>Command execution: Run unauthorized code</li> <li>Defense evasion: Hide in legitimate jobs</li> </ul>"},{"location":"docs/events/builtin/man/security/scheduled_task_modification/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>System-Wide Impact: Affects all users</li> <li>Privilege Level: Often runs as root</li> <li>Time-Based: Delayed execution</li> <li>Persistence: Survives reboots</li> </ul>"},{"location":"docs/events/builtin/man/security/scheduled_task_modification/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid modification scenarios:</p> <ul> <li>System maintenance</li> <li>Backup scheduling</li> <li>Update automation</li> <li>Log rotation</li> <li>Job scheduling</li> </ul>"},{"location":"docs/events/builtin/man/security/scheduled_task_modification/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Access restrictions</li> <li>Change monitoring</li> <li>Audit logging</li> <li>Configuration control</li> <li>User permissions</li> </ul>"},{"location":"docs/events/builtin/man/security/scheduled_task_modification/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_file_open: File access monitoring</li> <li>security_inode_rename: File rename operations</li> <li>sched_process_exec: Command execution</li> <li>rcd_modification: Init script changes</li> </ul>"},{"location":"docs/events/builtin/man/security/stack_pivot/","title":"TRACEE-STACK-PIVOT","text":""},{"location":"docs/events/builtin/man/security/stack_pivot/#name","title":"NAME","text":"<p>stack_pivot - Detects syscalls invoked with a stack pointer outside the stack region</p>"},{"location":"docs/events/builtin/man/security/stack_pivot/#description","title":"DESCRIPTION","text":"<p>The stack pivot event detects a technique commonly used in ROP (Return-Oriented Programming) exploits where the stack pointer is manipulated to point outside the legitimate stack region.</p> <p>All native code execution makes use of the stack - a region of memory used for storing function-local data like parameters, return addresses, and local variables. A stack overflow vulnerability allows an attacker to write data past the end of a stack-allocated buffer, potentially overwriting other stack data including return addresses.</p> <p>In ROP exploits, the attacker overwrites return addresses to chain together small code sequences called \"gadgets\". One limitation is the amount of data that can be written to the stack - it may not be enough for the full sequence of gadget addresses. The stack pivot technique overcomes this by using a gadget that changes the stack pointer to point to an attacker-controlled location, effectively moving the stack and allowing a longer ROP chain.</p> <p>This event detects stack pivoting by checking the stack pointer at selected syscall invocations and identifying cases where it points outside the original stack region.</p>"},{"location":"docs/events/builtin/man/security/stack_pivot/#event-sets","title":"EVENT SETS","text":"<p>none</p>"},{"location":"docs/events/builtin/man/security/stack_pivot/#data-fields","title":"DATA FIELDS","text":"<p>syscall (int32) : The syscall which was invoked while the stack pointer was outside the stack. The syscall name is parsed if the <code>parse-arguments</code> option is specified. This argument is also used as a parameter to select which syscalls should be checked.</p> <p>sp (trace.Pointer) : The stack pointer value at the time of syscall invocation</p> <p>vma_type (string) : Description of the memory region type containing the stack pointer address</p> <p>vma_start (trace.Pointer) : Start address of the memory region containing the stack pointer</p> <p>vma_size (uint64) : Size of the memory region containing the stack pointer</p> <p>vma_flags (uint64) : Memory region flags (parsed if <code>parse-arguments</code> is enabled)</p>"},{"location":"docs/events/builtin/man/security/stack_pivot/#dependencies","title":"DEPENDENCIES","text":"<p>Thread Tracking:</p> <ul> <li>sched_process_fork (optional) - Used for thread stack tracking</li> <li>sched_process_exec (optional) - Used for thread stack tracking</li> </ul>"},{"location":"docs/events/builtin/man/security/stack_pivot/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Exploit detection: Detect ROP exploits that use the stack pivot technique</p> </li> <li> <p>Security monitoring: Monitor for suspicious stack pointer manipulation</p> </li> <li> <p>Memory analysis: Identify potential memory corruption exploits</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/stack_pivot/#implementation-notes","title":"IMPLEMENTATION NOTES","text":"<p>The kernel manages the stack for each process's main thread, but additional threads must create and manage their own stacks. Since the kernel has no direct notion of thread stacks, Tracee tracks thread stacks by storing the memory region pointed to by the stack pointer when new threads are created.</p> <p>Limitations: - Threads created before Tracee starts are not tracked - For untracked threads, anonymous memory regions are ignored to avoid false positives - This may result in false negatives for legitimate thread stacks created before Tracee started</p>"},{"location":"docs/events/builtin/man/security/stack_pivot/#example-usage","title":"EXAMPLE USAGE","text":"<p>Monitor specific syscalls for stack pivoting: <pre><code>tracee --events stack_pivot.args.syscall=open,openat\n</code></pre></p>"},{"location":"docs/events/builtin/man/security/stack_pivot/#related-events","title":"RELATED EVENTS","text":"<ul> <li>mem_prot_alert: Memory protection alerts</li> <li>proc_mem_code_injection: Process memory code injection</li> <li>process_vm_write_code_injection: Process VM write code injection</li> <li>ptrace_code_injection: Ptrace-based code injection</li> </ul>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/","title":"TRACEE-STDIO-OVER-SOCKET","text":""},{"location":"docs/events/builtin/man/security/stdio_over_socket/#name","title":"NAME","text":"<p>stdio_over_socket - process standard input/output over socket detection</p>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#description","title":"DESCRIPTION","text":"<p>Triggered when a process has its standard input/output redirected to a socket, which is commonly associated with reverse shell attacks. This signature detects when an attacker establishes an interactive shell from a compromised target back to their machine by redirecting stdin, stdout, and stderr through network sockets.</p> <p>Standard I/O redirection to sockets is a fundamental technique used in reverse shells, where the attacker gains interactive control over a compromised system. This behavior is highly suspicious in normal operations and typically indicates malicious activity.</p> <p>This signature is useful for:</p> <ul> <li>Reverse shell detection: Identify active reverse shell connections</li> <li>Command and control monitoring: Detect interactive malicious sessions</li> <li>Post-exploitation activity: Identify attacker interaction with compromised systems</li> </ul>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-101</li> <li>Version: 2</li> <li>Severity: 3 (High threat level)</li> <li>Category: execution</li> <li>Technique: Unix Shell</li> <li>MITRE ATT&amp;CK: T1059.004</li> </ul>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#event-sets","title":"EVENT SETS","text":"<p>signatures, execution</p>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#data-fields","title":"DATA FIELDS","text":"<p>ip_address (string) : The IP address associated with the socket connection</p> <p>port (string) : The port number associated with the socket connection</p> <p>file_descriptor (integer) : The file descriptor of the standard input/output (0=stdin, 1=stdout, 2=stderr)</p>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#dependencies","title":"DEPENDENCIES","text":"<p>System Events:</p> <ul> <li>security_socket_connect (required): Monitors socket connection establishment</li> <li>socket_dup (required): Monitors socket duplication for I/O redirection</li> </ul>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#detection-logic","title":"DETECTION LOGIC","text":"<p>The signature monitors for:</p> <ol> <li>Socket connections being established to external addresses</li> <li>File descriptor duplication of sockets to standard I/O descriptors (0, 1, 2)</li> <li>Process correlation to identify which processes are redirecting I/O</li> </ol>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Intrusion detection: Identify active reverse shell connections</p> </li> <li> <p>Incident response: Detect ongoing attacker interaction with compromised systems</p> </li> <li> <p>Network security: Monitor for unauthorized outbound interactive sessions</p> </li> <li> <p>Malware analysis: Identify payload behavior in sandbox environments</p> </li> <li> <p>Forensic investigation: Track attacker command and control activities</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#reverse-shell-techniques","title":"REVERSE SHELL TECHNIQUES","text":"<p>Common reverse shell establishment methods:</p> <ul> <li>Netcat reverse shells: Using nc to redirect shell I/O over network</li> <li>Bash reverse shells: Direct bash socket redirection techniques</li> <li>Python/Perl/PHP shells: Scripting language-based reverse shells</li> <li>Binary exploitation: Buffer overflow leading to shell redirection</li> <li>Web shell uploads: Uploaded scripts creating reverse connections</li> </ul>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#socket-redirection-methods","title":"SOCKET REDIRECTION METHODS","text":"<p>Attackers typically use these techniques:</p> <ul> <li>dup2() system calls: Duplicating socket file descriptors to stdin/stdout/stderr</li> <li>Process spawning: Creating child processes with redirected I/O</li> <li>Shell command execution: Running commands with I/O redirection operators</li> <li>Programming language sockets: Using socket libraries to create interactive sessions</li> </ul>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#network-indicators","title":"NETWORK INDICATORS","text":"<p>Look for associated network patterns:</p> <ul> <li>Outbound connections to unexpected IP addresses</li> <li>Non-standard ports for interactive sessions</li> <li>Persistent connections with bidirectional traffic</li> <li>Command-like traffic patterns in network streams</li> </ul>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#evasion-techniques","title":"EVASION TECHNIQUES","text":"<p>Attackers may attempt evasion through:</p> <ul> <li>Encryption: Using SSL/TLS to encrypt reverse shell traffic</li> <li>Protocol tunneling: Hiding shells within legitimate protocols (HTTP, DNS)</li> <li>Traffic obfuscation: Disguising shell traffic as normal application data</li> <li>Timing manipulation: Using delays to avoid detection thresholds</li> </ul>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#legitimate-scenarios","title":"LEGITIMATE SCENARIOS","text":"<p>Some legitimate uses that may trigger detection:</p> <ul> <li>Remote administration tools: SSH, RDP, VNC sessions</li> <li>Development tools: Remote debugging or development environments</li> <li>Automation scripts: Legitimate automation connecting to remote systems</li> <li>Monitoring tools: System monitoring with network reporting</li> </ul>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#prevention-strategies","title":"PREVENTION STRATEGIES","text":"<ul> <li>Network segmentation: Limit outbound connectivity from sensitive systems</li> <li>Egress filtering: Block unnecessary outbound ports and protocols</li> <li>Application whitelisting: Prevent unauthorized binary execution</li> <li>Process monitoring: Monitor process creation and I/O redirection</li> <li>Network monitoring: Detect unusual outbound connection patterns</li> </ul>"},{"location":"docs/events/builtin/man/security/stdio_over_socket/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_socket_connect: Primary detection for socket connections</li> <li>socket_dup: Primary detection for file descriptor duplication</li> <li>sched_process_exec: Process execution context</li> <li>net_packet_tcp: Network traffic analysis</li> </ul>"},{"location":"docs/events/builtin/man/security/sudoers_modification/","title":"TRACEE-SUDOERS-MODIFICATION","text":""},{"location":"docs/events/builtin/man/security/sudoers_modification/#name","title":"NAME","text":"<p>sudoers_modification - detect modifications to sudo configuration</p>"},{"location":"docs/events/builtin/man/security/sudoers_modification/#description","title":"DESCRIPTION","text":"<p>This event detects modifications to the sudoers configuration files, which control sudo command privileges on Unix and Linux systems. The sudoers file (/etc/sudoers and files in /etc/sudoers.d/) defines which users can run what commands with elevated privileges, making it a critical security control point.</p> <p>Unauthorized changes to these files could allow attackers to grant themselves or others elevated privileges, potentially leading to complete system compromise. The event monitors both direct modifications and rename operations involving sudoers files.</p>"},{"location":"docs/events/builtin/man/security/sudoers_modification/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1028</li> <li>Version: 1</li> <li>Severity: 2</li> <li>Category: privilege-escalation</li> <li>Technique: Sudo and Sudo Caching</li> <li>MITRE ID: attack-pattern--1365fe3b-0f50-455d-b4da-266ce31c23b0</li> <li>MITRE External ID: T1548.003</li> </ul>"},{"location":"docs/events/builtin/man/security/sudoers_modification/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/sudoers_modification/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from multiple underlying events:</p> <p>pathname (string) : Path to the sudoers file being accessed</p> <p>flags (string) : File access flags indicating modification</p> <p>old_path (string) : Original path in rename operations</p> <p>new_path (string) : New path in rename operations</p>"},{"location":"docs/events/builtin/man/security/sudoers_modification/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_file_open</code>: Monitor file modifications</li> <li><code>security_inode_rename</code>: Track file renames</li> </ul>"},{"location":"docs/events/builtin/man/security/sudoers_modification/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Privilege control: Monitor sudo permission changes</p> </li> <li> <p>System integrity: Track critical file modifications</p> </li> <li> <p>Security compliance: Ensure proper sudo configuration</p> </li> <li> <p>Incident response: Detect unauthorized changes</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/sudoers_modification/#sudoers-components","title":"SUDOERS COMPONENTS","text":"<p>Critical files and locations:</p> <ul> <li>/etc/sudoers</li> <li>/etc/sudoers.d/</li> <li>visudo command</li> <li>sudoers.tmp</li> <li>User-specific sudo rules</li> <li>Host-specific rules</li> <li>Command aliases</li> <li>User aliases</li> </ul>"},{"location":"docs/events/builtin/man/security/sudoers_modification/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Privilege escalation: Grant unauthorized sudo access</li> <li>Command execution: Enable restricted commands</li> <li>Persistence: Maintain elevated access</li> <li>Security bypass: Disable security controls</li> </ul>"},{"location":"docs/events/builtin/man/security/sudoers_modification/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>System-Wide Impact: Affects all users</li> <li>Root Access: Controls superuser access</li> <li>Security Control: Core security mechanism</li> <li>Configuration Impact: Changes persist</li> </ul>"},{"location":"docs/events/builtin/man/security/sudoers_modification/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid modification scenarios:</p> <ul> <li>User permission updates</li> <li>System administration</li> <li>Security policy changes</li> <li>Access control updates</li> <li>Command restrictions</li> </ul>"},{"location":"docs/events/builtin/man/security/sudoers_modification/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Use visudo for changes</li> <li>Restrict sudoers.d/ access</li> <li>Monitor file integrity</li> <li>Regular audits</li> <li>Backup configurations</li> </ul>"},{"location":"docs/events/builtin/man/security/sudoers_modification/#related-events","title":"RELATED EVENTS","text":"<ul> <li>security_file_open: File access monitoring</li> <li>security_inode_rename: File rename operations</li> <li>process_execute: Command execution</li> <li>scheduled_task_mod: Task scheduling changes</li> </ul>"},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/","title":"TRACEE-SUSPICIOUS-SYSCALL-SOURCE","text":""},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/#name","title":"NAME","text":"<p>suspicious_syscall_source - syscall invoked from unusual code location</p>"},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/#description","title":"DESCRIPTION","text":"<p>Triggered when a system call is invoked from an unusual code location that is not in a dedicated code region (VMA - Virtual Memory Area) mapped from executable files. This event detects potential code injection, shellcode execution, or other malicious activities where code is executed from unexpected memory locations.</p> <p>Normally, all legitimate code runs from dedicated code regions mapped from executable files. When syscalls are invoked from stack, heap, or anonymous memory regions, it often indicates malicious activity such as shellcode execution or code injection attacks.</p> <p>This event is useful for:</p> <ul> <li>Shellcode detection: Identify code execution from stack, heap, or anonymous memory</li> <li>Code injection detection: Detect various code injection techniques</li> <li>Exploit detection: Identify exploitation attempts using unusual code execution</li> </ul>"},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/#event-sets","title":"EVENT SETS","text":"<p>derived, security_alert</p>"},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/#data-fields","title":"DATA FIELDS","text":"<p>syscall (int32) : The system call number invoked from the unusual location (parsed to name if parse-arguments enabled)</p> <p>ip (trace.Pointer) : The instruction pointer address from which the syscall was invoked</p> <p>vma_type (string) : Description of the VMA type containing the code that triggered the syscall</p> <p>vma_start (trace.Pointer) : Start address of the VMA containing the triggering code</p> <p>vma_size (uint64) : Size of the VMA containing the triggering code</p> <p>vma_flags (uint64) : VMA flags (parsed to names if parse-arguments enabled)</p>"},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/#dependencies","title":"DEPENDENCIES","text":"<p>Kernel Probes:</p> <ul> <li>Individual syscall kprobes (configurable): Placed on selected syscalls for analysis</li> </ul>"},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/#configuration","title":"CONFIGURATION","text":"<p>Use event parameters to specify which syscalls to monitor:</p> <pre><code>tracee --events suspicious_syscall_source.args.syscall=open,openat\n</code></pre>"},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Shellcode detection: Identify execution of injected shellcode from memory</p> </li> <li> <p>Exploit detection: Detect code injection and ROP/JOP attacks</p> </li> <li> <p>Malware analysis: Identify malicious code execution patterns</p> </li> <li> <p>Security monitoring: Detect unusual code execution locations</p> </li> <li> <p>Incident response: Investigate code injection during security incidents</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/#suspicious-scenarios","title":"SUSPICIOUS SCENARIOS","text":"<p>Common scenarios triggering this event:</p> <ul> <li>Stack-based shellcode: Code execution from stack memory</li> <li>Heap-based shellcode: Code execution from heap allocations</li> <li>Anonymous memory execution: Code in non-file-backed memory regions</li> <li>Packed executables: Self-modifying or dynamically unpacked code</li> <li>JIT compilation: Just-in-time compiled code (may be legitimate)</li> </ul>"},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/#performance-optimization","title":"PERFORMANCE OPTIMIZATION","text":"<ul> <li>Selective monitoring: Use syscall parameters to monitor specific syscalls only</li> <li>Deduplication: Unique combinations of process, syscall, and VMA reported only once</li> <li>Overhead reduction: Focuses on specified syscalls rather than all syscalls</li> </ul>"},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/#false-positives","title":"FALSE POSITIVES","text":"<p>Legitimate scenarios that may trigger this event:</p> <ul> <li>JIT compilers: Languages like Java, .NET, JavaScript with JIT compilation</li> <li>Dynamic code generation: Legitimate applications generating code at runtime</li> <li>Packed executables: Legitimate software using code packing/compression</li> <li>Self-modifying code: Some legitimate applications modify their own code</li> </ul>"},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/#mitigation-strategies","title":"MITIGATION STRATEGIES","text":"<ul> <li>DEP/NX bit: Hardware-based execution prevention for data pages</li> <li>ASLR: Address Space Layout Randomization to complicate exploitation</li> <li>CFI: Control Flow Integrity to prevent ROP/JOP attacks</li> <li>Stack canaries: Detection of stack-based buffer overflows</li> </ul>"},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/#analysis-techniques","title":"ANALYSIS TECHNIQUES","text":"<p>When investigating detections:</p> <ol> <li>VMA analysis: Examine the memory region type and permissions</li> <li>Process context: Check if the process is known to use JIT or dynamic code</li> <li>Syscall patterns: Analyze which syscalls are being invoked unusually</li> <li>Timeline analysis: Correlate with other suspicious activities</li> </ol>"},{"location":"docs/events/builtin/man/security/suspicious_syscall_source/#related-events","title":"RELATED EVENTS","text":"<ul> <li>process_vm_write_code_injection: Direct code injection detection</li> <li>ptrace_code_injection: Ptrace-based code injection</li> <li>mem_prot_alert: Memory protection violations</li> <li>stack_pivot: Stack manipulation detection</li> </ul>"},{"location":"docs/events/builtin/man/security/symbols_loaded/","title":"TRACEE-SYMBOLS-LOADED","text":""},{"location":"docs/events/builtin/man/security/symbols_loaded/#name","title":"NAME","text":"<p>symbols_loaded - shared object with watched symbols loaded</p>"},{"location":"docs/events/builtin/man/security/symbols_loaded/#description","title":"DESCRIPTION","text":"<p>Triggered when a shared object that exports watched symbols is loaded into the current process. This derived event helps identify shared object usage patterns and detect when shared objects attempt to override symbols from other libraries, which can indicate potential security threats or library hijacking attempts.</p> <p>The event uses data filtering to configure which symbols to watch and which library paths to monitor, providing flexible control over symbol monitoring.</p> <p>This event is useful for:</p> <ul> <li>Library hijacking detection: Identify attempts to override legitimate library symbols</li> <li>Shared object monitoring: Track loading of specific libraries and symbols</li> <li>Security analysis: Detect malicious library injection or symbol manipulation</li> </ul>"},{"location":"docs/events/builtin/man/security/symbols_loaded/#event-sets","title":"EVENT SETS","text":"<p>derived, fs, security_alert</p>"},{"location":"docs/events/builtin/man/security/symbols_loaded/#data-fields","title":"DATA FIELDS","text":"<p>library_path (string) : The path of the shared object file that was loaded</p> <p>symbols (array) : The watched symbols exported by the shared object (subject to TOCTOU)</p> <p>sha256 (string) : SHA256 hash of the loaded shared object file</p>"},{"location":"docs/events/builtin/man/security/symbols_loaded/#dependencies","title":"DEPENDENCIES","text":"<p>Source Events:</p> <ul> <li>shared_object_loaded (required): Provides information about loaded shared objects</li> <li>sched_process_exec (required): Used to maintain mount namespace cache for filesystem access</li> </ul>"},{"location":"docs/events/builtin/man/security/symbols_loaded/#configuration","title":"CONFIGURATION","text":"<p>The event supports data filtering for fine-grained control:</p>"},{"location":"docs/events/builtin/man/security/symbols_loaded/#symbols-filter","title":"symbols Filter","text":"<p>Configure watched symbols using the <code>=</code> operator: <pre><code>tracee -e symbols_loaded.data.symbols=fopen\n</code></pre></p>"},{"location":"docs/events/builtin/man/security/symbols_loaded/#library_path-filter","title":"library_path Filter","text":"<p>Whitelist shared object path prefixes using the <code>!=</code> operator: <pre><code>tracee -e symbols_loaded.data.library_path!=libc\n</code></pre></p>"},{"location":"docs/events/builtin/man/security/symbols_loaded/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Library hijacking detection: Detect attempts to override system library functions</p> </li> <li> <p>Security monitoring: Monitor loading of suspicious or unexpected shared objects</p> </li> <li> <p>Malware analysis: Identify malicious library injection techniques</p> </li> <li> <p>System integrity: Verify that only expected libraries are loading watched symbols</p> </li> <li> <p>Forensic analysis: Track library loading patterns during investigations</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/symbols_loaded/#example-usage","title":"EXAMPLE USAGE","text":"<p>Detect shared objects trying to override the <code>fopen</code> function from non-libc libraries:</p> <pre><code>tracee -e symbols_loaded.data.symbols=fopen -e symbols_loaded.data.library_path!=libc\n</code></pre>"},{"location":"docs/events/builtin/man/security/symbols_loaded/#performance-considerations","title":"PERFORMANCE CONSIDERATIONS","text":"<p>The event is implemented in user-mode and requires file system access to examine shared objects. This introduces some performance overhead, especially with frequent library loading. The implementation includes optimizations, but consider monitoring scope in high-throughput environments.</p>"},{"location":"docs/events/builtin/man/security/symbols_loaded/#security-considerations","title":"SECURITY CONSIDERATIONS","text":"<ul> <li>TOCTOU vulnerability: Shared object files could be altered between detection and analysis</li> <li>File access timing: Until the shared object file is opened and read, it could be modified or removed</li> </ul>"},{"location":"docs/events/builtin/man/security/symbols_loaded/#related-events","title":"RELATED EVENTS","text":"<ul> <li>shared_object_loaded: Base event for shared object loading detection</li> <li>symbols_collision: Detection of symbol conflicts between libraries</li> <li>security_file_open: File access security monitoring</li> </ul>"},{"location":"docs/events/builtin/man/security/syscall_table_hooking/","title":"TRACEE-SYSCALL-TABLE-HOOKING","text":""},{"location":"docs/events/builtin/man/security/syscall_table_hooking/#name","title":"NAME","text":"<p>syscall_hooking - detect system call table hooking</p>"},{"location":"docs/events/builtin/man/security/syscall_table_hooking/#description","title":"DESCRIPTION","text":"<p>This event detects malicious hooking of the system call table in the kernel. System calls (syscalls) provide the interface between user applications and the kernel, making them a critical security boundary. By hooking the syscall table, attackers can intercept, modify, or redirect system calls, potentially gaining complete control over system operations.</p> <p>This type of manipulation is a common technique used by rootkits and kernel-level malware to hide their presence, intercept system operations, and maintain persistent control. The presence of syscall table hooks, especially when combined with hidden kernel modules, strongly indicates kernel compromise.</p>"},{"location":"docs/events/builtin/man/security/syscall_table_hooking/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1030</li> <li>Version: 1</li> <li>Severity: 3</li> <li>Category: defense-evasion</li> <li>Technique: Rootkit</li> <li>MITRE ID: attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b</li> <li>MITRE External ID: T1014</li> </ul>"},{"location":"docs/events/builtin/man/security/syscall_table_hooking/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/syscall_table_hooking/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying hooked_syscalls event:</p> <p>syscall_id (int32) : ID of the hooked system call</p> <p>syscall_address (trace.Pointer) : Current address of the system call handler</p> <p>original_address (trace.Pointer) : Expected address of the system call handler</p> <p>hook_owner (string) : Module responsible for the hook</p>"},{"location":"docs/events/builtin/man/security/syscall_table_hooking/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>hooked_syscalls</code>: Monitor syscall table modifications</li> </ul>"},{"location":"docs/events/builtin/man/security/syscall_table_hooking/#use-cases","title":"USE CASES","text":"<ul> <li> <p>Rootkit detection: Identify kernel-level malware</p> </li> <li> <p>System integrity: Monitor kernel function hooks</p> </li> <li> <p>Security monitoring: Detect kernel compromises</p> </li> <li> <p>Incident response: Analyze kernel modifications</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/syscall_table_hooking/#syscall-hooking","title":"SYSCALL HOOKING","text":"<p>Common hooking techniques:</p> <ul> <li>Table modification: Direct syscall table changes</li> <li>Jump/trampoline: Redirect execution flow</li> <li>Inline hooking: Modify function code</li> <li>IDT/GDT hooks: Interrupt table manipulation</li> <li>VDSO/VSYSCALL: User-space syscall interception</li> </ul>"},{"location":"docs/events/builtin/man/security/syscall_table_hooking/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>Process hiding: Conceal malicious processes</li> <li>File hiding: Hide malware components</li> <li>Command interception: Modify system operations</li> <li>Privilege escalation: Bypass security checks</li> </ul>"},{"location":"docs/events/builtin/man/security/syscall_table_hooking/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>Kernel Level: Direct kernel manipulation</li> <li>System-Wide: Affects all processes</li> <li>Persistence: Survives user-space security</li> <li>Stealth: Hard to detect from userspace</li> </ul>"},{"location":"docs/events/builtin/man/security/syscall_table_hooking/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Rare but valid scenarios:</p> <ul> <li>Security monitoring</li> <li>System tracing</li> <li>Performance profiling</li> <li>Debugging tools</li> </ul>"},{"location":"docs/events/builtin/man/security/syscall_table_hooking/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Kernel integrity monitoring</li> <li>Module signing</li> <li>Secure boot</li> <li>Memory protection</li> <li>Regular integrity checks</li> </ul>"},{"location":"docs/events/builtin/man/security/syscall_table_hooking/#related-events","title":"RELATED EVENTS","text":"<ul> <li>proc_fops_hooking: Proc filesystem hooks</li> <li>hidden_kernel_module: Hidden module detection</li> <li>ftrace_hook: Function tracing hooks</li> <li>hooked_syscall: Individual syscall hooks</li> </ul>"},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/","title":"TRACEE-SYSTEM-REQUEST-KEY-MODIFICATION","text":""},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/#name","title":"NAME","text":"<p>system_request_key_mod - detect modifications to System Request Key configuration</p>"},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/#description","title":"DESCRIPTION","text":"<p>This event detects modifications to the System Request Key (SysRq) configuration files. The SysRq mechanism provides direct kernel access through key combinations, allowing low-level commands to be executed regardless of system state. This powerful feature can perform actions like immediate system shutdown, memory dumps, or kernel debugging.</p> <p>Due to its privileged position and powerful capabilities, modifications to SysRq configuration (/proc/sys/kernel/sysrq and /proc/sysrq-trigger) could indicate attempts to manipulate system state or gather sensitive information for container escapes.</p>"},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/#signature-metadata","title":"SIGNATURE METADATA","text":"<ul> <li>ID: TRC-1031</li> <li>Version: 1</li> <li>Severity: 3</li> <li>Category: privilege-escalation</li> <li>Technique: Escape to Host</li> <li>MITRE ID: attack-pattern--4a5b7ade-8bb5-4853-84ed-23f262002665</li> <li>MITRE External ID: T1611</li> </ul>"},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/#event-sets","title":"EVENT SETS","text":"<p>signatures, default</p>"},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/#data-fields","title":"DATA FIELDS","text":"<p>This signature event uses fields from the underlying security_file_open event:</p> <p>pathname (string) : Path to the SysRq configuration being accessed</p> <p>flags (string) : File access flags indicating modification</p> <p>pid (int32) : Process ID attempting the modification</p> <p>uid (uint32) : User ID performing the modification</p>"},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/#dependencies","title":"DEPENDENCIES","text":"<ul> <li><code>security_file_open</code>: Monitor configuration file access</li> </ul>"},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/#use-cases","title":"USE CASES","text":"<ul> <li> <p>System protection: Prevent unauthorized SysRq access</p> </li> <li> <p>Container security: Detect potential escape attempts</p> </li> <li> <p>System integrity: Monitor critical configuration</p> </li> <li> <p>Incident response: Track system manipulation</p> </li> </ul>"},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/#sysrq-capabilities","title":"SYSRQ CAPABILITIES","text":"<p>Critical system functions:</p> <ul> <li>Emergency sync/reboot/shutdown</li> <li>Process termination</li> <li>Memory dumps</li> <li>Kernel debugging</li> <li>CPU register dumps</li> <li>Unraw keyboard mode</li> <li>OOM killer control</li> </ul>"},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/#attack-vectors","title":"ATTACK VECTORS","text":"<p>Common malicious uses include:</p> <ul> <li>System disruption: Force shutdowns/reboots</li> <li>Information gathering: Memory/register dumps</li> <li>Container escape: Host information leakage</li> <li>Denial of service: System resource control</li> </ul>"},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/#risk-assessment","title":"RISK ASSESSMENT","text":"<p>Risk factors to consider:</p> <ul> <li>System-Wide Impact: Affects entire system</li> <li>Immediate Effect: Direct kernel access</li> <li>Recovery Prevention: Can prevent forensics</li> <li>Information Exposure: System state visible</li> </ul>"},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/#legitimate-uses","title":"LEGITIMATE USES","text":"<p>Valid modification scenarios:</p> <ul> <li>System administration</li> <li>Emergency response</li> <li>Kernel debugging</li> <li>System recovery</li> <li>Performance analysis</li> </ul>"},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/#mitigation","title":"MITIGATION","text":"<p>Recommended security controls:</p> <ul> <li>Disable SysRq in production</li> <li>Access restrictions</li> <li>Configuration monitoring</li> <li>Audit logging</li> <li>Container isolation</li> </ul>"},{"location":"docs/events/builtin/man/security/system_request_key_config_modification/#related-events","title":"RELATED EVENTS","text":"<ul> <li>proc_kcore_read: Kernel memory access</li> <li>security_file_open: File access monitoring</li> <li>proc_mem_access: Process memory access</li> <li>container_create: Container lifecycle events</li> </ul>"},{"location":"docs/events/custom/golang/","title":"Golang Signatures","text":"<p>There are 2 ways you can get your own golang signatures working with tracee.</p> <ol> <li> <p>Built-In Golang signatures</p> <p>Tip</p> <p>This is the preferred way to get your own golang signatures integrated into Tracee, as you will find in the next part of this page, but it needs a better end-user experience (being worked).</p> <p>In order to get your golang signature compiled with tracee, you can create a file called <code>signatures/golang/signature_example.go</code> and place the following code in it:</p> <p>Signature</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n\n    \"github.com/aquasecurity/tracee/types/detect\"\n    \"github.com/aquasecurity/tracee/types/protocol\"\n    \"github.com/aquasecurity/tracee/types/trace\"\n)\n\ntype signatureExample struct {\n    cb detect.SignatureHandler\n}\n\nfunc (sig *signatureExample) Init(ctx detect.SignatureContext) error {\n    sig.cb = ctx.Callback\n\n    return nil\n}\n\nfunc (sig *signatureExample) GetMetadata() (\n    detect.SignatureMetadata,\n    error,\n) {\n    return detect.SignatureMetadata{\n        ID:          \"Mine-0.1.0\",\n        Version:     \"0.1.0\",\n        Name:        \"My Own Signature\",\n        EventName:   \"mine\",\n        Description: \"My Own Signature Detects Stuff\",\n    }, nil\n}\n\nfunc (sig *signatureExample) GetSelectedEvents() (\n    []detect.SignatureEventSelector,\n    error,\n) {\n\n    return []detect.SignatureEventSelector{\n        {Source: \"tracee\", Name: \"openat\"},\n        {Source: \"tracee\", Name: \"execve\"},\n    }, nil\n}\n\nfunc (sig *signatureExample) OnEvent(event protocol.Event) error {\n    switch e := event.Payload.(type) {\n    case trace.Event:\n        if e.ArgsNum == 0 {\n            return nil\n        }\n\n        switch e.EventName {\n        case \"openat\", \"execve\":\n            arg, err := e.GetArgumentByName(\"pathname\", trace.GetArgOps{DefaultArgs: false})\n            if err != nil {\n                return err\n            }\n\n            if s, ok := arg.Value.(string); ok {\n                if strings.Contains(s, \"/etc/passwd\") {\n                    m, _ := sig.GetMetadata()\n\n                    found := detect.Finding{\n                        Event:       event,\n                        SigMetadata: m,\n                    }\n\n                    sig.cb(found)\n                }\n            }\n        }\n    default:\n        return errors.New(\"failed to cast event's payload\")\n    }\n\n    return nil\n}\n\nfunc (sig *signatureExample) OnSignal(s detect.Signal) error {\n    return nil\n}\n\nfunc (sig *signatureExample) Close() {}\n</code></pre> <p>Then, edit <code>signatures/golang/export.go</code> and place your new signature there:</p> <pre><code>var ExportedSignatures = []detect.Signature{\n    ...\n    &amp;signatureExample{},\n}\n</code></pre> <p>Follow instructions on how to build Tracee and you will get your new signature available to use. You may even select only the signatures you created:</p> <pre><code>sudo ./dist/tracee \\\n    --output json \\\n    --events mine\n</code></pre> <pre><code>{\"timestamp\":1680191445996958642,\"threadStartTime\":1680191445994222553,\"processorId\":4,\"processId\":329031,\"cgroupId\":10793,\"threadId\":329031,\"parentProcessId\":45580,\"hostProcessId\":329031,\"hostThreadId\":329031,\"hostParentProcessId\":45580,\"userId\":1000,\"mountNamespace\":4026531841,\"pidNamespace\":4026531836,\"processName\":\"zsh\",\"hostName\":\"hb\",\"container\":{},\"kubernetes\":{},\"eventId\":\"6030\",\"eventName\":\"mine\",\"matchedPolicies\":[\"\"],\"argsNum\":0,\"returnValue\":11,\"syscall\":\"\",\"stackAddresses\":null,\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"args\":[],\"metadata\":{\"Version\":\"0.1.0\",\"Description\":\"My Own Signature Detects Stuff\",\"Tags\":null,\"Properties\":{\"signatureID\":\"Mine-0.1.0\",\"signatureName\":\"My Own Signature\"}}}\n</code></pre> <p>Be creative! You can create signatures that would do pretty much anything! Examples of such signatures would: for every X event, connect to a cached external data-source and return a positive detection for cases A, B or C.</p> </li> <li> <p>Create a golang signature plugin and dynamically load it during runtime</p> <p>Attention</p> <p>Eventually you will find out that Golang Plugins aren't very useful if you consider all the problems that emerge from using it:</p> <ol> <li> <p>Can't use different go versions (need to compile the go plugin    with the exact same version that was used to build Tracee).</p> </li> <li> <p>Both Tracee and your golang plugin signature must be built with the    exact same GOPATH or you will get a \"plugin was built with a    different version of package XXX\" error.</p> </li> <li> <p>Any dependency you have in your plugin should be of the same    version with the dependencies of Tracee.</p> </li> <li> <p>Compiling tracee statically is sometimes useful to have a complete    portable eBPF tracing/detection solution. One good example when    statically compiling tracee is a good idea is to have a single    binary capable of running in GLIBC (most of them) and MUSL (Alpine)    powered Linux distros.</p> </li> </ol> <p>At the end, creating a golang signature plugin won't have the practical effects as a plugin mechanism should have, so it is preferred to have built-in golang signatures (re)distributed with newer binaries (when you need to add/remove signatures from your environment) FOR NOW.</p> </li> </ol>"},{"location":"docs/events/custom/overview/","title":"Custom Events","text":"<p>Tracee comes with many built-in events, but you can extend its capabilities by creating custom events tailored to your specific needs.</p> <p>Currently, custom events can be implemented using Go.  Refer to the Go documentation for detailed instructions on how to define and integrate your custom events into Tracee.</p> <p>Once you've created your custom event, load it using the <code>signatures-dir</code> flag. For example, if your custom event is defined in the directory <code>/tmp/myevents</code>, start Tracee with the following command:</p> <pre><code>tracee --signatures-dir=/tmp/myevents\n</code></pre> <p>Tip</p> <p>Tracee also uses the custom events to add a few events, if you pass your own directory for <code>signatures-dir</code> you will not load the tracee signatures, to avoid such problems, you can either place your own events under the same directory of the tracee custom events, or pass multiple directories for example: <pre><code>tracee --signatures-dir=/tmp/myevents --signatures-dir=./dist/signatures\n</code></pre></p> <p>\ud83d\udc48 Please use the side-navigation on the left in order to browse the different topics.</p>"},{"location":"docs/flags/capabilities.1/","title":"TRACEE-CAPABILITIES","text":""},{"location":"docs/flags/capabilities.1/#name","title":"NAME","text":"<p>tracee --capabilities - Opt out from dropping capabilities by default or set specific ones</p>"},{"location":"docs/flags/capabilities.1/#synopsis","title":"SYNOPSIS","text":"<p>tracee --capabilities [&lt;bypass=[true|false]&gt; | &lt;add=cap1(,cap2...)&gt; | &lt;drop=cap1(,cap2...)&gt;] ... [--capabilities [&lt;add=cap1(,cap2...)&gt; | &lt;drop=cap1(,cap2...)&gt;] ...]</p>"},{"location":"docs/flags/capabilities.1/#description","title":"DESCRIPTION","text":"<p>The --capabilities flag allows you to control the dropping of capabilities during execution time or set specific capabilities.</p> <p>Possible options:</p> <ul> <li>bypass=[true|false]: Keep all capabilities during execution time. Setting bypass=true will opt out from dropping any capabilities.</li> <li>add=cap1(,cap2...): Add specific capabilities to the \"required\" capabilities ring. You can provide multiple capability names separated by commas.</li> <li>drop=cap1(,cap2...): Drop specific capabilities from the \"required\" capabilities ring. You can specify multiple capability names separated by commas.</li> </ul> <p>Please note that the available capabilities will depend on the running system. For the list of capabilities available on your system, see the list-caps command.</p>"},{"location":"docs/flags/capabilities.1/#examples","title":"EXAMPLES","text":"<ul> <li>To keep all capabilities during execution time, use the following flag:</li> </ul> <pre><code>--capabilities bypass=true\n</code></pre> <ul> <li>To add specific capabilities (e.g., cap_kill and cap_syslog) to the \"required\" capabilities ring, use the following flag:</li> </ul> <pre><code>--capabilities add=cap_kill,cap_syslog\n</code></pre> <ul> <li>To drop a specific capability (e.g., cap_chown) from the \"required\" capabilities ring, use the following flag:</li> </ul> <pre><code>--capabilities drop=cap_chown\n</code></pre> <p>Please refer to the documentation for more information on environment capabilities.</p>"},{"location":"docs/flags/capture.1/","title":"TRACEE-CAPTURE","text":""},{"location":"docs/flags/capture.1/#name","title":"NAME","text":"<p>tracee --capture - Capture artifacts that were written, executed, or found to be suspicious</p>"},{"location":"docs/flags/capture.1/#synopsis","title":"SYNOPSIS","text":"<p>tracee --capture &lt;[artifact:]capture-option[=value]&gt; ...</p> <p>tracee --capture &lt;network&gt; [--capture [pcap:option1(,option2...)|pcap-options:option|pcap-snaplen:size]] ...</p>"},{"location":"docs/flags/capture.1/#description","title":"DESCRIPTION","text":"<p>The --capture flag allows you to capture artifacts that were written, executed, or found to be suspicious during the execution of Tracee. The captured artifacts will appear in the 'output-path' directory.</p> <p>Possible capture options:</p> <ul> <li>[artifact:]write[=/path/prefix*]: Capture written files. You can provide a filter to only capture file writes whose path starts with a certain prefix (up to 50 characters). Up to 3 filters can be given.</li> <li>[artifact:]read[=/path/prefix*]: Capture read files. You can provide a filter to only capture file reads whose path starts with a certain prefix (up to 50 characters). Up to 3 filters can be given.</li> <li>[artifact:]exec: Capture executed files.</li> <li>[artifact:]module: Capture loaded kernel modules.</li> <li>[artifact:]bpf: Capture loaded BPF programs bytecode.</li> <li>[artifact:]mem: Capture memory regions that had write+execute (w+x) protection and then changed to execute (x) only.</li> <li>[artifact:]network: Capture network traffic. Only TCP/UDP/ICMP protocols are currently supported.</li> </ul>"},{"location":"docs/flags/capture.1/#file-capture-filters","title":"File Capture Filters","text":"<p>Files captured upon read/write can be filtered to catch only specific IO operations. The different filter types have a logical 'AND' between them but a logical 'OR' between filters of the same type. The filter format is as follows: &lt;read/write&gt;:&lt;filter-type&gt;=&lt;filter-value&gt;</p> <p>Filter types:</p> <ul> <li>path: A filter for the file path prefix (up to 50 characters). Up to 3 filters can be given. Identical to using '&lt;read/write&gt;=/path/prefix*'.</li> <li>type: A file type from the following options: 'regular', 'pipe', and 'socket'.</li> <li>fd: The file descriptor of the file. Can be one of the three standards: 'stdin', 'stdout', and 'stderr'.</li> </ul>"},{"location":"docs/flags/capture.1/#network-capture-notes","title":"Network Capture Notes","text":"<ul> <li>Pcap Files:</li> <li>If you only specify --capture network, you will have a single file with all network traffic.</li> <li> <p>You can use pcap:xxx,yyy to have more than one pcap file, split by different means.</p> </li> <li> <p>Pcap Options:</p> </li> <li>If you do not specify pcap-options (or set to none), you will capture ALL network traffic into your pcap files.</li> <li> <p>If you specify pcap-options:filtered, events being traced will define what network traffic will be captured.</p> </li> <li> <p>Snap Length:</p> </li> <li>If you do not specify a snaplen, the default is headers only (incomplete packets in tcpdump).</li> <li>If you specify max as snaplen, you will get the full contents of each packet (pcap files will be large).</li> <li>If you specify headers as snaplen, you will only get L2/L3 headers in captured packets.</li> <li>If you specify headers but trace for net_packet_dns events, the L4 DNS header will be captured.</li> <li>If you specify headers but trace for net_packet_http events, only L2/L3 headers will be captured.</li> </ul>"},{"location":"docs/flags/capture.1/#examples","title":"EXAMPLES","text":""},{"location":"docs/flags/capture.1/#file-capture","title":"File capture","text":"<ul> <li>To capture executed files into the default output directory, use the following flag:</li> </ul> <pre><code>--capture exec\n</code></pre> <ul> <li>To capture executed files into a specific directory, clear the directory before starting, use the following flags:</li> </ul> <pre><code>--capture exec --capture dir:/my/dir --capture clear-dir\n</code></pre> <ul> <li>To capture files that were written into anywhere under /usr/bin/ or /etc/, use the following flags:</li> </ul> <pre><code>--capture write=/usr/bin/* --capture write=/etc/*\n</code></pre> <ul> <li>To capture file writes to socket files that are the 'stdout' of the writing process, use the following flag:</li> </ul> <pre><code>--capture write:type=socket --capture write:fd=stdout\n</code></pre>"},{"location":"docs/flags/capture.1/#network-capture","title":"Network Capture","text":"<ul> <li>To capture network traffic, use the following flag:</li> </ul> <pre><code>--capture network\n</code></pre> <ul> <li>To capture network traffic and save separate pcap files for processes and commands, use the following flag:</li> </ul> <pre><code>--capture network --capture pcap:process,command\n</code></pre> <ul> <li>To capture network traffic and save pcap files containing only traced/filtered packets, use the following flag:</li> </ul> <pre><code>--capture network --capture pcap-options:filtered\n</code></pre> <ul> <li>To capture network traffic and set the captured payload from each packet to 1KB, use the following flag:</li> </ul> <pre><code>--capture network --capture pcap-snaplen:1kb\n</code></pre> <ul> <li>To capture network traffic and save pcap files for containers and commands, use the following flag:</li> </ul> <pre><code>--capture network --capture pcap:container,command\n</code></pre>"},{"location":"docs/flags/config.1/","title":"TRACEE-CONFIG","text":""},{"location":"docs/flags/config.1/#name","title":"NAME","text":"<p>tracee --config - Define global configuration options for tracee</p>"},{"location":"docs/flags/config.1/#synopsis","title":"SYNOPSIS","text":"<p>tracee --config &lt;file&gt;</p>"},{"location":"docs/flags/config.1/#description","title":"DESCRIPTION","text":"<p>The --config flag allows you to define global configuration options (flags) for tracee. It expects a file in YAML or JSON format, among others (see documentation).</p> <p>All flags can be set in the config file, except for the following, which are reserved only for the CLI:</p> <ul> <li>--config: This flag itself is reserved for the CLI and should not be set in the config file.</li> <li>--capture</li> <li>--policy</li> <li>--scope</li> <li>--event</li> </ul> <p>Please refer to the documentation for more information on the file format and available configuration options.</p>"},{"location":"docs/flags/containers.1/","title":"TRACEE-CONTAINERS","text":""},{"location":"docs/flags/containers.1/#name","title":"NAME","text":"<p>tracee --containers - Configure container enrichment and runtime sockets for container events enrichment</p>"},{"location":"docs/flags/containers.1/#synopsis","title":"SYNOPSIS","text":"<p>tracee --containers [enrich=true|false|sockets.runtime=path|cgroupfs.path=path|cgroupfs.force=true|false] [--containers ...]</p>"},{"location":"docs/flags/containers.1/#description","title":"DESCRIPTION","text":"<p>The <code>--containers</code> flag allows you to configure container enrichment and runtime sockets for container events enrichment.</p>"},{"location":"docs/flags/containers.1/#flags","title":"Flags","text":"<ul> <li> <p>enrich=true|false   Enable or disable container enrichment.   Example:   <pre><code>--containers enrich=true\n</code></pre></p> </li> <li> <p>sockets.runtime=path   Configure container runtime sockets for enrichment. runtime must be one of the supported runtimes:</p> </li> <li>CRI-O      (<code>crio</code>, <code>cri-o</code>)</li> <li>Containerd (<code>containerd</code>)</li> <li>Docker     (<code>docker</code>)</li> <li>Podman     (<code>podman</code>)</li> </ul> <p>Example:   <pre><code>--containers sockets.docker=/var/run/docker.sock\n</code></pre></p> <ul> <li> <p>cgroupfs.path=path   Configure the path to the cgroupfs where container cgroups are created. This is used as a hint for auto-detection.   Example:   <pre><code>--containers cgroupfs.path=/sys/fs/cgroup\n</code></pre></p> </li> <li> <p>cgroupfs.force=true|false   Force the usage of the provided mountpoint path and skip auto-detection (only applies if cgroupfs.path is provided).   Example:   <pre><code>--containers cgroupfs.force=true\n</code></pre></p> </li> </ul>"},{"location":"docs/flags/containers.1/#examples","title":"EXAMPLES","text":"<ol> <li> <p>Enable container enrichment:    <pre><code>--containers enrich=true\n</code></pre></p> </li> <li> <p>Configure Docker socket:    <pre><code>--containers sockets.docker=/var/run/docker.sock\n</code></pre></p> </li> <li> <p>Set the cgroupfs path and force its usage:    <pre><code>--containers cgroupfs.path=/sys/fs/cgroup cgroupfs.force=true\n</code></pre></p> </li> <li> <p>Combine multiple flags:    <pre><code>--containers enrich=true sockets.containerd=/var/run/containerd/containerd.sock cgroupfs.path=/sys/fs/cgroup cgroupfs.force=true\n</code></pre></p> </li> </ol> <p>Please refer to the documentation for more information on container events enrichment.</p>"},{"location":"docs/flags/events.1/","title":"TRACEE-EVENTS","text":""},{"location":"docs/flags/events.1/#name","title":"NAME","text":"<p>tracee --events - Select which events to trace</p>"},{"location":"docs/flags/events.1/#synopsis","title":"SYNOPSIS","text":"<p>tracee --events [&lt;event-name1(,[-]event-name2...)&gt; | &lt;[-]event-name1(,set1...)&gt; | &lt;set1(,[-]event-name1,[-]event-name2...)&gt; | &lt;event1.data.data-field[=|!=]value&gt; | &lt;event1.retval[=|!=|&lt;|&gt;|&lt;=|&gt;=]value&gt; | &lt;event1.scope.field[=|!=|&lt;|&gt;|&lt;=|&gt;=]value&gt; | &lt;event.scope.container&gt;] ...</p>"},{"location":"docs/flags/events.1/#description","title":"DESCRIPTION","text":"<p>The --events flag allows you to select which events to trace by defining filters.</p>"},{"location":"docs/flags/events.1/#filters","title":"FILTERS","text":"<ul> <li> <p>Event or set name: Select specific events using 'event-name1,event-name2...' or predefined event sets using 'event_set_name1,event_set_name2...'. To exclude events, prepend the event name with a dash '-': '-event-name'.</p> </li> <li> <p>Event data: Filter events based on their data using 'event-name.data.event_data'. The event data expression follows the syntax of a string expression.</p> </li> <li> <p>Event return value: Filter events based on their return value using 'event-name.retval'. The event return value expression follows the syntax of a numerical expression.</p> </li> <li> <p>Event scope fields: Filter events based on the non-argument fields defined in the trace.Event struct using 'event-name.scope.field'. Refer to the json tags in the trace.Event struct located in the types/trace package for the correct field names, and the event filtering section in the documentation for a full list.</p> </li> </ul>"},{"location":"docs/flags/events.1/#filter-expression","title":"FILTER EXPRESSION","text":"<p>Filter expressions can be defined to operate on event options or process metadata. Only events that match all filter expressions will be traced.</p> <p>Multiple flags are combined with AND logic, while multiple values within a single flag are combined with OR logic when using the equals operator '='. Multiple values can be specified using ','.</p>"},{"location":"docs/flags/events.1/#numerical-expression-operators","title":"NUMERICAL EXPRESSION OPERATORS","text":"<p>'=', '!=', '&lt;', '&gt;', '&lt;=', '&gt;='</p> <p>Available for:</p> <ul> <li>return value</li> <li>scope fields</li> </ul> <p>NOTE: Expressions containing '&lt;' or '&gt;' tokens must be escaped!</p>"},{"location":"docs/flags/events.1/#string-expression-operators","title":"STRING EXPRESSION OPERATORS","text":"<p>'=', '!='</p> <p>Available for:</p> <ul> <li>event arguments</li> <li>return value</li> <li>scope fields</li> </ul> <p>Strings can be compared as a prefix if ending with '*', or as a suffix if starting with '*'.  If a string starts with '*' and ends with '*', it functions as a contains operator.</p> <p>For certain event fields filtered in kernel space, the user will receive a warning if:</p> <ul> <li>String filters exceed 255 characters.</li> <li>The contains operator is used. Only exact matches, prefix, and suffix comparisons are allowed.</li> </ul> <p>NOTE: Expressions containing '*' token must be escaped!</p>"},{"location":"docs/flags/events.1/#exclusion-operator-prepended","title":"EXCLUSION OPERATOR (PREPENDED)","text":"<p>'-'</p> <p>Available only for:</p> <ul> <li>event names</li> </ul>"},{"location":"docs/flags/events.1/#examples","title":"EXAMPLES","text":"<ul> <li>To trace only 'execve' and 'open' events, use the following flag:</li> </ul> <pre><code>--events execve,open\n</code></pre> <ul> <li>To trace only events prefixed by \"open\", use the following flag:</li> </ul> <pre><code>--events 'open*'\n</code></pre> <ul> <li>To trace all file-system related events, use the following flag:</li> </ul> <pre><code>--events fs\n</code></pre> <ul> <li>To trace all file-system related events, but not 'open' or 'openat', use the following flag:</li> </ul> <pre><code>--events fs --events '-open,-openat'\n</code></pre> <ul> <li>To trace only 'close' events that have 'fd' equal to 5, use the following flag:</li> </ul> <pre><code>--events close.data.fd=5\n</code></pre> <ul> <li>To trace only 'openat' events that have 'pathname' prefixed by '/tmp', use the following flag:</li> </ul> <pre><code>--events openat.data.pathname='/tmp*'\n</code></pre> <ul> <li>To trace only 'openat' events that have 'pathname' suffixed by 'shadow', use the following flag:</li> </ul> <pre><code>--events openat.data.pathname='*shadow'\n</code></pre> <ul> <li>To trace only 'openat' events that have 'pathname' contains the substring 'pass', use the following flag:</li> </ul> <pre><code>--events openat.data.pathname='*pass*'\n</code></pre> <ul> <li>To exclude 'openat' events that have 'pathname' equal to '/tmp/1' or '/bin/ls', use the following flag:</li> </ul> <pre><code>--events openat.data.pathname!=/tmp/1,/bin/ls\n</code></pre> <ul> <li>To trace only 'openat' events that have 'processName' equal to 'ls', use the following flag:</li> </ul> <pre><code>--events openat.scope.processName=ls\n</code></pre> <ul> <li>To trace only 'security_file_open' events coming from a container, use the following flag:</li> </ul> <pre><code>--events security_file_open.scope.container\n</code></pre>"},{"location":"docs/flags/log.1/","title":"TRACEE-LOG","text":""},{"location":"docs/flags/log.1/#name","title":"NAME","text":"<p>tracee --log - Control logger options - aggregation and level priority</p>"},{"location":"docs/flags/log.1/#synopsis","title":"SYNOPSIS","text":"<p>tracee --log aggregate[:flush-interval] | &lt;debug|info|warn|error|panic&gt; | file:/path/to/file | filter:[msg=&lt;value,...&gt;;regex=&lt;value,...&gt;;pkg=&lt;value,...&gt;;file=&lt;value,...&gt;;lvl=&lt;value,...&gt;;libbpf] | filter-out:[msg=&lt;value,...&gt;;regex=&lt;value,...&gt;;pkg=&lt;value,...&gt;;file=&lt;value,...&gt;;lvl=&lt;value,...&gt;;libbpf]</p>"},{"location":"docs/flags/log.1/#description","title":"DESCRIPTION","text":"<p>The --log flag allows you to control logger options for the tool.</p> <p>Possible log options:</p> <ul> <li> <p>aggregate[:flush-interval]: Turns log aggregation on, delaying output with an optional interval (default: 3s). The flush-interval can be specified in seconds (s) or minutes (m).</p> </li> <li> <p>&lt;debug|info|warn|error|panic&gt;: Sets the log level. The default log level is 'info'.</p> </li> <li> <p>file:/path/to/file: Writes the logs to the specified file. If the file exists, it will be created or trimmed.</p> </li> <li> <p>filter:&lt;option;...&gt;: Filters in logs that match the specified option values. Multiple filter options can be provided, separated by semicolons.</p> </li> <li> <p>filter-out:&lt;option;...&gt;: Filters out logs that match the specified option values. Multiple filter options can be provided, separated by semicolons.</p> </li> </ul> <p>Filter options:</p> <ul> <li> <p>msg=&lt;value,...&gt;: Filters logs that have the message containing any of the specified values.</p> </li> <li> <p>regex=&lt;value,...&gt;: Filters logs that match the specified regular expression in the message.</p> </li> <li> <p>pkg=&lt;value,...&gt;: Filters logs that originate from the specified package.</p> </li> <li> <p>file=&lt;value,...&gt;: Filters logs that originate from the specified file.</p> </li> <li> <p>lvl=&lt;value,...&gt;: Filters logs that are of the specified level.</p> </li> <li> <p>libbpf: Filters logs that originate from libbpf.</p> </li> </ul>"},{"location":"docs/flags/log.1/#examples","title":"EXAMPLES","text":"<ul> <li>To output debug level logs, use the following flag:</li> </ul> <pre><code>--log debug\n</code></pre> <ul> <li>To output aggregated debug level logs every 3 seconds (default), use the following flag:</li> </ul> <pre><code>--log debug --log aggregate\n</code></pre> <ul> <li>To output aggregated logs every 5 seconds, use the following flag:</li> </ul> <pre><code>--log aggregate:5s\n</code></pre> <ul> <li>To output debug level logs to <code>/tmp/tracee.log</code>, use the following flag:</li> </ul> <pre><code>--log debug --log file:/tmp/tracee.log\n</code></pre> <ul> <li>To filter in logs that have either 'foo' or 'bar' in the message, are from the 'core' package, and are of 'error' level, use the following flag:</li> </ul> <pre><code>--log filter:'msg=foo,bar;pkg=core;lvl=error'\n</code></pre> <ul> <li>To filter out logs that have either 'foo' or 'bar' in the message, are from the 'core' package, and are of 'error' level, use the following flag:</li> </ul> <pre><code>--log filter-out:'msg=foo,bar;pkg=core;lvl=error'\n</code></pre> <ul> <li>To filter in logs that have either 'foo' or 'bar' in the message and, based on that result, filter out logs that are from the 'core' package, use the following flag:</li> </ul> <pre><code>--log filter:msg=foo,bar --log filter-out:pkg=core\n</code></pre> <ul> <li>To filter out logs that originate from the '/pkg/cmd/flags/logger.go' file, use the following flag:</li> </ul> <pre><code>--log filter-out:file=/pkg/cmd/flags/logger.go\n</code></pre> <ul> <li>To filter in logs that have messages matching the regex '^foo', use the following flag:</li> </ul> <pre><code>--log filter:regex='^foo'\n</code></pre> <ul> <li>To filter in logs that originate from libbpf, use the following flag:</li> </ul> <pre><code>--log filter:libbpf\n</code></pre>"},{"location":"docs/flags/output.1/","title":"TRACEE-OUTPUT","text":""},{"location":"docs/flags/output.1/#name","title":"NAME","text":"<p>tracee --output - Control how and where output is printed</p>"},{"location":"docs/flags/output.1/#synopsis","title":"SYNOPSIS","text":"<p>tracee --output &lt;format[:file,...]&gt; | gotemplate=template[:file,...] | forward:url | webhook:url | option:{stack-addresses,exec-env,exec-hash[={inode,dev-inode,digest-inode}],parse-arguments,parse-arguments-fds,sort-events} ...</p>"},{"location":"docs/flags/output.1/#description","title":"DESCRIPTION","text":"<p>The --output flag allows you to control how and where the output is printed.</p> <p>Format options:</p> <ul> <li> <p>table[:/path/to/file,...]: Output events in table format. The default path to the file is stdout. Multiple file paths can be specified, separated by commas.</p> </li> <li> <p>table-verbose[:/path/to/file,...]: Output events in table format with extra fields per event. The default path to the file is stdout. Multiple file paths can be specified, separated by commas.</p> </li> <li> <p>json[:/path/to/file,...]: Output events in JSON format. The default path to the file is stdout. Multiple file paths can be specified, separated by commas.</p> </li> <li> <p>gotemplate=/path/to/template[:/path/to/file,...]: Output events formatted using a given Go template file. The default path to the file is stdout. Multiple file paths can be specified, separated by commas.</p> </li> <li> <p>none: Ignore the stream of events output. This is usually used with the --capture flag.</p> </li> </ul> <p>Fluent Forward options:</p> <ul> <li>forward:url: Send events in JSON format using the Forward protocol to a Fluent receiver. Specify the URL of the Fluent receiver.</li> </ul> <p>Webhook options:</p> <ul> <li>webhook:url: Send events in JSON format to the specified webhook URL.</li> </ul> <p>Other options:</p> <ul> <li> <p>option:{stack-addresses,exec-env,exec-hash,parse-arguments,sort-events}: Augment output according to the given options. The default is none. Multiple options can be specified, separated by commas.</p> </li> <li> <p>stack-addresses: Include stack memory addresses for each event.</p> </li> <li>exec-env: When tracing execve/execveat, show the environment variables that were used for execution.</li> <li>exec-hash: When tracing some file related events, show the file hash (sha256).<ul> <li>Affected events: sched_process_exec, shared_object_loaded</li> <li>inode option recalculates the file hash if the inode's creation time (ctime) differs, which can occur in different namespaces even for identical inode. This option is performant, but not recommended and should only be used if container enrichment can't be enabled for digest-inode, and if performance is preferred over correctness.</li> <li>dev-inode (default) option generally offers better performance compared to the inode option, as it bypasses the need for recalculation by associating the creation time (ctime) with the device (dev) and inode pair. It's recommended if correctness is preferred over performance without container enrichment.</li> <li>digest-inode\" option is the most efficient, as it keys the hash to a pair consisting of the container image digest and inode. This approach, however, necessitates container enrichment.</li> </ul> </li> <li>parse-arguments: Do not show raw machine-readable values for event arguments. Instead, parse them into human-readable strings.</li> <li>parse-arguments-fds: Enable parse-arguments and enrich file descriptors (fds) with their file path translation. This can cause pipeline slowdowns.</li> <li>sort-events: Enable sorting events before passing them to the output. This may decrease the overall program efficiency.</li> </ul>"},{"location":"docs/flags/output.1/#examples","title":"EXAMPLES","text":"<ul> <li>To output events as JSON to stdout, use the following flag:</li> </ul> <pre><code>--output json\n</code></pre> <ul> <li>To output events as JSON to <code>/my/out</code>, use the following flag:</li> </ul> <pre><code>--output json:/my/out\n</code></pre> <ul> <li>To output events as the provided Go template to stdout, use the following flag:</li> </ul> <pre><code>--output gotemplate=/path/to/my.tmpl\n</code></pre> <ul> <li>To output events as JSON to both <code>/my/out</code> and <code>/my/out2</code>, use the following flag:</li> </ul> <pre><code>--output json:/my/out1,/my/out2\n</code></pre> <ul> <li>To ignore events output, use the following flag:</li> </ul> <pre><code>--output none\n</code></pre> <ul> <li>To output events as a table with stack addresses, use the following flag:</li> </ul> <pre><code>--output table --output option:stack-addresses\n</code></pre> <ul> <li>To output events via the Forward protocol to <code>127.0.0.1</code> on port <code>24224</code> with the tag 'tracee' using TCP, use the following flag:</li> </ul> <pre><code>--output forward:tcp://user:pass@127.0.0.1:24224?tag=tracee\n</code></pre> <ul> <li>To output events to the webhook endpoint <code>http://webhook:8080</code>, use the following flag:</li> </ul> <pre><code>--output webhook:http://webhook:8080\n</code></pre> <ul> <li>To output events to the webhook endpoint <code>http://webhook:8080</code> with a timeout of 5 seconds, use the following flag:</li> </ul> <pre><code>--output webhook:http://webhook:8080?timeout=5s\n</code></pre>"},{"location":"docs/flags/scope.1/","title":"TRACEE-SCOPE","text":""},{"location":"docs/flags/scope.1/#name","title":"NAME","text":"<p>tracee --scope - Select the scope for tracing events</p>"},{"location":"docs/flags/scope.1/#synopsis","title":"SYNOPSIS","text":"<p>tracee --scope [&lt;[uid|pid][=|!=|&lt;|&gt;|&lt;=|&gt;=]value1(,value2...)&gt; | &lt;[mntns|pidns|tree][=|!=]value1(,value2...)&gt; | &lt;[uts|comm|container|[executable|exec|binary|bin]][=|!=]value1(,value2...)&gt;] | &lt;not-container&gt; | &lt;container[=|!=]value&gt; | &lt;[container|pid]=new&gt; | &lt;follow&gt;]  ...</p>"},{"location":"docs/flags/scope.1/#description","title":"DESCRIPTION","text":"<p>The --scope flag allows you to select the scope for tracing events by defining filters.</p>"},{"location":"docs/flags/scope.1/#filter-expression","title":"FILTER EXPRESSION","text":"<p>Filter expressions can be defined to operate on scope options or process metadata. Only events that match all filter expressions will be traced.</p> <p>Multiple flags are combined with AND logic, while multiple values within a single flag are combined with OR logic when using the equals operator '='. Multiple values can be specified using ','.</p>"},{"location":"docs/flags/scope.1/#numerical-expression-operators","title":"NUMERICAL EXPRESSION OPERATORS","text":"<p>The following numerical fields support the operators '=', '!=', '&lt;', '&gt;', '&lt;=', '&gt;=':</p> <ul> <li>uid: Select events from specific user IDs.</li> <li>pid: Select events from specific process IDs.</li> </ul> <p>The following numerical fields only support the operators '=' and '!=':</p> <ul> <li>mntns: Select events from specific mount namespace IDs.</li> <li>pidns: Select events from specific process namespace IDs.</li> <li>tree: Select events that descend from specific process IDs.</li> </ul> <p>NOTE: Expressions containing '&lt;' or '&gt;' tokens must be escaped!</p>"},{"location":"docs/flags/scope.1/#string-expression-operators","title":"STRING EXPRESSION OPERATORS","text":"<p>'=', '!='</p> <p>Available for the following string fields:</p> <ul> <li>uts: Select events based on UTS (Unix Timesharing System) names.</li> <li>comm: Select events based on process command names.</li> <li>container: Select events from specific container IDs.</li> <li>executable: Select events based on the executable path.</li> </ul> <p>Strings can be compared as a prefix if ending with '*', or as a suffix if starting with '*'.</p> <p>NOTE: Expressions containing '*' token must be escaped!</p> <p>you can learn more about the wildcard in the <code>event</code> section.</p>"},{"location":"docs/flags/scope.1/#boolean-operator-prepended","title":"BOOLEAN OPERATOR (PREPENDED)","text":"<p>'!'</p> <p>Available for the following boolean field:</p> <ul> <li>container: Select events based on whether they originate from a container or not.</li> </ul>"},{"location":"docs/flags/scope.1/#special-filters","title":"SPECIAL FILTERS","text":"<p>The following special filters can be used within the scope filter expressions:</p> <ul> <li>new: Select newly created containers or process IDs.</li> <li>follow: Select events from the processes that match the criteria and their descendants.</li> </ul>"},{"location":"docs/flags/scope.1/#examples","title":"EXAMPLES","text":"<ul> <li>To trace only events from new processes, use the following flag:</li> </ul> <pre><code>--scope pid=new\n</code></pre> <ul> <li>To trace only events from pid 510 or pid 1709, use the following flag:</li> </ul> <pre><code>--scope pid=510,1709\n</code></pre> <ul> <li>To trace only events from pid 510 or pid 1709 (same as above), use the following flag:</li> </ul> <pre><code>--scope p=510 --scope p=1709\n</code></pre> <ul> <li>To trace only events from newly created containers, use the following flag:</li> </ul> <pre><code>--scope container=new\n</code></pre> <ul> <li>To trace only events from the container with ID 'ab356bc4dd554', use the following flag:</li> </ul> <pre><code>--scope container=ab356bc4dd554\n</code></pre> <ul> <li>To trace only events from containers, use the following flag:</li> </ul> <pre><code>--scope container\n</code></pre> <ul> <li>To only trace events from containers (same as above), use the following flag:</li> </ul> <pre><code>--scope c\n</code></pre> <ul> <li>To trace only events from the host, use the following flag:</li> </ul> <pre><code>--scope not-container\n</code></pre> <ul> <li>To trace only events from uid 0, use the following flag:</li> </ul> <pre><code>--scope uid=0\n</code></pre> <ul> <li>To trace only events from mntns id 4026531840, use the following flag:</li> </ul> <pre><code>--scope mntns=4026531840\n</code></pre> <ul> <li>To trace only events from pidns id not equal to 4026531836, use the following flag:</li> </ul> <pre><code>--scope pidns!=4026531836\n</code></pre> <ul> <li>To trace only events that descend from the process with pid 476165, use the following flag:</li> </ul> <pre><code>--scope tree=476165\n</code></pre> <ul> <li>To trace only events if they do not descend from the process with pid 5023, use the following flag:</li> </ul> <pre><code>--scope tree!=5023\n</code></pre> <ul> <li>To trace only events if they descend from 3213 or 5200, but not 3215, use the following flag:</li> </ul> <pre><code>--scope tree=3213,5200 --scope tree!=3215\n</code></pre> <ul> <li>To trace only events from uids greater than 0, use the following flag:</li> </ul> <pre><code>--scope 'uid&gt;0'\n</code></pre> <ul> <li>To trace only events from pids between 0 and 1000, use the following flag:</li> </ul> <pre><code>--scope 'pid&gt;0' --scope 'pid&lt;1000'\n</code></pre> <ul> <li>To trace only events from uids greater than 0 but not 1000, use the following flag:</li> </ul> <pre><code>--scope 'u&gt;0' --scope u!=1000\n</code></pre> <ul> <li>To exclude events from uts name 'ab356bc4dd554', use the following flag:</li> </ul> <pre><code>--scope uts!=ab356bc4dd554\n</code></pre> <ul> <li>To trace only events from the 'ls' command, use the following flag:</li> </ul> <pre><code>--scope comm=ls\n</code></pre> <ul> <li>To trace only events from the '/usr/bin/ls' executable, use the executable flag (or the binary alias):</li> </ul> <pre><code>--scope executable=/usr/bin/ls\n</code></pre> <pre><code>--scope binary=/usr/bin/ls\n</code></pre> <ul> <li>To trace only events from the '/usr/bin/ls' executable in the host mount namespace, use the following flag:</li> </ul> <pre><code>--scope executable=host:/usr/bin/ls\n</code></pre> <ul> <li>To trace only events from the '/usr/bin/ls' executable in the 4026532448 mount namespace, use the following flag:</li> </ul> <pre><code>--scope executable=4026532448:/usr/bin/ls\n</code></pre> <ul> <li>To trace all events that originated from 'bash' or from one of the processes spawned by 'bash', use the following flag:</li> </ul> <pre><code>--scope comm=bash --scope follow\n</code></pre>"},{"location":"docs/install/","title":"Installing Tracee","text":"<ol> <li>Tracee executable binary is available under releases.</li> <li>Tracee container image is available in Docker Hub as aquasec/tracee.</li> <li>Tracee Helm chart is available in Aqua Security's registry: <code>https://aquasecurity.github.io/helm-charts/</code> as <code>tracee</code>.</li> </ol> <p>It might also be available in various package managers managed by the community.</p> <p>Before continuing, please make sure Tracee is supported on your environment by reading the Prerequisites.</p> <p>To get started with Docker, please read the Docker guide. To get started on Kubernetes, please read the Kubernetes guide.</p>"},{"location":"docs/install/container-engines/","title":"Tracee Events Container Enrichment","text":"<p>Tracee events provide context about where the collected events originated from, including information about the originating container if available. To gather this information, Tracee needs to communicate with the relevant container runtime.</p>"},{"location":"docs/install/container-engines/#detecting-container-runtime","title":"Detecting container runtime","text":"<p>Tracee will automatically search for known supported runtimes by looking for their socket files in known locations. You may track if Tracee was able to find the container runtime socket by running Tracee with <code>debug</code> log level. There will be a line to each known runtime engine socket and a message sharing it's status.</p> <p>When running Tracee in a container, the runtime sockets must be mounted to be available for Tracee.</p> <p>For example, if running Tracee using Docker, and ContainerD runtime:</p> <pre><code>docker run --name tracee -it --rm \\\n  --pid=host --cgroupns=host --privileged \\\n  -v /etc/os-release:/etc/os-release-host:ro \\\n  -v /var/run/containerd:/var/run/containerd:ro \\\n  aquasec/tracee:latest\n</code></pre> <p>Most container runtimes have their sockets installed by default in <code>/var/run</code>, so mounting this path can also be a good option.</p>"},{"location":"docs/install/container-engines/#supported-container-runtime-engines","title":"Supported Container Runtime Engines","text":"<p>Tracee supports the following container runtimes and will look in the following paths for their socket files:</p> <ol> <li>Docker: <code>/var/run/docker.sock</code></li> <li>Containerd: <code>/var/run/containerd/containerd.sock</code></li> <li>CRI-O: <code>/var/run/crio/crio.sock</code></li> <li>Podman: <code>/var/run/podman/podman.sock</code></li> </ol>"},{"location":"docs/install/docker/","title":"Running Tracee with Docker","text":"<p>This guide will help you get started with running Tracee as a container.</p>"},{"location":"docs/install/docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Review the prerequisites for running Tracee</li> <li>If you are an Apple Mac user, please read the Mac FAQ</li> <li>Ensure that you have Docker or a compatible container runtime</li> </ul>"},{"location":"docs/install/docker/#tracee-container-image","title":"Tracee container image","text":"<p>Tracee container image is available in Docker Hub as aquasec/tracee.</p> <ul> <li>You can use the <code>latest</code> tag or a named version version e.g <code>aquasec/tracee:v0.23.0-311-g1fb04cdbb</code>.</li> <li>If you are trying the most cutting edge features, there is also a <code>dev</code> tag which is built nightly from source.</li> <li>The Tracee image is a Multi-platform image that includes a x86 and arm64 flavors. You can also access the platform-specific images directly with the <code>aarch64</code> and <code>x86_64</code> tags for the latest version or <code>aarch64-&lt;version&gt;</code> and <code>x86_64-&lt;version&gt;</code> for a specific version.  </li> <li>For most first time users, just use <code>aquasec/tracee</code>!</li> </ul>"},{"location":"docs/install/docker/#running-tracee-container","title":"Running Tracee container","text":"<p>Here is the docker run command, we will analyze it next:</p> <pre><code>docker run --name tracee -it --rm \\\n  --pid=host --cgroupns=host --privileged \\\n  -v /etc/os-release:/etc/os-release-host:ro \\\n  -v /var/run:/var/run:ro \\\n  aquasec/tracee:latest\n</code></pre> <ol> <li>Docker general flags:<ul> <li><code>--name</code> - name our container so that we can interact with it easily.</li> <li><code>--rm</code> - remove the container once it exits, assuming this is an interactive trial of Tracee.</li> <li><code>-it</code> - allow the container to interact with your terminal.</li> </ul> </li> <li>Since Tracee runs in a container but is instrumenting the host, it will need access to some resources from the host:<ul> <li><code>--pid=host</code> - share the host's process namespace with Tracee's container.</li> <li><code>--cgroupns=host</code> - share the host's cgroup namespace with Tracee's container.</li> <li><code>--privileged</code> - run the Tracee container as root so it has all the required capabilities.</li> <li><code>-v /etc/os-release:/etc/os-release-host:ro</code> - share the host's OS information file with the Tracee container.</li> <li><code>-v /var/run:/var/run</code> - share the host's container runtime socket for container enrichment</li> </ul> </li> </ol> <p>After running this command, you should start seeing a stream of events that Tracee is emitting.</p> <p>Not seeing events?</p> <p>If Tracee isn't producing events or you encounter issues, check our Troubleshooting Guide for solutions.</p> <p>For next steps, please read about Tracee Policies</p>"},{"location":"docs/install/docker/#installing-tracee","title":"Installing Tracee","text":"<p>If you are looking to permanently install Tracee, you would probably do the following:</p> <ol> <li>Remove interactive flags <code>-it</code> and replace with daemon flag <code>-d</code></li> <li>Consider how to collect events from the container.</li> </ol> <p>Or you can follow the Kubernetes guide which addresses these concerns.</p>"},{"location":"docs/install/healthz/","title":"Health Monitoring","text":"<p>Tracee can expose a <code>/healthz</code> endpoint that returns <code>OK</code> if the everything is healthy. This is a common pattern in Cloud Native and Kubernetes applications.  </p> <p>Health monitoring endpoint is disabled by default, and can be enabled with the configuration:</p> <pre><code>healthz: true\n</code></pre> <p>By default port <code>3366</code> is used. It can be customized with the configuration:</p> <pre><code>listen-addr: 1234\n</code></pre>"},{"location":"docs/install/kubernetes/","title":"Installing Tracee in Kubernetes","text":"<p>This guide will help you get started with Tracee by installing it in a Kubernetes cluster.  </p>"},{"location":"docs/install/kubernetes/#prerequisites","title":"Prerequisites","text":"<ul> <li>Supported environment - please refer to the Prerequisites</li> <li>Kubernetes - this was tested on minikube, but should work the same with most other Kubernetes distributions</li> <li>Helm</li> </ul> Verify step <pre><code>kubectl get po -A\n</code></pre> <pre><code>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE \nkube-system   coredns-565d847f94-kd9xx           1/1     Running   0          15s \nkube-system   etcd-minikube                      1/1     Running   0          26s \nkube-system   kube-apiserver-minikube            1/1     Running   0          26s \nkube-system   kube-controller-manager-minikube   1/1     Running   0          26s \nkube-system   kube-proxy-cvqjm                   1/1     Running   0          15s \nkube-system   kube-scheduler-minikube            1/1     Running   0          26s \nkube-system   storage-provisioner                1/1     Running   0          15s \n</code></pre>"},{"location":"docs/install/kubernetes/#install-tracee","title":"Install Tracee","text":"<p>The provided Helm chart will install Tracee as a DaemonSet so that it's tracing all the nodes in the cluster.</p> <pre><code>helm repo add aqua https://aquasecurity.github.io/helm-charts/\nhelm repo update\nhelm install tracee aqua/tracee --namespace tracee --create-namespace\n</code></pre> Verify step <pre><code>kubectl get pods -n tracee\n</code></pre> <pre><code>NAME           READY   STATUS    RESTARTS   AGE \ntracee-fcjmp   1/1     Running   0          4m11s\n</code></pre> <p>Once installed, Tracee immediately starts producing events. Since Tracee is deployed as a DaemonSet, a Tracee Pod is running on every node in the cluster. Every Tracee Pod is monitoring the node it is running on.</p>"},{"location":"docs/install/kubernetes/#viewing-events","title":"Viewing Events","text":"<p>The easiest way to tap into the log stream of all Tracee Pods is with the <code>kubectl logs</code> command:</p> <pre><code>kubectl logs -f daemonset/tracee -n tracee\n</code></pre> <p>Note</p> <p>Tracee can produce a very high volume of events which could overwhelm kubectl's log collection command. If run in a busy cluster or with a verbose policy, this command might be slow or unresponsive.</p> <p>In production scenario you would probably want to collect and ship events logs into a persistent storage that you can query.  You can use any log collection solution of your choosing. We have a tutorial on how to do this using the open source Grafana Stack here.</p>"},{"location":"docs/install/kubernetes/#applying-policies","title":"Applying Policies","text":"<p>By default, Tracee collects a basic set of events that gives you a general overview of the cluster. If you're looking to do more with Tracee, You might want to create a new Policy. A policy lets you capture specific set of events from a specific set of workloads. For example, if you have an application that you want to monitor more closely, or in a specialized way, you can create a policy scoped to that application, with a different set of events and filters applied. To learn more, please refer to the Events and Policies sections.</p> <p>When you are ready to apply a policy, it's as easy as <code>kubectl apply -f your-policy.yaml</code>. More details here.</p>"},{"location":"docs/install/kubernetes/#configuring-tracee","title":"Configuring Tracee","text":"<p>In some cases you will need to configure Tracee to your preferences. For example, to change the output event format, or to set a different log level. To learn more about available configuration options please see the configuration section.</p> <p>Tracee's configuration is accessible as a ConfigMap in Kubernetes. Since we installed Tracee with Helm, you can also configure Tracee with it, for example: <code>helm upgrade tracee --set config.cache.size=1024</code>. More details here.</p>"},{"location":"docs/install/kubernetes/#optional-exercising-a-security-event","title":"Optional: Exercising a security event","text":"<p>To see Tracee in action, let's simulate a security event. We'll do a \"file-less\" execution, which is a common evasion technique used by some malware, and is flagged by Tracee as suspicious activity. To simulate this, we'll use the tracee-tester example image it will simulate the suspicious activity without harming your environment.</p> <pre><code>kubectl run tracee-tester --image=aquasec/tracee-tester -- TRC-105\n</code></pre> <p>You can see the event in the logs:</p> <pre><code>kubectl logs -f ds/tracee -n tracee | grep fileless_execution \n</code></pre>"},{"location":"docs/install/kubernetes/#next-steps","title":"Next steps","text":"<p>Familiarize with the different events, filters, and configuration options in the documentation.</p> <p>Read other tutorials.</p> <p>Need Help?</p> <ul> <li>For common issues and solutions, see our Troubleshooting Guide</li> <li>For help and support, feel free to use GitHub Discussions</li> </ul>"},{"location":"docs/install/kubernetes/#video-content","title":"Video Content","text":"<p>If you prefer a video version of the Kubernetes installation guide, have a look at the following video:</p> <p>Getting started with eBPF in Kubernetes - Tracee Installation Guide </p> <p></p>"},{"location":"docs/install/prerequisites/","title":"Prerequisites for running Tracee","text":"<p>Tracee is heavily dependent on Linux and does not support any other operating system.</p>"},{"location":"docs/install/prerequisites/#distributions-and-linux-flavors","title":"Distributions and Linux Flavors","text":"<ul> <li>List of supported environments:</li> <li>With BTFHUB (check BTF session below):<ul> <li>Centos 8 (kernel &lt; 4.18.0-193.el8)</li> <li>Debian 10 (buster) with v5.10 kernels</li> <li>Oracle Linux 7 and 8 with v5.4 kernels</li> <li>Red Hat 8 (kernel &lt;= 4.18.0-147.57.1)</li> <li>SuSe 15.3 (kernel &lt; 5.3.18-150300.59.90)</li> </ul> </li> <li>Regular Build:<ul> <li>Amazon Linux 2</li> <li>Centos 8 and newer</li> <li>Debian 11 (bullseye) and newer</li> <li>Fedora 38 and newer</li> <li>Oracle Linux 7, 8 (v5.4 kernels, some might need btfhub) and newer</li> <li>Red Hat 8 (newer v4.18 kernels) and newer</li> <li>SuSe 15.3 (newer kernels) and newer</li> <li>Possibly other distributions with recent kernels.</li> </ul> </li> <li>Cloud Environments:<ul> <li>Amazon EKS</li> <li>Azure AKS</li> <li>GKE (Google Kubernetes Engine): 5.4, 5.10, 5.15 and newer</li> <li>Minikube, Microk8s and other development environments</li> </ul> </li> </ul> <p>This list is based on capabilities those versions provide and not necessarily in tracee having all its features tested on each of them. Please provide feedback if you face any issues in one of those environments.</p>"},{"location":"docs/install/prerequisites/#kernel-version","title":"Kernel version","text":"<p>To run Tracee a modern longterm supported kernel is needed: 5.4, 5.10, 5.15, 6.2, 6.5  </p> <p>You can check kernel.org for current supported kernels. In addition to upstream kernels, most distributions long-term supported kernels are supported as well, including CentOS8 4.18 kernel.</p>"},{"location":"docs/install/prerequisites/#btf","title":"BTF","text":"<p>Tracee needs low-level type information about the running kernel. Most modern Linux distributions ship with the BTF feature that exposes this information.  </p> <p>To test if this feature is enabled in your environment, check if <code>/sys/kernel/btf/vmlinux</code> exists. If absent, you might need to upgrade to a newer OS version, or contact your OS provider.</p>"},{"location":"docs/install/prerequisites/#kernel-symbols","title":"Kernel symbols","text":"<p>Certain Tracee events require access to the Kernel Symbols Table, a feature present in many Linux distributions.</p> <p>To test if this feature is enabled in your environment, check if <code>/proc/kallsyms</code> exists. If absent, contact your OS provider.</p> <p>Alternatively, you can disable the following events which depends on kallsyms:</p> <ul> <li><code>dirty_pipe_splice</code> (detects dirty pipe vulnerability - CVE-2022-0847)</li> <li><code>hooked_syscall</code> (detects system call interception technique)</li> <li><code>hidden_kernel_module</code> (detects hidden kernel modules technique)</li> <li><code>hooked_proc_fops</code> (detects procfs file operations interception technique)</li> <li><code>print_net_seq_ops</code> (related hooked_seq_ops event)</li> <li><code>hooked_seq_ops</code> (detects network packets interception technique)</li> <li><code>print_mem_dump</code> (allows memory dumping from symbols to signatures can use)</li> </ul> <p>For more information and help about kernel symbols, please see here.</p>"},{"location":"docs/install/prerequisites/#os-information","title":"OS information","text":"<p>Tracee will try to probe the running OS and kernel to detect available capabilities. For this, it needs access to some standard informative files:</p> <ul> <li>For OS information please make sure the file <code>/etc/os-release</code> is available.</li> <li>For Kernel information please make sure one of the files <code>/boot/config-$(uname-r)</code> OR <code>/proc/config.gz</code> is available.</li> </ul> <p>For more information and help about OS info files, please see here.</p>"},{"location":"docs/install/prerequisites/#process-capabilities","title":"Process capabilities","text":"<p>Tracee needs non-trivial capabilities to instrument the kernel. The easiest way is run Tracee as \"privileged\" or \"root\".  </p> <p>If you want to run Tracee with \"least privileges\", here are the required capabilities and justifications:</p> <ul> <li>Manage eBPF maps limits (<code>CAP_SYS_RESOURCE</code>)</li> <li>Load and Attach eBPF programs:<ul> <li><code>CAP_BPF</code>+<code>CAP_PERFMON</code> for recent kernels (&gt;=5.8) where the kernel perf paranoid value in <code>/proc/sys/kernel/perf_event_paranoid</code> is equal to 2 or less</li> <li>or <code>CAP_SYS_ADMIN</code> otherwise</li> </ul> </li> <li><code>CAP_SYS_PTRACE</code> (to collect information about processes)</li> <li><code>CAP_NET_ADMIN</code> (to use tc for packets capture)</li> <li><code>CAP_SETPCAP</code> (if given - used to reduce bounding set capabilities)</li> <li><code>CAP_SYSLOG</code> (to access kernel symbols through /proc/kallsyms)</li> <li>On some environments (e.g. Ubuntu) <code>CAP_IPC_LOCK</code> might be required as well.</li> <li>On cgroup v1 environments, <code>CAP_SYS_ADMIN</code> is recommended if running from a container in order to allow tracee to mount the cpuset cgroup controller.</li> </ul> <p>For more information and help about process capabilities, please see here.</p> <p>Having Issues?</p> <p>If you encounter problems during installation or setup, check our Troubleshooting Guide for common solutions.</p>"},{"location":"docs/install/prerequisites/#processor-architecture","title":"Processor architecture","text":"<p>Tracee supports x86 and arm64 processors.</p>"},{"location":"docs/install/prometheus/","title":"Prometheus","text":"<p>Integrating with Prometheus</p> <p>Performance</p> <p>Current Prometheus integration targets performance numbers for event production, consumption and detection. It does not target the detections themselves.</p> <p>Tracee is enabled for prometheus scraping by default. Scraping can be done through the following URLs:</p> <p>tracee can be scraped through <code>:3366/metrics</code></p> <p>Metrics addresses can be changed through tracee command line arguments <code>metrics</code> and <code>listen-addr</code>, check <code>--help</code> for more information.</p> <p>Tip</p> <p>Check this tutorial for more information as well.</p>"},{"location":"docs/install/config/","title":"Configuring Tracee","text":"<p>Tracee has many different options and settings that control how Tracee operates. </p> <p>To learn about how to apply configuration to Tracee, please refer to the CLI or Kubernetes specific guides, depending on how you deploy Tracee.</p> <p>A complete config file with all available options can be found here. Most of the options are documented in different sections in the documentation.</p> <ul> <li>NOTE: The YAML examples can be translated to JSON as well</li> </ul>"},{"location":"docs/install/config/#common-configurations","title":"Common configurations","text":""},{"location":"docs/install/config/#output","title":"Output","text":"<ul> <li><code>--output</code> (<code>-o</code>): Controls how and where the output is printed.</li> </ul> <p>NOTE: You can view more in the output section.</p> <p>YAML:   <pre><code>output:\n  - json\n</code></pre></p>"},{"location":"docs/install/config/#server","title":"Server","text":"<ul> <li><code>--metrics-endpoint</code>: Enables the metrics endpoint.</li> </ul> <p>NOTE: You can view more in the Prometheus section.</p> <p>YAML:   <pre><code>metrics-endpoint: true\n</code></pre></p> <ul> <li><code>--grpc-listen-addr</code>: Specifies the address for the gRPC server.</li> </ul> <p>YAML:   <pre><code>grpc-listen-addr: tcp:50051\n</code></pre></p>"},{"location":"docs/install/config/#process-tree","title":"Process Tree","text":"<ul> <li><code>--proctree</code> (<code>-t</code>): Controls process tree options.</li> </ul> <p>NOTE: You can view more in the Process Tree section.</p> <p>YAML:   <pre><code>proctree:\n  - process\n</code></pre></p>"},{"location":"docs/install/config/#install-path","title":"Install Path","text":"<ul> <li><code>--install-path</code>: Specifies the directory where Tracee will install or look for its resources. If not specified, the default installation directory is <code>/tmp/tracee</code>.</li> </ul> <p>YAML:   <pre><code>install-path: /opt/tracee\n</code></pre></p> <p>NOTE: This option is useful when running Tracee in environments where <code>/tmp</code> is not suitable or secure.</p>"},{"location":"docs/install/config/#log","title":"Log","text":"<ul> <li><code>--log</code> (<code>-l</code>): Controls the verbosity level of Tracee's logging system. The default log level is <code>info</code>.</li> </ul> <p>NOTE: You can view more in the Tracee Logs section.</p> <p>YAML:   <pre><code>log:\n  - level: debug\n</code></pre></p>"},{"location":"docs/install/config/#containers","title":"Containers","text":"<ul> <li>To disable container enrichment use: <code>--containers enrich=false</code>.</li> </ul> <p>YAML:   <pre><code>containers:\n  enrich: false\n</code></pre></p> <p>NOTE: You can view more in the containers section.</p> <ul> <li><code>--containers</code>: Configures container enrichment and runtime sockets. For example, to configure runtime sockets:</li> </ul> <p>YAML:   <pre><code>containers:\n  sockets:\n    - runtime: docker\n      socket: /var/run/docker.sock\n</code></pre></p>"},{"location":"docs/install/config/#dns-cache","title":"DNS Cache","text":"<ul> <li><code>--dnscache</code>: Enables DNS caching in Tracee.</li> </ul> <p>NOTE: You can view more in the DNS Cache section. </p> <p>YAML:   <pre><code>dnscache: enable\n</code></pre></p>"},{"location":"docs/install/config/#capabilities","title":"Capabilities","text":"<ul> <li><code>--capabilities</code> (<code>-C</code>): Define specific capabilities for Tracee to run with. This allows you to either bypass, add, or drop certain capabilities based on your security and operational needs.</li> </ul> <p>NOTE: You can view more in the Tracee Capabilities section</p> <p>YAML:   <pre><code>capabilities:\n  - add: \n      - CAP_SYS_ADMIN\n  - drop: \n      - CAP_NET_RAW\n</code></pre></p> <p>NOTE: Capabilities are Linux-specific permissions that control which privileged operations a program can perform.</p>"},{"location":"docs/install/config/#buffer-and-cache","title":"Buffer and Cache","text":"<ul> <li><code>--perf-buffer-size</code> (<code>-b</code>): Specifies the size of the internal perf ring buffer in pages.</li> </ul> <p>Default: <code>1024</code> (4 MB)</p> <p>YAML:   <pre><code>perf-buffer-size: 2048\n</code></pre></p> <ul> <li><code>--blob-perf-buffer-size</code>: Specifies the size of the internal perf ring buffer used to send blobs from the kernel.</li> </ul> <p>Default: <code>1024</code> (4 MB)</p> <p>YAML:   <pre><code>blob-perf-buffer-size: 2048\n</code></pre></p> <ul> <li><code>--pipeline-channel-size</code>: Specifies the size of each pipeline stage's output channel.</li> </ul> <p>Default: <code>1000</code></p> <p>YAML:   <pre><code>pipeline-channel-size: 2048\n</code></pre></p>"},{"location":"docs/install/config/cli/","title":"Configuring Tracee with CLI","text":"<p>The <code>--config</code> flag allows you to specify global configuration options for Tracee by providing a configuration file in YAML or JSON format, among other supported formats. The <code>--config</code> flag can be used to set any flag that is available through the command line interface (CLI), except for a few reserved flags.</p>"},{"location":"docs/install/config/cli/#usage","title":"Usage","text":"<p>To use the <code>--config</code> flag, you need to provide the path to the configuration file. For example, if you have a YAML configuration file located at /path/to/tracee-config.yaml, you can load it with the following command:</p> <p><pre><code>tracee --config /path/to/tracee-config.yaml\n</code></pre> NOTE: you can find an example config file in here.</p>"},{"location":"docs/install/config/kubernetes/","title":"Configuring Tracee in Kubernetes","text":"<p>In Kubernetes, Tracee uses a ConfigMap, called <code>tracee</code> to make Tracee configuration accessible. The ConfigMap includes a data file called <code>config.yaml</code> with the desired configuration. For example:</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/name: tracee\n    app.kubernetes.io/component: tracee\n    app.kubernetes.io/part-of: tracee\n  name: tracee\ndata:\n  config.yaml: |-\n    output:\n      json:\n        files:\n          - /var/log/tracee.json\n      options:\n        parse-arguments: true\n</code></pre>"},{"location":"docs/install/config/kubernetes/#kubectl","title":"Kubectl","text":"<p>You can use <code>kubectl</code> to interact with it:</p> <p>View:</p> <pre><code>kubectl get cm tracee-config -n tracee\n</code></pre> <p>Edit:</p> <pre><code>kubectl edit cm tracee-config -n tracee\n</code></pre>"},{"location":"docs/install/config/kubernetes/#helm","title":"Helm","text":"<p>You can customize specific options with the helm installation:</p> <pre><code>helm install tracee aqua/tracee \\\n        --namespace tracee --create-namespace \\\n        --set config.blobPerfBufferSize=1024\n</code></pre> <p>or after installation:</p> <pre><code>helm install tracee aqua/tracee \\\n        --namespace tracee --create-namespace \\\n        --set config.output.format=table\n</code></pre> <p>or to provide a complete config file:</p> <pre><code> helm install tracee aqua/tracee \\\n        --namespace tracee --create-namespace \\\n        --set-file configFile=myconfig.yaml\n</code></pre>"},{"location":"docs/outputs/","title":"Tracee Outputs","text":"<p>Depending on the system, Tracee might collect thousands of logs per day. To improve access and filtering of those logs, it is possible to modify the way logs are displayed and stored. This is done through the <code>output</code> and <code>log</code> section of the Tracee configuration file. </p> <p>For examples on each configuration, please refer to: * Documentation on configuring Tracee logs * Documentation on configuring output options * Documentation on configuring output formats</p> <p>Note that example configuration for each can be found in the Tracee root directory within the examples folder &lt; examples/config/global_config.yaml</p>"},{"location":"docs/outputs/logging/","title":"Tracee Logs","text":"<p>This section showcases how to configure diagnostics log. The information provided can then be used to troubleshoot Tracee. This is done through the Tracee configuration file. For more information, have a look at the respective section in the installation guide.</p>"},{"location":"docs/outputs/logging/#log-options","title":"Log options","text":"<p>Configure the log severity:</p> <pre><code>log:\n    level: debug\n</code></pre> <p>Note that the other log level are <code>info</code>, <code>warn</code>, <code>error</code> and <code>panic</code>.</p> <p>Redirect logs to a file if needed:</p> <pre><code>log:\n    level: debug\n    file: \"/tmp/tracee.log\"\n</code></pre> <p>Logs can be aggregated for a given interval (default: 3s) to delay its output:</p> <pre><code>log:\n    level: debug\n    aggregate:\n        enabled: true\n        flush-interval: \"10s\"\n</code></pre> <p>The flush-interval defines how often the Tracee logs will be forwarded.</p> <p>Filter logs which message contains specified words:</p> <pre><code>log:\n    filters: \n        msg: \n            - foo\n            - bar\n</code></pre> <p>Filter logs using regular expressions against messages:</p> <pre><code>log:\n    filters: \n        regex: \n            - ^pattern-one\n</code></pre> <p>Filter logs originating from a specific package:</p> <pre><code>log:\n    filters: \n        pkg:\n            - core\n</code></pre> <p>Filter logs originating from a specific file:</p> <pre><code>log:\n    filter: \n        file: \n            - /pkg/cmd/flags/logger.go\n</code></pre> <p>Filter logs based on their severity level:</p> <pre><code>log:\n    filters: \n        level: \n            - error\n</code></pre> <p>Filter logs originating from libbpf:</p> <pre><code>log:\n    filters: \n        libbpf: true\n</code></pre>"},{"location":"docs/outputs/logging/#additional-configuration","title":"Additional Configuration","text":"<p>All <code>filters</code> options can also be used with <code>filter-out</code> to achieve the opposite behavior. </p> <p>For instance, the following configuration would exclude all logs with the severity level <code>error</code>:</p> <pre><code>log:\n    filter-out: \n        level: \n            - error\n</code></pre>"},{"location":"docs/outputs/output-formats/","title":"Tracing Output Formats","text":"<p>It is possible to define how the events that Tracee collects should be displayed. This is done through the Tracee configuration. You can read more on configuration in the Tracee installation guide.</p> <p>Note that only one output format can be used in the Tracee configuration.</p>"},{"location":"docs/outputs/output-formats/#available-formats","title":"Available Formats","text":"<p>The following examples will have to be added into a Tracee configuration file.</p>"},{"location":"docs/outputs/output-formats/#json","title":"JSON","text":"<p>Displays output events in json format. The default path to a file is stdout.</p> <pre><code>output:\n    json:\n        files:\n            - stdout\n</code></pre> <p>Note: the <code>files: key</code> must also be defined, even if it's just for stdout. This is mandatory for the parser.</p> <p>Tip</p> <p>A good tip is to pipe tracee json output to jq tool, this way you can select fields, rename them, filter values, and much more!</p>"},{"location":"docs/outputs/output-formats/#webhook","title":"Webhook","text":"<p>This sends events in json format to the webhook url</p> <p>Below is an example for configuring webhooks in the Tracee output section:</p> <pre><code>output:\n    # webhook:\n    #     - webhook1:\n    #         protocol: http\n    #         host: localhost\n    #         port: 8000\n    #         timeout: 5s\n    #         gotemplate: /path/to/template/test.tmpl\n    #         content-type: application/json\n    #     - webhook2:\n    #         protocol: http\n    #         host: localhost\n    #         port: 9000\n    #         timeout: 3s\n    #         gotemplate: /path/to/template/test.tmpl\n    #         content-type: application/json\n</code></pre> <p>Note: Please ensure that the respective fields will have to be uncommented.</p>"},{"location":"docs/outputs/output-formats/#forward","title":"Forward","text":"<p>This sends events to a FluentBit receiver. More information on FluentBit can be found in the official documentation.</p> <p>Below is an example for forwarding Tracee output: </p> <pre><code>output:\n    # forward:\n    #     - forward1:\n    #         protocol: tcp\n    #         user: user\n    #         password: pass\n    #         host: 127.0.0.1\n    #         port: 24224\n    #         tag: tracee1\n    #     - forward2:\n    #         protocol: udp\n    #         user: user\n    #         password: pass\n    #         host: 127.0.0.1\n    #         port: 24225\n    #         tag: tracee2\n</code></pre> <p>Note: Please ensure that the respective fields will have to be uncommented.</p>"},{"location":"docs/outputs/output-formats/#table","title":"Table","text":"<p>Displays output events in table format. The default path to a file is stdout.</p> <pre><code>output:\n    table:\n        files:\n            - /path/to/table1.out\n            - /path/to/table2.out\n</code></pre> <p>Note: the <code>files: key</code> must also be defined, even if it's just for stdout. This is mandatory for the parser.</p>"},{"location":"docs/outputs/output-formats/#table-verbose","title":"Table (Verbose)","text":"<p>Displays the output events in table format with extra fields per event. The default path to a file is stdout.</p> <pre><code>output:\n    table-verbose:\n        files:\n            - stdout\n</code></pre> <p>Note: the <code>files: key</code> must also be defined, even if it's just for stdout. This is mandatory for the parser.</p>"},{"location":"docs/outputs/output-formats/#gotemplate","title":"GOTEMPLATE","text":"<p>When authoring a Go template the data source is Tracee's <code>trace.Event</code> struct, which is defined in <code>https://github.com/aquasecurity/tracee/blob/main/types/trace/trace.go#L15</code>.</p> <p>Go template can utilize helper functions from Sprig.</p> <p>For example templates, see tracee/cmd/tracee-rules/templates.</p> <p>The following sections can be specified as part of go templates:</p> <pre><code>output:\n    # gotemplate:\n    #     template: /path/to/my_template1.tmpl\n    #     files:\n    #         - /path/to/output1.out\n    #         - /path/to/output2.out\n</code></pre>"},{"location":"docs/outputs/output-options/","title":"Output Options","text":"<p>Tracee supports different output options for customizing the way events are printed. For a complete list of available options.</p> <p>Available options:</p> <ol> <li> <p>stack-addresses </p> <p>Makes it possible to pick stack memory addresses from each event.</p> <pre><code>output:\n    options:\n        stack-addresses: true\n</code></pre> </li> <li> <p>parse-arguments</p> <p>In order to have a better experience with the output provided by tracee, you may opt to parse event arguments to a human *readable format.</p> <pre><code>output:\n    options:\n        parse-arguments: true\n</code></pre> </li> <li> <p>exec-env</p> <p>Sometimes it is also important to know the execution environment variables whenever an event is detected, specially when detecting execve event.</p> <pre><code>output:\n    options:\n        exec-env: true\n</code></pre> </li> <li> <p>exec-hash</p> <p>This is a special output option for sched_process_exec so user can get the file hash and process ctime (particularly interesting if you would like to compare executed binaries from a list of known hashes, for example).</p> <pre><code>output:\n    options:\n        exec-hash: dev-inode\n</code></pre> </li> <li> <p>sort-events</p> <p>This makes it possible to sort the events as they happened. Especially in systems where Tracee tracks lots of events, it can happen that they are received unordered. More information is provided in the ordering-event section of the documentation. <pre><code>output:\n    options:\n            sort-events: true\n</code></pre></p> </li> </ol>"},{"location":"docs/policies/","title":"Policies","text":"<p>Policies allow users to specify which events to trace in which workloads. The policy <code>scope</code> defines which workloads this policy is limited to. The policy can define multiple <code>rules</code> that specify the events to trace. Policies are used both for the Tracee CLI and for the Tracee Kubernetes installation. This makes it easier to share policies across use cases and environments.</p> <p>It is possible to load up to 64 policies into Tracee.</p> <p>Here is an example policy:</p> <pre><code>apiVersion: tracee.aquasec.com/v1beta1\nkind: Policy\nmetadata:\n  name: overview-policy\n  annotations:\n    description: sample overview policy\nspec:\n  scope:\n    - global\n  rules:\n    - event: dropped_executable\n    - event: security_file_open\n      filters:\n        - data.pathname=/tmp/*\n</code></pre> <p>This policy applies to any workload (<code>global</code>) and will log the <code>dropped_executable</code>, and <code>security_file_open</code> events. A data filter (<code>data.pathname</code>) is set on the <code>security_file_open</code> event to log only files which were opened from the <code>/tmp</code> directory.</p> <p>Note</p> <p>Note that currently each event type can only be defined once in a policy</p> <p>There are many ways to fine tune the scope and filters. For further information on the details, have a look at the respective sections: </p> <ul> <li>Specify the Policy scope</li> <li>Filter events in the rules section</li> </ul> <p>While specifying event filters is optional, policies must have the <code>name</code>, <code>description</code>, <code>scope</code> and <code>rules</code> fields.</p>"},{"location":"docs/policies/#related-topics","title":"Related Topics","text":"<ul> <li>Events Documentation - Learn about available events to use in policies</li> <li>Policy Usage Guide - How to use policies with Tracee CLI</li> <li>Kubernetes Policies - How to deploy policies in Kubernetes</li> <li>Troubleshooting - Common policy-related issues and solutions</li> </ul>"},{"location":"docs/policies/rules/","title":"Rules","text":"<p>Rules are part of the Tracee Policy, <code>rules</code> let you define which events to trace.</p> <p><code>rules</code> have 2 sections:  - events: let you define which events you want to trace. - filters: enable you to refine the policy's scope.</p> <p>Tracee supports many kinds of events to trace. You can find which events you can trace in the Events section.</p> <ul> <li>NOTE: It is possible to define multiple events within each policy.</li> </ul> <p>Below is an example showcasing a policy: <pre><code>apiVersion: tracee.aquasec.com/v1beta1\nkind: Policy\nmetadata:\n  name: sample-scope-filter\n  annotations:\n    description: sample scope filter\nspec:\n  scope:\n    - global\n  rules:\n    - event: openat\n      filters:\n        - uid=1000\n</code></pre></p>"},{"location":"docs/policies/rules/#events","title":"Events","text":""},{"location":"docs/policies/rules/#type-of-events","title":"Type of Events","text":"<p>The value of an <code>event</code> is the event name from the supported events.</p> <p>For example: <code>syscall</code> event would be the <code>syscall</code> event name.</p> <p>The events section provides further information on the type of events that Tracee can trace.</p>"},{"location":"docs/policies/rules/#filters","title":"Filters","text":"<p>Filters enable you to refine the policy's scope by specifying conditions for particular events. This allows you to narrow down the criteria to precisely target the events you're interested in, ensuring that the policy applies only under specific circumstances.</p> <p>Every <code>event</code> that is specified within the <code>rules</code> section supports three types of filters: <code>scope</code>, <code>data</code> and <code>return value</code>.</p>"},{"location":"docs/policies/rules/#scope-filters","title":"Scope filters","text":"<p>Further refinement of the policy's scope is achievable through the application of scope filters:</p> <pre><code>apiVersion: tracee.aquasec.com/v1beta1\nkind: Policy\nmetadata:\n  name: sample-scope-filter\n  annotations:\n    description: sample scope filter\nspec:\n  scope:\n    - global\n  rules:\n    - event: sched_process_exec\n      filters:\n        - pid=1000\n</code></pre> <p>The scope filters supported are:</p>"},{"location":"docs/policies/rules/#p-pid-processid","title":"p, pid, processId","text":"<pre><code>event: sched_process_exec\nfilters:\n    - pid=1000\n</code></pre>"},{"location":"docs/policies/rules/#tid-threadid","title":"tid, threadId","text":"<pre><code>event: sched_process_exec\nfilters:\n    - tid=13819\n</code></pre>"},{"location":"docs/policies/rules/#ppid-parentprocessid","title":"ppid, parentProcessId","text":"<pre><code>event: sched_process_exec\nfilters:\n    - ppid=1000\n</code></pre>"},{"location":"docs/policies/rules/#hosttid-hostthreadid","title":"hostTid, hostThreadId","text":"<pre><code>event: sched_process_exec\nfilters:\n    - hostTid=1000\n</code></pre>"},{"location":"docs/policies/rules/#hostpid","title":"hostPid","text":"<pre><code>event: sched_process_exec\nfilters:\n    - hostPid=1000\n</code></pre>"},{"location":"docs/policies/rules/#hostparentprocessid","title":"hostParentProcessId","text":"<pre><code>event: sched_process_exec\nfilters:\n    - hostParentProcessId=1\n</code></pre>"},{"location":"docs/policies/rules/#uid-userid","title":"uid, userId","text":"<pre><code>event: sched_process_exec\nfilters:\n    - uid=0\n</code></pre>"},{"location":"docs/policies/rules/#mntns-mountnamespace","title":"mntns, mountNamespace","text":"<pre><code>event: sched_process_exec\nfilters:\n    - mntns=4026531840\n</code></pre>"},{"location":"docs/policies/rules/#pidns-pidnamespace","title":"pidns, pidNamespace","text":"<pre><code>event: sched_process_exec\nfilters:\n    - pidns=4026531836\n</code></pre>"},{"location":"docs/policies/rules/#comm-processname","title":"comm, processName","text":"<pre><code>event: sched_process_exec\nfilters:\n    - comm=uname\n</code></pre>"},{"location":"docs/policies/rules/#hostname","title":"hostName","text":"<pre><code>event: sched_process_exec\nfilters:\n    - hostName=hostname\n</code></pre>"},{"location":"docs/policies/rules/#cgroupid","title":"cgroupId","text":"<pre><code>event: sched_process_exec\nfilters:\n    - cgroupId=5247\n</code></pre>"},{"location":"docs/policies/rules/#container","title":"container","text":"<pre><code>event: sched_process_exec\nfilters:\n    - container=66c2778945e29dfd36532d63c38c2ce4ed1\n</code></pre>"},{"location":"docs/policies/rules/#containerid","title":"containerId","text":"<pre><code>event: sched_process_exec\nfilters:\n    - containerId=66c2778945e29dfd36532d63c38c2ce4ed1\n</code></pre>"},{"location":"docs/policies/rules/#containerimage","title":"containerImage","text":"<pre><code>event: sched_process_exec\nfilters:\n    - containerImage=ubuntu:latest\n</code></pre>"},{"location":"docs/policies/rules/#containername","title":"containerName","text":"<pre><code>event: sched_process_exec\nfilters:\n    - containerName=test\n</code></pre>"},{"location":"docs/policies/rules/#podname","title":"podName","text":"<pre><code>event: sched_process_exec\nfilters:\n    - podName=daemonset/test\n</code></pre>"},{"location":"docs/policies/rules/#podnamespace","title":"podNamespace","text":"<pre><code>event: sched_process_exec\nfilters:\n    - podNamespace=production\n</code></pre>"},{"location":"docs/policies/rules/#poduid","title":"podUid","text":"<pre><code>event: sched_process_exec\nfilters:\n    - podUid=66c2778945e29dfd36532d63c38c2ce4ed16a002c44cb254b8e\n</code></pre>"},{"location":"docs/policies/rules/#data-filter","title":"Data filter","text":"<p>Events contain data that can be filtered.</p> <pre><code>apiVersion: tracee.aquasec.com/v1beta1\nkind: Policy\nmetadata:\n  name: sample-data-filter\n  annotations:\n    description: sample data filter\nspec:\n  scope:\n    - global\n  rules:\n    - event: security_file_open\n      filters:\n        - data.pathname=/tmp*\n</code></pre> <p>Data fields can be found on the respective event definition, in this case security_file_open - be aware of possible changes to the definition linked above, so always check the main branch.</p> <p>Or the user can test the event output in CLI before defining a policy, e.g:</p> <pre><code>tracee -e security_file_open --output json\n</code></pre> <pre><code>{\"timestamp\":1680182976364916505,\"threadStartTime\":1680179107675006774,\"processorId\":0,\"processId\":676,\"cgroupId\":5247,\"threadId\":676,\"parentProcessId\":1,\"hostProcessId\":676,\"hostThreadId\":676,\"hostParentProcessId\":1,\"userId\":131,\"mountNamespace\":4026532574,\"pidNamespace\":4026531836,\"processName\":\"systemd-oomd\",\"hostName\":\"josedonizetti-x\",\"container\":{},\"kubernetes\":{},\"eventId\":\"730\",\"eventName\":\"security_file_open\",\"matchedPolicies\":[\"\"],\"argsNum\":6,\"returnValue\":0,\"syscall\":\"openat\",\"stackAddresses\":null,\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"args\":[{\"name\":\"pathname\",\"type\":\"const char*\",\"value\":\"/proc/meminfo\"},{\"name\":\"flags\",\"type\":\"string\",\"value\":\"O_RDONLY|O_LARGEFILE\"},{\"name\":\"dev\",\"type\":\"dev_t\",\"value\":45},{\"name\":\"inode\",\"type\":\"unsigned long\",\"value\":4026532041},{\"name\":\"ctime\",\"type\":\"unsigned long\",\"value\":1680179108391999988},{\"name\":\"syscall_pathname\",\"type\":\"const char*\",\"value\":\"/proc/meminfo\"}]}\n</code></pre>"},{"location":"docs/policies/rules/#return-value-filter","title":"Return value filter","text":"<p>Return values can also be filtered.</p> <pre><code>apiVersion: tracee.aquasec.com/v1beta1\nkind: Policy\nmetadata:\n  name: sample-return-value\n  annotations:\n    description: sample return value\nspec:\n  scope:\n    - global\n  rules:\n    - event: close\n      filters:\n        - retval!=0\n</code></pre>"},{"location":"docs/policies/scopes/","title":"Scopes","text":"<p><code>scope</code> allows you to select the scope for tracing events by defining filters. </p>"},{"location":"docs/policies/scopes/#filter-expression","title":"FILTER EXPRESSION","text":"<p>Filter expressions can be defined to operate on scope options or process metadata. Only events that match all filter expressions will be traced.</p> <p>Multiple flags are combined with AND logic, while multiple values within a single flag are combined with OR logic when using the equals operator '='. Multiple values can be specified using ','.</p>"},{"location":"docs/policies/scopes/#numerical-expression-operators","title":"NUMERICAL EXPRESSION OPERATORS","text":"<p>The following numerical fields support the operators '=', '!=', '&lt;', '&gt;', '&lt;=', '&gt;=':</p> <ul> <li>uid: Select events from specific user IDs.</li> <li>pid: Select events from specific process IDs.</li> </ul> <p>The following numerical fields only support the operators '=' and '!=':</p> <ul> <li>mntns: Select events from specific mount namespace IDs.</li> <li>pidns: Select events from specific process namespace IDs.</li> <li>tree: Select events that descend from specific process IDs.</li> </ul> <p>NOTE: Expressions containing '&lt;' or '&gt;' tokens must be escaped!</p>"},{"location":"docs/policies/scopes/#string-expression-operators","title":"STRING EXPRESSION OPERATORS","text":"<p>'=', '!='</p> <p>Available for the following string fields:</p> <ul> <li>uts: Select events based on UTS (Unix Timesharing System) names.</li> <li>comm: Select events based on process command names.</li> <li>container: Select events from specific container IDs.</li> <li>executable: Select events based on the executable path.</li> </ul>"},{"location":"docs/policies/scopes/#boolean-operator-prepended","title":"BOOLEAN OPERATOR (PREPENDED)","text":"<p>'!'</p> <p>Available for the following boolean field:</p> <ul> <li>container: Select events based on whether they originate from a container or not.</li> </ul>"},{"location":"docs/policies/scopes/#supported-scopes","title":"Supported Scopes","text":""},{"location":"docs/policies/scopes/#global","title":"global","text":"<p>Events are collected from the whole host: <pre><code>scope:\n    - global\n</code></pre></p>"},{"location":"docs/policies/scopes/#uid","title":"uid","text":"<p>Events are collected from the specific user id:</p> <pre><code>scope:\n    - uid=0\n</code></pre>"},{"location":"docs/policies/scopes/#pid","title":"pid","text":"<p>Events are collected from the specific pid:</p> <pre><code>scope:\n    - pid=1000\n</code></pre>"},{"location":"docs/policies/scopes/#mntns","title":"mntns","text":"<p>Events are collected from the mount namespace:</p> <pre><code>scope:\n    - mntns=4026531840\n</code></pre>"},{"location":"docs/policies/scopes/#pidns","title":"pidns","text":"<p>Events are collected from the pid namespace:</p> <pre><code>scope:\n    - pidns=4026531836\n</code></pre>"},{"location":"docs/policies/scopes/#uts","title":"uts","text":"<p>Events are collected from uts namespace:</p> <pre><code>scope:\n    - uts=ab356bc4dd554\n</code></pre>"},{"location":"docs/policies/scopes/#comm","title":"comm","text":"<p>Events are collected from process named <code>uname</code>:</p> <pre><code>scope:\n    - comm=uname\n</code></pre>"},{"location":"docs/policies/scopes/#container","title":"container","text":"<p>Events are collected only from containers:</p> <pre><code>scope:\n    - container\n</code></pre>"},{"location":"docs/policies/scopes/#not-container","title":"not-container","text":"<p>Events are collected from everything but containers:</p> <pre><code>scope:\n    - not-container\n</code></pre>"},{"location":"docs/policies/scopes/#tree","title":"tree","text":"<p>Events are collected from process tree:</p> <pre><code>scope:\n    - tree=1000\n</code></pre>"},{"location":"docs/policies/scopes/#executable-exec","title":"executable, exec","text":"<p>Events are collected from executable:</p> <pre><code>scope:\n    - executable=/usr/bin/dig\n</code></pre>"},{"location":"docs/policies/scopes/#follow","title":"follow","text":"<p>Events collected follow process children:</p> <pre><code>scope:\n    - follow\n</code></pre>"},{"location":"docs/policies/usage/cli/","title":"CLI Policy Usage","text":"<p>This section details how to use the flags in the Tracee CLI.</p>"},{"location":"docs/policies/usage/cli/#applying-tracee-polcies","title":"Applying Tracee Polcies","text":"<p>A policy file can be applied in the Tracee command using the <code>--policy</code> flag and providing a path to the location of the policy file.</p> <pre><code>tracee --policy ./policy.yml\n</code></pre>"},{"location":"docs/policies/usage/cli/#using-multiple-policies","title":"Using multiple policies","text":"<p>To specify multiple policies, users can either specify the directory, which contains all of the policies that they would like to load into Tracee, or by specifying the policies one by one.</p> <p>Through a directory:</p> <pre><code>tracee --policy ./policy-directory\n</code></pre> <p>By specifying individual policies:</p> <pre><code>tracee --policy ./policy-one.yaml --policy ./policy-two.yaml \n</code></pre>"},{"location":"docs/policies/usage/cli/#example","title":"EXAMPLE","text":"<pre><code>tracee --config ./config.yaml --policy ./policy.yaml &amp;&amp; cat /tmp/debug.json\n</code></pre>"},{"location":"docs/policies/usage/cli/#configyaml-example","title":"config.yaml (example)","text":"<pre><code>install-path: /tmp/tracee\n\n# debugging\n\nhealthz: true\nmetrics: false\npprof: false\npyroscope: false\nlisten-addr: :3366\n\n# feature flags\n\ncontainers:\n    enrich: true\n    # cgroupfs:\n    #     path: /host/sys/fs/cgroup\n    #     force: true\n    # sockets:\n    #     - runtime: docker\n    #       socket: /var/run/docker.sock\n\nblob-perf-buffer-size: 1024\n\n# signatures\n\nsignatures-dir: \"\"\n\n# features setup\n\ncapabilities:\n    bypass: false\ncache:\n    type: mem\n    size: 512\nproctree:\n    source: both\n    cache:\n        process: 8192\n        thread: 8192\n\n# logging\n\nlog:\n    level: debug\n    file: /tmp/debug.json\n    # aggregate:\n    #     enabled: true\n    #     flush-interval: 5s\n    filters:\n        out:\n            pkg:\n                - capabilities\n# output\n\noutput:\n    options:\n        none: false\n        stack-addresses: false\n        exec-env: true\n        exec-hash: dev-inode\n        parse-arguments: true\n        parse-arguments-fds: true\n        sort-events: true\n    json:\n        files:\n            - stdout\n    forward: []\n    webhook: []\n</code></pre>"},{"location":"docs/policies/usage/cli/#policyyaml","title":"policy.yaml","text":"<pre><code>apiVersion: tracee.aquasec.com/v1beta1\nkind: Policy\nmetadata:\n  name: signatures\n  annotations:\n    description: traces all signatures\nspec:\n  scope:\n    - global\n  rules:\n    # display security events\n    - event: stdio_over_socket\n    - event: k8s_api_connection\n    - event: aslr_inspection\n    - event: proc_mem_code_injection\n    - event: docker_abuse\n    - event: scheduled_task_mod\n    - event: ld_preload\n    - event: cgroup_notify_on_release\n    - event: default_loader_mod\n    - event: sudoers_modification\n    - event: sched_debug_recon\n    - event: system_request_key_mod\n    - event: cgroup_release_agent\n    - event: rcd_modification\n    - event: core_pattern_modification\n    - event: proc_kcore_read\n    - event: proc_mem_access\n    - event: hidden_file_created\n    - event: anti_debugging\n    - event: ptrace_code_injection\n    - event: process_vm_write_inject\n    - event: disk_mount\n    - event: dynamic_code_loading\n    - event: fileless_execution\n    - event: illegitimate_shell\n    - event: kernel_module_loading\n    - event: k8s_cert_theft\n    - event: proc_fops_hooking\n    - event: syscall_hooking\n    - event: dropped_executable\n    # tracee open by cat in /tmp/* files\n    - event: openat\n      filters:\n        - comm=cat\n        - data.pathname=/tmp*\n    # trace all container creations and removals\n    - event: container_create\n    - event: container_remove\n</code></pre>"},{"location":"docs/policies/usage/kubernetes/","title":"Kubernetes Policy Usage","text":""},{"location":"docs/policies/usage/kubernetes/#custom-resource-definition","title":"Custom Resource Definition","text":"<p>Tracee policies can be seamlessly integrated into Kubernetes using Custom Resource Definitions (CRDs). When Tracee is installed, the CRD is automatically applied, including a default policy. One can interact with Tracee policies as follows:</p> <p>To view existing Tracee policies, use the following command:</p> <pre><code>kubectl get policies.tracee.aquasec.com\n</code></pre> <p>One can manage policies using standard kubectl commands. For example, to create, update, or delete a policy:</p> <p>Create: Apply a new policy using the kubectl apply command.</p> <pre><code>kubectl apply -f your-policy.yaml\n</code></pre> <p>Update: Modify an existing policy using the kubectl edit command.</p> <pre><code>kubectl edit policies.tracee.aquasec.com &lt;policy-name&gt;\n</code></pre> <p>Delete: Remove a policy using the kubectl delete command.</p> <pre><code>kubectl delete policies.tracee.aquasec.com &lt;policy-name&gt;\n</code></pre>"},{"location":"docs/policies/usage/kubernetes/#operator","title":"Operator","text":"<p>The Tracee Kubernetes Operator is a custom controller designed to manage Tracee policies as Custom Resource Definitions (CRDs) within a Kubernetes cluster. The Tracee Kubernetes Operator continually monitors changes to Tracee policies within the cluster. When a new policy is created, modified, or deleted, the operator automatically triggers a rolling restart of the Tracee DaemonSet. This ensures that Tracee is always running with the most up-to-date policies, providing enhanced security and compliance for your applications.</p>"},{"location":"docs/policies/usage/kubernetes/#video-content","title":"Video Content","text":"<p>Tracking Kubernetes activity with eBPF and Tracee Policies </p> <p></p>"},{"location":"traceectl/","title":"traceectl - Client Service for Tracee","text":"<p>traceectl is a command-line interface (CLI) tool designed as a client service for Tracee, Aqua Security's open-source runtime security solution. Tracee provides real-time, powerful observability for Linux environments by monitoring system calls, events, and more. traceectl is built to simplify interactions with Tracee, making it easier for users to manage, monitor, and gather security insights.</p>"},{"location":"traceectl/#overview","title":"Overview","text":"<p>traceectl acts as a controller for Tracee, allowing users to:</p> <ul> <li>Stream Events: Continuously stream security events from Tracee, with options to format the output as JSON, tables, or custom templates.</li> <li>List Available Events: Display the available events that Tracee can capture, providing essential insights into runtime activities.</li> <li>Query Metrics: Access various metrics related to Tracee, including event counts, errors, and more.</li> </ul>"},{"location":"traceectl/#installation-and-usage","title":"Installation and Usage","text":"<p>To get started with traceectl, go over the Installation and Usage page</p>"},{"location":"traceectl/usage/","title":"traceectl Installation and Usage Guide","text":""},{"location":"traceectl/usage/#installation","title":"Installation","text":"<p>To use traceectl, you first need to compile and install the tool. Follow these steps to get started:</p>"},{"location":"traceectl/usage/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>Begin by cloning the Tracee repository to your local machine and navigating to traceectl:</p> <pre><code>git clone https://github.com/aquasecurity/tracee.git\ncd cmd/traceectl\n</code></pre>"},{"location":"traceectl/usage/#2-build-and-install","title":"2. Build and Install","text":"<p>Compile and install traceectl using the following commands:</p> <pre><code>make\n</code></pre>"},{"location":"traceectl/usage/#configuring-tracee-for-traceectl","title":"Configuring Tracee for traceectl","text":"<p>To use traceectl effectively, you need to configure Tracee so that it can communicate with traceectl over a Unix socket. This can be done by running Tracee with the correct gRPC settings:</p>"},{"location":"traceectl/usage/#1-run-tracee-with-grpc-unix-socket","title":"1. Run Tracee with gRPC Unix Socket","text":"<p>Use the following command to start Tracee with gRPC support over a Unix socket:</p> <pre><code>tracee --grpc-listen-addr unix:/var/run/tracee.sock\n</code></pre> <p>This command sets up Tracee to listen for incoming connections from traceectl at the specified Unix socket path (<code>/var/run/tracee.sock</code>). Ensure that this socket path is accessible and not blocked by permissions or other constraints.</p>"},{"location":"traceectl/usage/#2-output-flag-configuration","title":"2. Output Flag Configuration","text":"<p>The <code>--output</code> flag in Tracee allows you to configure how data from Tracee is presented. Among the available options, you can specify <code>none</code> for minimal output, which can be useful for scenarios where bandwidth or latency considerations are critical. For example:</p> <pre><code>tracee --output none\n</code></pre>"},{"location":"traceectl/usage/#why-use-output-none","title":"Why Use <code>--output none</code>?","text":"<ul> <li>Reduced Bandwidth Usage: By suppressing output, you can minimize the data transferred over the Unix socket, which is especially helpful in environments with limited resources.</li> <li>Lower Latency: With no data formatting or transmission overhead, the interaction between traceectl and Tracee becomes faster.</li> </ul> <p>Use this mode for performance testing, silent monitoring, or when integrating traceectl with other systems that handle data processing separately.</p> <p>This command sets up Tracee to listen for incoming connections from traceectl at the specified Unix socket path (<code>/var/run/tracee.sock</code>). Ensure that this socket path is accessible and not blocked by permissions or other constraints.</p>"},{"location":"traceectl/usage/#usage","title":"Usage","text":"<p>Once traceectl is installed and Tracee is running, you can use various commands to interact with Tracee. Below are the main commands provided by traceectl:</p> <ul> <li> <p>Stream Events: traceectl stream</p> </li> <li> <p>Events management: traceectl event</p> </li> <li> <p>Retrieve Metrics: traceectl metrics</p> </li> <li> <p>Check Version: traceectl version</p> </li> </ul> <p>For more info about the traceectl command please refer to the appoint command documentation</p>"},{"location":"traceectl/usage/#flags","title":"Flags","text":"<p>For more info about the traceectl flags see:</p> <ul> <li>output</li> <li>format</li> <li>server</li> <li>policy</li> </ul>"},{"location":"traceectl/usage/#summary","title":"Summary","text":"<ul> <li>Install traceectl by cloning the repository, building, and installing it with <code>make</code>.</li> <li>Use traceectl to interact with Tracee via commands like <code>stream</code>, <code>event</code>, <code>metrics</code>, and <code>version</code>.</li> </ul>"},{"location":"traceectl/commands/event/","title":"Event Command Usage","text":"<p>The <code>event</code> command in traceectl is used for managing events within Tracee. It allows you to list, describe, enable, and disable various event types that Tracee can capture. Below is the usage guide for the <code>event</code> command and its subcommands.</p>"},{"location":"traceectl/commands/event/#usage","title":"Usage","text":"<p>The <code>event</code> command is structured as follows:</p> <pre><code>traceectl event [subcommand] [flags]\n</code></pre>"},{"location":"traceectl/commands/event/#subcommands","title":"Subcommands","text":"<ul> <li>describe: Retrieves detailed information about a specific event or all the events, including its fields, types, and other metadata.</li> </ul> <pre><code>traceectl event describe EVENT\n</code></pre> <ul> <li><code>EVENT</code>: The name of the event to describe (default is all events).</li> <li><code>--format</code>: Specifies the format (default is <code>table</code>).</li> <li><code>--server</code>: Specifies the server unix socket path (default is <code>/var/run/tracee.sock</code>)</li> <li> <p><code>--output</code>: Specifies the output (default is <code>stdout</code>)</p> </li> <li> <p>enable: Enables capturing of a specific event type in Tracee.</p> </li> </ul> <pre><code>traceectl event enable &lt;event_name&gt;\n</code></pre> <ul> <li><code>EVENT</code>: The name of the event to enable.</li> <li><code>--server</code>: Specifies the server unix socket path (default is <code>/var/run/tracee.sock</code>)</li> <li> <p><code>--output</code>: Specifies the output (default is <code>stdout</code>)</p> </li> <li> <p>disable: Disables capturing of a specific event type in Tracee.</p> </li> </ul> <pre><code>traceectl event disable &lt;event_name&gt;\n</code></pre> <ul> <li><code>EVENT</code>: The name of the event to disable.</li> <li><code>--server</code>: Specifies the server unix socket path (default is <code>/var/run/tracee.sock</code>)</li> <li><code>--output</code>: Specifies the output (default is <code>stdout</code>)</li> </ul>"},{"location":"traceectl/commands/event/#examples","title":"Examples","text":"<ul> <li>List All Events in JSON Format</li> </ul> <pre><code>traceectl event describe --format json\n</code></pre> <ul> <li>Describe an Event</li> </ul> <pre><code>traceectl event describe execve\n</code></pre> <ul> <li>Enable an Event</li> </ul> <pre><code>traceectl event enable execve\n</code></pre> <ul> <li>Disable an Event</li> </ul> <pre><code>traceectl event disable execve\n</code></pre>"},{"location":"traceectl/commands/event/#summary","title":"Summary","text":"<p>The <code>event</code> command in traceectl is a powerful tool for managing Tracee's event capabilities. Use the, <code>describe</code>, <code>enable</code>, and <code>disable</code> subcommands to gain detailed insight and control over the events Tracee monitors.</p>"},{"location":"traceectl/commands/metrics/","title":"Metrics Command Usage","text":"<p>The <code>metrics</code> command in traceectl provides information about Tracee's performance and resource usage metrics. This command is helpful for monitoring how Tracee is functioning in real-time.</p>"},{"location":"traceectl/commands/metrics/#usage","title":"Usage","text":"<p>The <code>metrics</code> command is structured as follows:</p> <pre><code>traceectl metrics \n</code></pre> <ul> <li><code>--server</code>: Specifies the server unix socket path (default is <code>/var/run/tracee.sock</code>)</li> </ul>"},{"location":"traceectl/commands/metrics/#examples","title":"Examples","text":"<ul> <li>Display Metrics in Table Format</li> </ul> <pre><code>traceectl metrics \n</code></pre>"},{"location":"traceectl/commands/metrics/#summary","title":"Summary","text":"<p>The <code>metrics</code> command displays tracee's performance and resource usage metrics. Use this command to monitor Tracee's operational status.</p>"},{"location":"traceectl/commands/stream/","title":"Stream Command Usage","text":"<p>The <code>stream</code> command in traceectl allows users to stream events directly from Tracee in real time. This command provides flexible output formats for better integration and readability.</p>"},{"location":"traceectl/commands/stream/#usage","title":"Usage","text":"<p>The <code>stream</code> command is structured as follows:</p> <pre><code>traceectl stream [flags] [policies]...\n</code></pre> <ul> <li><code>[policies]</code>: List of policies to stream (default is all policies)</li> <li><code>--format</code>: Specifies the format (default is <code>table</code>).</li> <li><code>--server</code>: Specifies the server unix socket path (default is <code>/var/run/tracee.sock</code>)</li> <li><code>--output</code>: Specifies the output (default is <code>stdout</code>)</li> </ul>"},{"location":"traceectl/commands/stream/#examples","title":"Examples","text":"<ul> <li>Stream Events in JSON Format with a specified policies and a different unix socket</li> </ul> <pre><code>traceectl stream --format json --server /tmp/tracee.sock policy1 policy2\n</code></pre> <ul> <li>Stream Events to file</li> </ul> <pre><code>traceectl stream --output /path/to/file \n</code></pre> <ul> <li>Stream Events in JSON Format</li> </ul> <pre><code>traceectl stream --format json\n</code></pre> <ul> <li>Stream Events in Table Format</li> </ul> <pre><code>traceectl stream --format table\n</code></pre>"},{"location":"traceectl/commands/stream/#summary","title":"Summary","text":"<p>The <code>stream</code> command provides a real-time feed of Tracee events, allowing you to monitor system activity as it happens.</p>"},{"location":"traceectl/commands/version/","title":"Version Command","text":"<p>The <code>version</code> command in traceectl provides detailed information about the current version of the tool. This includes the version number, build date, and other relevant metadata.</p>"},{"location":"traceectl/commands/version/#usage","title":"Usage","text":"<p>To display the version information, use the following command:</p> <pre><code>traceectl version\n</code></pre> <ul> <li><code>--server</code>: Specifies the server unix socket path (default is <code>/var/run/tracee.sock</code>)</li> </ul> <p>This command will output details such as:</p> <ul> <li>Version Number: The current version of traceectl.</li> <li>Commit Hash: The Git commit hash associated with the current build (if applicable).</li> </ul>"},{"location":"traceectl/commands/version/#example-output","title":"Example Output","text":"<pre><code>v0.22.0\n</code></pre>"},{"location":"traceectl/commands/version/#summary","title":"Summary","text":"<ul> <li><code>traceectl version</code>: Displays detailed version information.</li> </ul> <p>Use this command to verify your version or to gather information for troubleshooting purposes.</p>"},{"location":"traceectl/flags/format/","title":"<code>format</code> Flag","text":"<p>The <code>--format</code> flag in traceectl is used to specify the output format for certain commands. Currently, this flag supports the following values for the <code>stream</code> and <code>event describe</code> commands:</p> <ul> <li><code>json</code>: Outputs the data in JSON format, which is useful for automated processing or integration with other tools that consume JSON.</li> </ul> <p>Example:</p> <pre><code>traceectl stream --format json\n</code></pre> <p>In this example, the command lists all available events and outputs them in JSON format.</p> <ul> <li><code>table</code>: Outputs the data in a tabular format, which is easier to read for users viewing the output directly in the terminal.</li> </ul> <p>Example:</p> <pre><code>traceectl stream --format table\n</code></pre> <p>In this example, the command streams events from Tracee and displays them in a table format, making it more human-readable.</p> <p>The <code>--format</code> flag is helpful for customizing the output to meet different requirements, whether for readability or integration with other tools.</p>"},{"location":"traceectl/flags/format/#default-format","title":"Default Format","text":"<p>The default format for the <code>--format</code> flag is table. If no format is specified, the output will be displayed in a tabular format, which is more human-readable for most users.</p>"},{"location":"traceectl/flags/output/","title":"<code>output</code> Flag","text":"<p>The <code>--output</code> flag is used to specify the destination for the command's output. This flag can be set to stdout or a file location.</p> <ul> <li>stdout: This is the default output destination, which means that the command's output will be displayed on the terminal. This is convenient for users who want to see immediate results directly in their console.</li> </ul> <p>Example:</p> <pre><code>traceectl stream --output stdout\n</code></pre> <p>In this example, the command outputs the streamed events to the terminal.</p> <ul> <li>File Output: You can use the <code>--output</code> flag to direct the output to a specific file. This is useful if you want to save the output for later analysis or for documentation purposes.</li> </ul> <p>Example:</p> <pre><code>traceectl stream --output file:/path/to/output.txt\n</code></pre> <p>In this example, the command saves the streamed events to the file located at <code>/path/to/output.txt</code>. This is especially helpful for logging purposes or when working with large amounts of data that need to be stored for further processing.</p>"},{"location":"traceectl/flags/policy/","title":"<code>policy</code> Flag","text":"<p>The <code>--policy</code> flag is used to specify the polices to include for the command's stream events. If this flag is set it must have a valid policy name loaded into tracee.</p> <ul> <li>\"\": This is the default policy, which means that the command's streamed events will display on the terminal all events capture by tracee. This is convenient for users who want to see immediate results directly in their console.</li> </ul> <p>Example:</p> <pre><code>traceectl stream --policy policy1\n</code></pre> <p>In this example, the command outputs the streamed events from a specific policy to the terminal.</p> <ul> <li>Multi Policy: You can use the <code>--policy</code> flag to specify multiple policies to include for the command's stream events. This is useful if you want to make batter analysis for different needs</li> </ul> <p>Example:</p> <pre><code>traceectl stream --policy policy1 policy2\n</code></pre> <p>In this example, the command outputs the streamed events from a specific policies to the terminal. This is especially helpful for logging purposes or when working with large amounts of data that need to be sorted for further processing.</p>"},{"location":"traceectl/flags/server/","title":"<code>server</code> Flag","text":"<p>The <code>--server</code> flag in traceectl is used to specify the connection type that traceectl should use to communicate with the Tracee server. This connection type is Unix socket only.</p> <ul> <li>Unix Socket: This type of connection is generally used for local inter-process communication. It provides a secure and efficient means to connect to Tracee when both client and server are on the same machine.</li> </ul> <p>Example:</p> <pre><code>traceectl --server /unix/socket/path.sock\n</code></pre> <p>In this example, <code>/unix/socket/path.sock</code> is the Unix socket path where the Tracee server is listening. Using Unix sockets is beneficial for security and performance since it avoids the overhead associated with network communication.</p>"},{"location":"tutorials/additional-resources/","title":"Additional Resources","text":"<p>This page links to external resources, created by Aqua Security and the community. If you create content on Tracee, we would highly appreciate if you would contribute the link to this page.</p>"},{"location":"tutorials/additional-resources/#blog-post","title":"Blog Post","text":"<ul> <li>The Story of Tracee: The Path to Runtime Security Tool</li> <li>Detecting eBPF Malware with Tracee</li> </ul>"},{"location":"tutorials/additional-resources/#useful-videos","title":"Useful Videos","text":"<ul> <li>Tracee Livestream: Everything is an Event in Tracee</li> <li>Tracee Video Series on the Aqua Open Source YouTube channel</li> </ul> <p>Have a look at the recordings on the Aqua Open Source YouTube channel.</p>"},{"location":"tutorials/additional-resources/#conference-recording","title":"Conference recording","text":"<ul> <li>eBPF Warfare - Detecting Kernel &amp; eBPF Rootkits with Tracee</li> <li>Verifiable GitHub Actions with eBPF - Jose Donizetti, Aqua </li> <li>Tracee Features and Internals: High Throughput of eBPF Events for Execution Patterns Detections</li> <li>BlackHat Arsenal 2022: Detecting Linux kernel rootkits with Aqua Tracee</li> <li>Tracee presentation at BlackHat USA 2021</li> </ul>"},{"location":"tutorials/deploy-grafana-dashboard/","title":"Access Tracee Metrics in Prometheus and Grafana","text":"<p>Tracee exposes a metrics endpoint.  This makes it possible to monitor Tracee like other cloud native workloads.</p> <p>In this tutorial, we will showcase how to access Tracee metrics through Prometheus and Grafana running through docker containers. The tutorial can easily adapted to Kubernetes workloads with the configuration provided.</p>"},{"location":"tutorials/deploy-grafana-dashboard/#tutorial-overview","title":"Tutorial Overview","text":"<p>Grafana is a visualization tools for exported metrics and logs, most commonly used alongside Prometheus.</p> <p>Since version 0.7.0, tracee exports useful runtime metrics to Prometheus.</p> <p>By using Grafana and the new metrics from tracee, we can deploy a simple dashboard which tracks the tracee instance performance and outputs.</p> <p>There are two options for accessing Tracee metrics:</p> <ul> <li>Running the Tracee Docker Container Image -- Shown in this tutorial</li> <li>Running the Tracee Helm Chart -- Detailed as part of the Promtail-Tracee tutorial</li> </ul> <p></p>"},{"location":"tutorials/deploy-grafana-dashboard/#tracee-docker-container-image","title":"Tracee Docker Container Image","text":"<p>These metrics exports are enabled by default in all docker images and can be enabled using the <code>--metrics</code> flag.</p>"},{"location":"tutorials/deploy-grafana-dashboard/#prerequisites","title":"Prerequisites","text":"<p>The following tools must be available for use, they can all be installed either through docker or installed/built on your machine. Note that you need to be on a Linux machine to follow the Docker tutorial. Alternative, on a MacBook it is possible to use Vagrant with Parallels as detailed in the following tutorial: Running Tracee on Mac with Parallels and Vagrant</p> <ul> <li>Tracee</li> <li>Prometheus</li> <li>Grafana</li> </ul>"},{"location":"tutorials/deploy-grafana-dashboard/#run-tracee-with-metrics-enabled-the-docker-command","title":"Run Tracee with Metrics Enabled -- The Docker Command","text":"<p>Tracee can be most easily deployed with metrics enabled by default and port forwarded through the following commands:</p> <pre><code>docker run --name tracee -it --rm \\\n  --pid=host --cgroupns=host --privileged \\\n  -v /etc/os-release:/etc/os-release-host:ro \\\n  -v /var/run:/var/run:ro \\\n  -p 3366:3366 \\\n  aquasec/tracee:latest \\\n  --metrics \n</code></pre> <p>Of course, the forwarded metrics ports can be changed, but you should note that some of the later instructions depend on these ports.</p> <p>If running Tracee locally through built binaries, the metrics address may be overrides with the <code>--listen-addr</code> flag.</p>"},{"location":"tutorials/deploy-grafana-dashboard/#run-prometheus-and-configure-it-to-scrape-tracee","title":"Run Prometheus and Configure it to Scrape Tracee","text":"<p>Install Prometheus or pull it's Docker image. Then create the following configuration file, call it <code>prometheus.yml</code> to scrape Tracee:</p> <pre><code># A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Tracee.\nscrape_configs:\n  # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.\n  - job_name: 'tracee'\n\n    # Override the global default and scrape targets from this job every 5 seconds.\n    scrape_interval: 5s\n    metrics_path: /metrics\n\n    #Scrape tracee's default metrics hosts.\n    #If forwarding different ports make sure to change these addresses.\n    static_configs:\n      - targets: ['localhost:3366']\n</code></pre> <p>Note that the localhost:3366 might have to be replaced with your IP address. The IP address can be found with the following command: <pre><code>/sbin/ifconfig\n</code></pre></p> <p>We can then start Prometheus with the following command:</p> <pre><code>prometheus --config.file=/path/to/prometheus.yml\n</code></pre> <p>Or alternatively with docker:</p> <pre><code>docker run \\\n    -p 9090:9090 \\\n    -v ./prometheus.yml:/etc/prometheus/prometheus.yml \\\n    prom/prometheus\n</code></pre> <p>Ensure that prometheus can scrape the Tracee target: Open the Prometheus UI at <code>http://localhost:9090</code> Under Status &lt; Targets will be the scrape targets listed.</p> <p>If successful, move to the next step, otherwise consult with the Prometheus documentation.</p>"},{"location":"tutorials/deploy-grafana-dashboard/#run-grafana-to-display-tracees-prometheus-metrics","title":"Run Grafana to display Tracee's Prometheus Metrics","text":"<p>After successfully deploying Tracee and Prometheus we may now run Grafana to visualize it's metrics.</p> <p>Install Grafana using the Grafana container image:</p> <pre><code>docker run -d -p 3000:3000 --name=grafana grafana/grafana-enterprise\n</code></pre> <p>Next, you should be able to access the Grafana UI throug: <code>http://localhost:3000</code>.</p> <p>After entering the website, logging in with username and password <code>admin</code> (and changing your password if you wish), you should see the homepage:</p> <p></p> <p>Add your data source by hovering the configuration tab (the gear icon), selecting \"Data Sources\" and pressing \"Add Data Source\" at the top left. Create a Prometheus Data Source and point it's URL to the relevant location (usually http://localhost:9090)</p> <p>Note that you might have to use your local IP address again instead of <code>localhost</code>.</p> <p>You may now either create your own Dashboard or import our default dashboard.</p>"},{"location":"tutorials/deploy-grafana-dashboard/#import-tracees-default-dashboard","title":"Import Tracee's Default Dashboard","text":"<p>First download our Grafana Dashboard's json here.</p> <p>After adding the data source hover on the plus icon in the sidebar and select \"Import\". Press \"Upload JSON File\" at the top of the page and select the downloaded json from your file browser. Change the name and Dashboard UID if you wish and press \"Import\" to finish. </p> <p>Finally you will be redirected to the dashboard \ud83e\udd73</p>"},{"location":"tutorials/k8s-policies/","title":"Working with Tracee Policies on Kubernetes","text":""},{"location":"tutorials/k8s-policies/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure that you have the following:</p> <ul> <li>A Kubernetes cluster up and running</li> <li>kubectl command-line tool installed and configured to work with your cluster</li> <li>Helm v3 or later installed on your local machine</li> </ul>"},{"location":"tutorials/k8s-policies/#install-tracee-via-helm","title":"Install Tracee via Helm","text":"<p>To install Tracee using Helm, follow these steps:</p> <p>Add the Aqua Security Helm repository:</p> <pre><code>helm repo add aqua https://aquasecurity.github.io/helm-charts/\n</code></pre> <p>Install Tracee with the default settings:</p> <pre><code>helm install tracee aqua/tracee \\\n    --namespace tracee-system --create-namespace \\\n    --set hostPID=true\n</code></pre> <p>This command installs Tracee in the tracee-system namespace, enabling the use of the host's PID namespace.</p>"},{"location":"tutorials/k8s-policies/#add-a-new-tracee-policy","title":"Add a new Tracee policy","text":"<p>By default, Tracee comes with a policy for signature events. In this step, you will learn how to add a new policy to suit your requirements.</p> <p>The <code>tracee-policies</code> configmap should have all policies Tracee will load when booting. Let's take a look at the default policy:</p> <pre><code>kubectl get configmap -n tracee-system\n\nNAME               DATA   AGE\ntracee-config      1      58m\ntracee-policies    2      58m\n</code></pre> <p>Let's take a look at the default policy:</p> <p><pre><code>kubectl describe configmap/tracee-policies -ntracee-system\n</code></pre> <pre><code>Name:         tracee-policies\nNamespace:    tracee-system\nData\n====\nsignatures.yaml:\n----\napiVersion: tracee.aquasec.com/v1beta1\nkind: Policy\nmetadata:\n    name: signature-events\n    annotations:\n        description: traces all signature events\nspec:\n    scope:\n      - global\n    rules:\n      - event: stdio_over_socket\n      - event: k8s_api_connection\n      - event: aslr_inspection\n      - event: proc_mem_code_injection\n      - event: docker_abuse\n      - event: scheduled_task_mod\n      - event: ld_preload\n      - event: cgroup_notify_on_release\n      - event: default_loader_mod\n      - event: sudoers_modification\n      - event: sched_debug_recon\n      - event: system_request_key_mod\n      - event: cgroup_release_agent\n      - event: rcd_modification\n      - event: core_pattern_modification\n      - event: proc_kcore_read\n      - event: proc_mem_access\n      - event: hidden_file_created\n      - event: anti_debugging\n      - event: ptrace_code_injection\n      - event: process_vm_write_inject\n      - event: disk_mount\n      - event: dynamic_code_loading\n      - event: fileless_execution\n      - event: illegitimate_shell\n      - event: kernel_module_loading\n      - event: k8s_cert_theft\n      - event: proc_fops_hooking\n      - event: syscall_hooking\n      - event: dropped_executable\n</code></pre></p> <p>But let's suppose we also need Tracee to trace all <code>execve</code> events. For this, we need to change the configmap <code>tracee-policies</code> by adding a new policy.</p> <p>Let's edit the tracee-policies ConfigMap using kubectl:</p> <pre><code>kubectl edit cm/tracee-policies -n tracee-system\n</code></pre> <p>The ConfigMap will open in your default text editor. Locate the data section.</p> <p>To add a new policy for tracking execve events, add the following YAML block before the signatures.yaml section, maintaining proper indentation:</p> <p><pre><code>data:\n  events.yaml: |-\n    apiVersion: tracee.aquasec.com/v1beta1\n    kind: Policy\n    metadata:\n        name: execve-event\n        annotations:\n          description: traces all execve events\n    spec:\n        scope:\n          - global\n        rules:\n          - event: execve\n  signatures.yaml: |-\n  ...\n</code></pre> Save and close the file. The changes will be applied to the configmap.</p> <p>Note</p> <p>If you are having a problem editing the configmap, you can apply it directly with: <pre><code>kubectl apply -f https://gist.githubusercontent.com/josedonizetti/3df19a61d39840441ea5be448d6c9354/raw/c50b9b66d7996bb27b6fac301d24d6390e356f8c/tracee-policies-configmap.yaml\n</code></pre></p> <p>Step 3: Restart Tracee Daemonset After modifying the Tracee policies, you need to restart the Tracee daemonset for the changes to take effect.</p> <p>Restart the Tracee daemonset using the following command:</p> <pre><code>kubectl rollout restart ds/tracee -n tracee-system\n</code></pre> <p>Wait for the daemonset to restart and stabilize. You can monitor the progress using the following command:</p> <pre><code>kubectl rollout status ds/tracee -n tracee-system\n</code></pre> <p>Then check for <code>execve</code> events:</p> <pre><code>kubectl logs -f ds/tracee -n tracee-system | grep execve\n</code></pre> <pre><code>{\"timestamp\":1684688250477166817,\"threadStartTime\":1684688250477064221,\"processorId\":7,\"processId\":35694,\"cgroupId\":1386180,\"threadId\":35694,\"parentProcessId\":1033,\"hostProcessId\":3242201,\"hostThreadId\":3242201,\"hostParentProcessId\":3205483,\"userId\":0,\"mountNamespace\":4026532829,\"pidNamespace\":4026532833,\"processName\":\"cri-dockerd\",\"hostName\":\"minikube\",\"container\":{},\"kubernetes\":{},\"eventId\":\"59\",\"eventName\":\"execve\",\"matchedPolicies\":[\"execve_event\"],\"argsNum\":2,\"returnValue\":0,\"syscall\":\"execve\",\"stackAddresses\":null,\"contextFlags\":{\"containerStarted\":false,\"isCompat\":false},\"args\":[{\"name\":\"pathname\",\"type\":\"const char*\",\"value\":\"/opt/cni/bin/bridge\"},{\"name\":\"argv\",\"type\":\"const char*const*\",\"value\":[\"/opt/cni/bin/bridge\"]},{\"name\":\"envp\",\"type\":\"const char*const*\",\"value\":null}]}\n</code></pre> <p>Once the daemonset is up and running, the modified policies will be applied.</p> <p>Congratulations! You have successfully installed Tracee via Helm, modified the default policies to add an <code>execve</code> event policy.</p> <p>Note: Modifying the policies may have security implications, so it is important to carefully consider the events you enable based on your specific requirements and security considerations.</p> <p>Feel free to reach out if you have any further questions or need additional assistance!</p>"},{"location":"tutorials/overview/","title":"Tutorials","text":"<p>In this section you can find step-by-step guides that help you accomplish specific tasks.</p> <p>\ud83d\udc48 Please use the side-navigation on the left in order to browse the different topics.</p> <p>If there are any specific tutorials that you would like to see please let us know on the Aqua Open Source Slack.</p>"},{"location":"tutorials/promtail/","title":"Using Promtail, Loki and Grafana to access Tracee Logs","text":"<p>By default, Tracee is emitting events to stdout. Users can then configure logging solutions to collect, store, and manage Tracee logs. </p> <p>This tutorial will showcase how to install and configure Promtail, Loki, Grafana and Prometheus to then access Tracee logs from the cluster in Grafana.</p> <p>If you prefer the video tutorial, check out the tutorial below on the Aqua Open Source YouTube channel:</p> <p>Grafana Loki to access Tracee logs    </p>"},{"location":"tutorials/promtail/#prerequisites","title":"Prerequisites","text":"<p>Please make sure to have the following tools installed in your CLI:</p> <ul> <li>Kubectl installed and connected to a Kubernetes cluster (any cluster will work for this purpose)</li> <li>The Helm CLI installed</li> </ul> <p>Additionally, you might have the following Obserability Stack already installed in your cluster, if not we will detailed how to set it up further below in this guide: </p> <ul> <li>Prometheus</li> <li>Loki and Promtail</li> <li>Grafana</li> </ul> <p>Alternatively, this tutorial showcases after the Tracee Installation section how to get an observability stack running with the above tools.</p>"},{"location":"tutorials/promtail/#installing-the-tracee-helm-chart-and-accessing-logs","title":"Installing the Tracee Helm Chart and accessing logs","text":"<p>Right now, we cannot access any logs from our cluster since we do not have any application that actively produces logs. Thus, we will install Tracee inside our cluster through the Tracee Helm Chart.</p> <p>Add the Tracee Helm Chart:</p> <pre><code>helm repo add aqua https://aquasecurity.github.io/helm-charts/\n</code></pre> <p>Update the repository list on Helm:</p> <pre><code>helm repo update\n</code></pre> <p>Install the Tracee Helm Chart inside your Kubernetes cluster:</p> <pre><code>helm install tracee aqua/tracee \\\n        --namespace tracee-system --create-namespace \\\n        --set hostPID=true\n</code></pre> <p>Now, ensure that Tracee is running inside the <code>tracee-system</code> namespace:</p> <pre><code>kubectl get all -n tracee-system\n</code></pre> <p>Similar to Promtail, also for Tracee one pod should run on each node of the Kubernetes cluster.</p>"},{"location":"tutorials/promtail/#accessing-tracee-logs","title":"Accessing Tracee Logs","text":"<p>Generally, it is possible to access logs from the Tracee pods directly through kubectl:</p> <pre><code>kubectl logs -f daemonset/tracee -n tracee-system\n</code></pre> <p>Next, open the Grafana Dashboard, on the left, go to \"Explore\". There, you should be able to select Loki as a Datasource.</p> <p>Now, you can write log queries in LogQL to access the logs that are stored in the Tracee pods:</p> <p></p>"},{"location":"tutorials/promtail/#installation-of-observability-tools","title":"Installation of Observability Tools","text":"<p>We need to install an observability stack to access the logs of the pods inside our cluster. This will consist of: - Grafana (for Dashboards and querying logs) - Promtail for collecting logs from the pods on each node - Loki, which is feeding the logs inot Grafana</p> <p>And since it is easier to install Grafana together with Prometheus, we are also going to install Prometheus.</p> <p>If you are completely new to Loki, have a look at the following presentation:  Learning the tricks of Grafana Loki for distributed logging at scale in a Kubernetes environment </p>"},{"location":"tutorials/promtail/#grafana-and-prometheus","title":"Grafana and Prometheus","text":"<p>First, we are going to install the kube-prometheus-stack chart with Prometheus and Grafana.</p> <p>For this, we will need to specify some custom values that we will pass into the Helm Chart. </p> <p>Create a new file called <code>grafana-config.yaml</code> with the following content:</p> <pre><code>prometheus:\n  prometheusSpec:\n    serviceMonitorSelectorNilUsesHelmValues: false\n    serviceMonitorSelector: {}\n    serviceMonitorNamespaceSelector: {}\n\ngrafana:\n  sidecar:\n    datasources:\n      defaultDatasourceEnabled: true\n  additionalDataSources:\n    - name: Loki\n      type: loki\n      url: http://loki-loki-distributed-query-frontend.monitoring:3100\n</code></pre> <p>Next, we can install the kube-prometheus-stack chart into our cluster with the following commands:</p> <p>Create a namespace for all the monitoring tools</p> <pre><code>kubectl create ns monitoring\n</code></pre> <p>Add the kube-prometheus-stack Helm Chart to your Helm repository list:</p> <pre><code>helm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n</code></pre> <p>Ensure you have the latest version of all your repositories:</p> <pre><code>helm repo update\n</code></pre> <p>Install the kube-prometheus-stack Helm Chart:</p> <pre><code>helm upgrade --install prom prometheus-community/kube-prometheus-stack -n monitoring --values grafana-config.yaml\n</code></pre> <p>Lastly, confirm that all the pods have been created properly by querying the namespace:</p> <pre><code>kubectl get all -n monitoring\n</code></pre>"},{"location":"tutorials/promtail/#promtail-and-loki","title":"Promtail and Loki","text":"<p>Next, we need to install Promtail and Loki inside the cluster to actually access logs.</p> <p>For this, first add the Grafana Helm Chart repository to you repository list:</p> <pre><code>helm repo add grafana https://grafana.github.io/helm-charts\n</code></pre> <p>Update your Helm repository list:</p> <pre><code>helm repo update\n</code></pre> <p>Next, create a file with the Helm Chart configuration for Prometail in a promtail-config.yaml:</p> <pre><code>config:\n  serverPort: 8080\n  clients:\n    - url: http://loki-loki-distributed-gateway/loki/api/v1/push\n</code></pre> <p>Now we can install the Promtail Helm Chart inside our cluster:</p> <pre><code>helm upgrade --install promtail grafana/promtail --values promtail-config.yaml -n monitoring\n</code></pre> <p>Make sure that Promtail is running the same number of pods as there are nodes on the cluster since Promtail has to run one pod per node:</p> <pre><code>k get pods -n monitoring\n</code></pre> <p>For instance, if the cluster consists of three nodes, then there should be three Promtails pods inside of the monitoring namespace.</p> <p>Now, we can install Loki. Loki's job is to collect the logs from Promtail and forward them to Grafana.</p> <pre><code>helm upgrade --install loki grafana/loki-distributed -n monitoring\n</code></pre> <p>Loki will install a variety of components inside your cluster, so don't be alarmed by the number of pods it is starting, namely:</p> <pre><code>loki-loki-distributed-distributor-5db986bb4f-x444n\nloki-loki-distributed-query-frontend-bd6845f89-z6nx6\nloki-loki-distributed-gateway-79d4d4ff5d-sxx58\nloki-loki-distributed-querier-0\nloki-loki-distributed-ingester-0    \n</code></pre> <p>At this point, the following pods should be running inside the Kubernetes cluster:</p> <pre><code>NAME                                                     READY   STATUS    RESTARTS      AGE\nprom-prometheus-node-exporter-l4cm4                      1/1     Running   0             22m\nprom-kube-prometheus-stack-operator-84cf966ff5-96xdp     1/1     Running   0             22m\nprom-kube-state-metrics-dc769cd87-fmrsk                  1/1     Running   0             22m\nprom-grafana-6fdb45b4d5-2zxw7                            3/3     Running   0             22m\nalertmanager-prom-kube-prometheus-stack-alertmanager-0   2/2     Running   1 (22m ago)   22m\nprometheus-prom-kube-prometheus-stack-prometheus-0       2/2     Running   0             22m\npromtail-sxfl5                                           1/1     Running   0             4m7s\nloki-loki-distributed-gateway-79d4d4ff5d-sxx58           1/1     Running   0             72s\nloki-loki-distributed-distributor-5db986bb4f-x444n       1/1     Running   0             72s\nloki-loki-distributed-query-frontend-bd6845f89-z6nx6     1/1     Running   0             72s\nloki-loki-distributed-querier-0                          1/1     Running   0             72s\nloki-loki-distributed-ingester-0                         1/1     Running   0             72s\n</code></pre> <p>Since everything is running properly, we need to ensure that we can access Loki as a data source inside of Grafana.</p> <p>For this, port-forward to Grafana:</p> <pre><code>kubectl port-forward service/prom-grafana -n monitoring 3000:80\n</code></pre> <p>and open the Grafana UI on localhost:3000.</p> <p>Here, you will need the username and the password: username: admin password: prom-operator</p> <p>The password name is dependent on how you called the Helm Chart installation of the kube-prometheus-stack chart e.g. in our case, it was \"prom\".</p> <p>Now navigate on Grafana to: Explore  Here select Loki as a data source.</p>"},{"location":"tutorials/tracee-vagrant/","title":"Using the Tracee container image on MacOS with Parallels and Vagrant","text":"<p>There are a few more steps involved in running Tracee through a container image on arm64 (M1).</p> <p>Prerequisites:</p> <ul> <li>Vagrant CLI installed</li> <li>Parallels Pro installed</li> </ul> <p>First, clone the Tracee Git repository and move into the root directory:</p> <pre><code>git clone git@github.com:aquasecurity/tracee.git\n\ncd tracee\n</code></pre> <p>Next, use Vagrant to start a Parallels VM:</p> <pre><code>vagrant up\n</code></pre> <p>This will use the Vagrantfile in the root of the Tracee directory.</p> <p>Lastly, ssh into the created VM:</p> <pre><code>vagrant ssh\n</code></pre> <p>Now, it is possible to run the Tracee Container image:</p> <pre><code>docker run --name tracee -it --rm \\\n  --pid=host --cgroupns=host --privileged \\\n  -v /etc/os-release:/etc/os-release-host:ro \\\n  -v /var/run:/var/run:ro \\\n  aquasec/tracee:latest\n</code></pre> <p>To learn how to install Tracee in a production environment, check out the Kubernetes guide.</p>"},{"location":"tutorials/verify-tracee-signature/","title":"Cosign: verify tracee signature","text":""},{"location":"tutorials/verify-tracee-signature/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure that you have the following installed:</p> <ul> <li>cosign</li> </ul>"},{"location":"tutorials/verify-tracee-signature/#verify-tracee-signature","title":"Verify tracee signature","text":"<p>Tracee images are signed with cosign keyless. To verify the signature we can run the command:</p> <pre><code>cosign verify aquasec/tracee:tag-name  --certificate-oidc-issuer https://token.actions.githubusercontent.com --certificate-identity-regexp https://github.com/aquasecurity/tracee | jq\n</code></pre> <p>Note that all of the tag-names can be found on the Tracee Docker Hub Registry.</p> <p>The output should look similar to the following: </p>"}]}