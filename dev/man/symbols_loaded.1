.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-SYMBOLS\-LOADED" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]symbols_loaded\f[R] \- shared object with watched symbols loaded
.SS DESCRIPTION
Triggered when a shared object that exports watched symbols is loaded
into the current process.
This derived event helps identify shared object usage patterns and
detect when shared objects attempt to override symbols from other
libraries, which can indicate potential security threats or library
hijacking attempts.
.PP
The event uses data filtering to configure which symbols to watch and
which library paths to monitor, providing flexible control over symbol
monitoring.
.PP
This event is useful for:
.IP \[bu] 2
\f[B]Library hijacking detection\f[R]: Identify attempts to override
legitimate library symbols
.IP \[bu] 2
\f[B]Shared object monitoring\f[R]: Track loading of specific libraries
and symbols
.IP \[bu] 2
\f[B]Security analysis\f[R]: Detect malicious library injection or
symbol manipulation
.SS EVENT SETS
\f[B]derived\f[R], \f[B]fs\f[R], \f[B]security_alert\f[R]
.SS DATA FIELDS
.TP
\f[B]library_path\f[R] (\f[I]string\f[R])
The path of the shared object file that was loaded
.TP
\f[B]symbols\f[R] (\f[I]array\f[R])
The watched symbols exported by the shared object (subject to TOCTOU)
.TP
\f[B]sha256\f[R] (\f[I]string\f[R])
SHA256 hash of the loaded shared object file
.SS DEPENDENCIES
\f[B]Source Events:\f[R]
.IP \[bu] 2
shared_object_loaded (required): Provides information about loaded
shared objects
.IP \[bu] 2
sched_process_exec (required): Used to maintain mount namespace cache
for filesystem access
.SS CONFIGURATION
The event supports data filtering for fine\-grained control:
.SS symbols Filter
Configure watched symbols using the \f[CR]=\f[R] operator:
.IP
.EX
tracee \-e symbols_loaded.data.symbols=fopen
.EE
.SS library_path Filter
Whitelist shared object path prefixes using the \f[CR]!=\f[R] operator:
.IP
.EX
tracee \-e symbols_loaded.data.library_path!=libc
.EE
.SS USE CASES
.IP \[bu] 2
\f[B]Library hijacking detection\f[R]: Detect attempts to override
system library functions
.IP \[bu] 2
\f[B]Security monitoring\f[R]: Monitor loading of suspicious or
unexpected shared objects
.IP \[bu] 2
\f[B]Malware analysis\f[R]: Identify malicious library injection
techniques
.IP \[bu] 2
\f[B]System integrity\f[R]: Verify that only expected libraries are
loading watched symbols
.IP \[bu] 2
\f[B]Forensic analysis\f[R]: Track library loading patterns during
investigations
.SS EXAMPLE USAGE
Detect shared objects trying to override the \f[CR]fopen\f[R] function
from non\-libc libraries:
.IP
.EX
tracee \-e symbols_loaded.data.symbols=fopen \-e symbols_loaded.data.library_path!=libc
.EE
.SS PERFORMANCE CONSIDERATIONS
The event is implemented in user\-mode and requires file system access
to examine shared objects.
This introduces some performance overhead, especially with frequent
library loading.
The implementation includes optimizations, but consider monitoring scope
in high\-throughput environments.
.SS SECURITY CONSIDERATIONS
.IP \[bu] 2
\f[B]TOCTOU vulnerability\f[R]: Shared object files could be altered
between detection and analysis
.IP \[bu] 2
\f[B]File access timing\f[R]: Until the shared object file is opened and
read, it could be modified or removed
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]shared_object_loaded\f[R]: Base event for shared object loading
detection
.IP \[bu] 2
\f[B]symbols_collision\f[R]: Detection of symbol conflicts between
libraries
.IP \[bu] 2
\f[B]security_file_open\f[R]: File access security monitoring
