.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-PROCESS\-VM\-WRITE\-INJECTION" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]process_vm_write_inject\f[R] \- detect code injection via
process_vm_writev
.SS DESCRIPTION
This event detects potential code injection attacks using the
process_vm_writev system call.
This syscall allows one process to write directly into another
process\[cq]s memory space, which while legitimate in some cases, is
also a common technique for injecting malicious code.
.PP
The event specifically monitors for cross\-process memory writes where
the source and destination process IDs differ, which could indicate an
attempt to execute arbitrary code within the context of another process.
.SS SIGNATURE METADATA
.IP \[bu] 2
\f[B]ID\f[R]: TRC\-1025
.IP \[bu] 2
\f[B]Version\f[R]: 1
.IP \[bu] 2
\f[B]Severity\f[R]: 3
.IP \[bu] 2
\f[B]Category\f[R]: defense\-evasion
.IP \[bu] 2
\f[B]Technique\f[R]: Process Injection
.IP \[bu] 2
\f[B]MITRE ID\f[R]:
attack\-pattern\[en]43e7dc91\-05b2\-474c\-b9ac\-2ed4fe101f4d
.IP \[bu] 2
\f[B]MITRE External ID\f[R]: T1055
.SS EVENT SETS
\f[B]signatures\f[R], \f[B]default\f[R]
.SS DATA FIELDS
This signature event uses fields from the underlying process_vm_writev
event:
.TP
\f[B]src_pid\f[R] (\f[I]int32\f[R])
Process ID performing the write
.TP
\f[B]dst_pid\f[R] (\f[I]int32\f[R])
Process ID being written to
.TP
\f[B]local_iov\f[R] (\f[I][]iovec\f[R])
Source memory segments
.TP
\f[B]remote_iov\f[R] (\f[I][]iovec\f[R])
Destination memory segments
.TP
\f[B]flags\f[R] (\f[I]uint32\f[R])
Operation flags
.SS DEPENDENCIES
.IP \[bu] 2
\f[CR]process_vm_writev\f[R]: Monitor cross\-process memory writes
.SS USE CASES
.IP \[bu] 2
\f[B]Code injection detection\f[R]: Identify process memory tampering
.IP \[bu] 2
\f[B]Process integrity\f[R]: Monitor unauthorized memory writes
.IP \[bu] 2
\f[B]Malware detection\f[R]: Spot injection\-based malware
.IP \[bu] 2
\f[B]Runtime protection\f[R]: Prevent unauthorized code execution
.SS INJECTION TECHNIQUES
Common injection methods:
.IP \[bu] 2
\f[B]Direct memory writes\f[R]: Using process_vm_writev
.IP \[bu] 2
\f[B]Shellcode injection\f[R]: Writing executable code
.IP \[bu] 2
\f[B]DLL injection\f[R]: Loading malicious libraries
.IP \[bu] 2
\f[B]Thread injection\f[R]: Creating remote threads
.IP \[bu] 2
\f[B]Reflective injection\f[R]: Self\-loading code
.SS ATTACK VECTORS
Common malicious uses include:
.IP \[bu] 2
\f[B]Code execution\f[R]: Running arbitrary code
.IP \[bu] 2
\f[B]Process hollowing\f[R]: Replacing process memory
.IP \[bu] 2
\f[B]DLL hijacking\f[R]: Forcing library loads
.IP \[bu] 2
\f[B]Credential theft\f[R]: Accessing process memory
.SS RISK ASSESSMENT
Risk factors to consider:
.IP \[bu] 2
\f[B]Process Context\f[R]: Runs as target process
.IP \[bu] 2
\f[B]Permission Bypass\f[R]: Inherits process privileges
.IP \[bu] 2
\f[B]Detection Evasion\f[R]: Blends with process activity
.IP \[bu] 2
\f[B]Memory Persistence\f[R]: Survives disk scans
.SS LEGITIMATE USES
Valid cross\-process writes:
.IP \[bu] 2
Debuggers
.IP \[bu] 2
Performance profilers
.IP \[bu] 2
Memory analysis tools
.IP \[bu] 2
IPC mechanisms
.SS MITIGATION
Recommended security controls:
.IP \[bu] 2
Process isolation
.IP \[bu] 2
Memory protection
.IP \[bu] 2
ASLR enforcement
.IP \[bu] 2
Integrity monitoring
.IP \[bu] 2
Behavior analysis
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]security_file_mprotect\f[R]: Memory protection changes
.IP \[bu] 2
\f[B]mem_prot_alert\f[R]: Memory protection alerts
.IP \[bu] 2
\f[B]dynamic_code_loading\f[R]: Runtime code execution
.IP \[bu] 2
\f[B]process_execute\f[R]: Process creation tracking
