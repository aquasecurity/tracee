.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-PROC\-FOPS\-HOOKING" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]proc_fops_hooking\f[R] \- detect proc filesystem file operations
hooking
.SS DESCRIPTION
This event detects malicious hooking of file operations in the proc
filesystem.
The proc filesystem is a pseudo\-filesystem that provides an interface
to kernel data structures by representing processes and system
information as files.
Attackers, particularly rootkits, can hook these file operations to
manipulate how the system interacts with process information.
.PP
By hooking proc filesystem operations, malware can hide processes,
modify system information, and interfere with system monitoring tools
like ps and top.
This type of manipulation often indicates kernel compromise and is a
common technique used by rootkits for stealth and persistence.
.SS SIGNATURE METADATA
.IP \[bu] 2
\f[B]ID\f[R]: TRC\-1020
.IP \[bu] 2
\f[B]Version\f[R]: 1
.IP \[bu] 2
\f[B]Severity\f[R]: 3
.IP \[bu] 2
\f[B]Category\f[R]: defense\-evasion
.IP \[bu] 2
\f[B]Technique\f[R]: Rootkit
.IP \[bu] 2
\f[B]MITRE ID\f[R]:
attack\-pattern\[en]0f20e3cb\-245b\-4a61\-8a91\-2d93f7cb0e9b
.IP \[bu] 2
\f[B]MITRE External ID\f[R]: T1014
.SS EVENT SETS
\f[B]signatures\f[R], \f[B]default\f[R]
.SS DATA FIELDS
This signature event uses fields from the underlying hooked_proc_fops
event:
.TP
\f[B]file_path\f[R] (\f[I]string\f[R])
Path in procfs being hooked
.TP
\f[B]fops_address\f[R] (\f[I]trace.Pointer\f[R])
Address of the hooked file operations structure
.TP
\f[B]hook_address\f[R] (\f[I]trace.Pointer\f[R])
Address of the hook function
.TP
\f[B]symbol_owner\f[R] (\f[I]string\f[R])
Module owning the hook function
.SS DEPENDENCIES
.IP \[bu] 2
\f[CR]hooked_proc_fops\f[R]: Monitor proc filesystem operation hooks
.SS USE CASES
.IP \[bu] 2
\f[B]Rootkit detection\f[R]: Identify kernel\-level malware
.IP \[bu] 2
\f[B]Process hiding\f[R]: Detect process manipulation attempts
.IP \[bu] 2
\f[B]System integrity\f[R]: Monitor kernel function hooks
.IP \[bu] 2
\f[B]Anti\-debugging\f[R]: Identify anti\-analysis techniques
.SS PROC FILESYSTEM
Critical aspects of procfs:
.IP \[bu] 2
Process information interface
.IP \[bu] 2
Kernel data structures
.IP \[bu] 2
System statistics
.IP \[bu] 2
Runtime configurations
.IP \[bu] 2
Hardware information
.SS ATTACK VECTORS
Common malicious uses include:
.IP \[bu] 2
\f[B]Process hiding\f[R]: Conceal malicious processes
.IP \[bu] 2
\f[B]System info manipulation\f[R]: Hide system activity
.IP \[bu] 2
\f[B]Anti\-forensics\f[R]: Prevent analysis
.IP \[bu] 2
\f[B]Persistence\f[R]: Maintain kernel\-level access
.SS RISK ASSESSMENT
Risk factors to consider:
.IP \[bu] 2
\f[B]Kernel Level\f[R]: Direct kernel manipulation
.IP \[bu] 2
\f[B]Stealth Capability\f[R]: Hides from tools
.IP \[bu] 2
\f[B]System Impact\f[R]: Affects all monitoring
.IP \[bu] 2
\f[B]Recovery Difficulty\f[R]: Complex remediation
.SS HOOKING TECHNIQUES
Common hooking methods:
.IP \[bu] 2
\f[B]Direct modification\f[R]: Change function pointers
.IP \[bu] 2
\f[B]Inline hooking\f[R]: Modify function code
.IP \[bu] 2
\f[B]Jump/trampoline\f[R]: Redirect execution
.IP \[bu] 2
\f[B]Table modification\f[R]: Alter operation tables
.SS MITIGATION
Recommended security controls:
.IP \[bu] 2
Kernel integrity monitoring
.IP \[bu] 2
Function pointer validation
.IP \[bu] 2
Memory protection
.IP \[bu] 2
Module signing
.IP \[bu] 2
Regular integrity checks
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]hooked_syscall\f[R]: System call table hooks
.IP \[bu] 2
\f[B]hidden_kernel_module\f[R]: Hidden module detection
.IP \[bu] 2
\f[B]symbols_loaded\f[R]: Kernel symbol loading
.IP \[bu] 2
\f[B]ftrace_hook\f[R]: Function tracing hooks
