.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-VFS\-READ" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]vfs_read\f[R] \- generic filesystem file read operation
.SS DESCRIPTION
Triggered when a read operation from a file to a buffer is performed
through the Virtual File System (VFS) layer.
This event captures file read operations at the kernel VFS level,
providing filesystem\-agnostic monitoring of read operations.
.PP
The event hooks into the inner implementation of \f[CR]read\f[R] and
other buffer read syscalls after file descriptor resolution, offering
detailed information about file access patterns and data consumption.
.PP
This event is useful for:
.IP \[bu] 2
\f[B]File access monitoring\f[R]: Track file read operations across all
filesystems
.IP \[bu] 2
\f[B]Security analysis\f[R]: Monitor sensitive file access patterns
.IP \[bu] 2
\f[B]Performance analysis\f[R]: Analyze I/O patterns and performance
characteristics
.IP \[bu] 2
\f[B]Data flow tracking\f[R]: Understand how applications consume file
data
.SS EVENT SETS
\f[B]none\f[R]
.SS DATA FIELDS
.TP
\f[B]pathname\f[R] (\f[I]string\f[R])
The path of the file being read
.TP
\f[B]dev\f[R] (\f[I]uint32\f[R])
The device identifier where the file resides
.TP
\f[B]inode\f[R] (\f[I]uint64\f[R])
The inode number of the file on the device
.TP
\f[B]count\f[R] (\f[I]uint64\f[R])
The number of bytes requested to be read
.TP
\f[B]pos\f[R] (\f[I]uint64\f[R])
The file position offset where the read operation starts
.SS DEPENDENCIES
\f[B]Kernel Probes:\f[R]
.IP \[bu] 2
vfs_read (kprobe + kretprobe, required): VFS layer read implementation
hook
.SS USE CASES
.IP \[bu] 2
\f[B]Security monitoring\f[R]: Track access to sensitive files and
configuration data
.IP \[bu] 2
\f[B]Performance analysis\f[R]: Monitor I/O patterns and identify
performance bottlenecks
.IP \[bu] 2
\f[B]Data leakage prevention\f[R]: Detect unusual file read patterns
that might indicate data exfiltration
.IP \[bu] 2
\f[B]System auditing\f[R]: Monitor file access for compliance and
forensic analysis
.IP \[bu] 2
\f[B]Application behavior analysis\f[R]: Understand how applications
consume file data
.SS IMPLEMENTATION NOTES
.IP \[bu] 2
\f[B]Filesystem agnostic\f[R]: Works across all filesystem types (ext4,
xfs, nfs, etc.)
.IP \[bu] 2
\f[B]VFS level monitoring\f[R]: Captures reads after file descriptor
resolution
.IP \[bu] 2
\f[B]Alternative methods\f[R]: Note that files can be read through other
methods like \f[CR]vfs_readv\f[R], memory mapping, and direct I/O
.SS LIMITATIONS
This event does not capture: \- Memory\-mapped file access \- Direct I/O
operations that bypass VFS \- Other read methods like
\f[CR]vfs_readv\f[R] (vectorized reads)
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]vfs_write\f[R]: Virtual filesystem write operations
.IP \[bu] 2
\f[B]vfs_readv\f[R]: Vectorized read operations
.IP \[bu] 2
\f[B]read\f[R]: Read system call events
.IP \[bu] 2
\f[B]file_modification\f[R]: File modification detection events
