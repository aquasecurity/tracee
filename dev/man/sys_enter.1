.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-SYS\-ENTER" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]sys_enter\f[R] \- system call entry point monitoring
.SS DESCRIPTION
Triggered when any system call entry occurs at the kernel level through
the raw tracepoint infrastructure.
This event provides comprehensive syscall monitoring by capturing every
system call before it is processed by the kernel, regardless of the
specific syscall type.
.PP
Unlike specific syscall events (e.g., \f[CR]open\f[R],
\f[CR]execve\f[R], \f[CR]read\f[R]) that use dedicated kprobes for
targeted monitoring, \f[CR]sys_enter\f[R] uses raw tracepoints to
capture all syscalls generically.
This makes it ideal for broad system call analysis and comprehensive
auditing scenarios.
.PP
This event fires before the actual system call handler executes,
providing early visibility into all system call requests across the
entire system.
.SS EVENT SETS
\f[B]none\f[R]
.SS DATA FIELDS
.TP
\f[B]syscall\f[R] (\f[I]int32\f[R])
The system call number that was entered
.SS DEPENDENCIES
\f[B]Kernel Tracepoint:\f[R]
.IP \[bu] 2
raw_syscalls:sys_enter (required): Raw tracepoint for system call entry
.SS USE CASES
.IP \[bu] 2
\f[B]Security monitoring\f[R]: Detect anomalous system call patterns
.IP \[bu] 2
\f[B]Performance analysis\f[R]: Understand system call frequency and
overhead
.IP \[bu] 2
\f[B]Application debugging\f[R]: Trace system call execution flow
.IP \[bu] 2
\f[B]System auditing\f[R]: Complete audit trail of system call activity
.IP \[bu] 2
\f[B]Malware detection\f[R]: Identify suspicious system call sequences
.SS IMPLEMENTATION NOTES
.IP \[bu] 2
\f[B]High volume\f[R]: This event generates very high volumes of data
since every system call triggers it
.IP \[bu] 2
\f[B]Raw tracepoint\f[R]: Uses kernel raw tracepoints for maximum
performance
.IP \[bu] 2
\f[B]Early interception\f[R]: Captures system calls before kernel
processing
.SS PERFORMANCE CONSIDERATIONS
\f[B]High Overhead Scenarios:\f[R] \- Systems with intensive system call
activity \- Applications making frequent system calls \- Multi\-threaded
applications with concurrent system calls
.PP
\f[B]Optimization Strategies:\f[R] \- Use process or container filtering
when possible \- Combine with specific system call events for targeted
monitoring \- Consider sampling for high\-frequency environments
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]sys_exit\f[R]: System call exit point monitoring
.IP \[bu] 2
\f[B]Individual syscalls\f[R]: Specific system call events (execve,
open, read, write, etc.)
.IP \[bu] 2
\f[B]raw_syscalls\f[R]: Raw system call tracepoints
