.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-DOCKER\-ABUSE" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]docker_abuse\f[R] \- Docker socket abuse detection
.SS DESCRIPTION
Triggered when malicious activities targeting the Docker UNIX socket are
detected, specifically when originating from within a container.
The Docker socket serves as the primary entry point for the Docker API,
and unauthorized access can enable container escape, host compromise,
and unauthorized container management.
.PP
Docker socket abuse represents a critical security risk as it provides a
potential pathway for attackers to execute commands directly on the host
system or manipulate other containers, effectively breaking container
isolation boundaries.
.PP
This signature is useful for:
.IP \[bu] 2
\f[B]Container escape detection\f[R]: Identify attempts to break out of
container isolation
.IP \[bu] 2
\f[B]Privilege escalation monitoring\f[R]: Detect unauthorized access to
host resources
.IP \[bu] 2
\f[B]Docker security\f[R]: Monitor for Docker API abuse and unauthorized
container operations
.SS SIGNATURE METADATA
.IP \[bu] 2
\f[B]ID\f[R]: TRC\-1019
.IP \[bu] 2
\f[B]Version\f[R]: 1
.IP \[bu] 2
\f[B]Severity\f[R]: 2 (Moderate threat level)
.IP \[bu] 2
\f[B]Category\f[R]: privilege\-escalation
.IP \[bu] 2
\f[B]Technique\f[R]: Exploitation for Privilege Escalation
.IP \[bu] 2
\f[B]MITRE ATT&CK\f[R]: T1068
.SS EVENT SETS
\f[B]signatures\f[R], \f[B]privilege_escalation\f[R]
.SS DATA FIELDS
.TP
\f[B]access_info\f[R] (\f[I]object\f[R])
Information about the Docker socket access attempt
.TP
\f[B]container_context\f[R] (\f[I]object\f[R])
Context information about the container attempting access
.SS DEPENDENCIES
\f[B]System Events:\f[R]
.IP \[bu] 2
security_file_open (required): Monitors file access to detect
docker.sock file access
.IP \[bu] 2
security_socket_connect (required): Monitors socket connections to
detect Docker UNIX socket connections
.SS DETECTION LOGIC
The signature monitors for:
.IP "1." 3
\f[B]File access events\f[R] to docker.sock from within containers
.IP "2." 3
\f[B]Socket connection events\f[R] to Docker UNIX socket from containers
.IP "3." 3
\f[B]Container context verification\f[R] to ensure detection only
applies to containerized processes
.SS USE CASES
.IP \[bu] 2
\f[B]Container security\f[R]: Prevent unauthorized container escape
attempts
.IP \[bu] 2
\f[B]Docker environment protection\f[R]: Secure Docker deployments
against socket abuse
.IP \[bu] 2
\f[B]Incident response\f[R]: Investigate container\-based attacks and
privilege escalation
.IP \[bu] 2
\f[B]Compliance monitoring\f[R]: Ensure containers don\[cq]t have
unauthorized host access
.IP \[bu] 2
\f[B]Security auditing\f[R]: Monitor for violations of container
isolation principles
.SS ATTACK SCENARIOS
Docker socket abuse enables:
.IP \[bu] 2
\f[B]Container escape\f[R]: Breaking out of container isolation to
access host
.IP \[bu] 2
\f[B]Privilege escalation\f[R]: Gaining root access on the host system
.IP \[bu] 2
\f[B]Lateral movement\f[R]: Accessing other containers and their data
.IP \[bu] 2
\f[B]Host manipulation\f[R]: Installing malware or backdoors on the host
.IP \[bu] 2
\f[B]Resource abuse\f[R]: Creating unauthorized containers for
cryptomining or other malicious purposes
.SS SOCKET ACCESS METHODS
Attackers may access Docker socket through:
.IP \[bu] 2
\f[B]Volume mounts\f[R]: Mounting \f[CR]/var/run/docker.sock\f[R] into
containers
.IP \[bu] 2
\f[B]Direct file access\f[R]: Attempting to read/write the socket file
.IP \[bu] 2
\f[B]Socket connections\f[R]: Connecting to the UNIX socket endpoint
.IP \[bu] 2
\f[B]API calls\f[R]: Using Docker API commands through the socket
.SS COMMON EXPLOITATION TECHNIQUES
.IP \[bu] 2
\f[B]Privileged container creation\f[R]: Creating containers with
privileged access
.IP \[bu] 2
\f[B]Host filesystem access\f[R]: Mounting host directories into
containers
.IP \[bu] 2
\f[B]Container inspection\f[R]: Enumerating existing containers and
their configurations
.IP \[bu] 2
\f[B]Image manipulation\f[R]: Pulling malicious images or modifying
existing ones
.IP \[bu] 2
\f[B]Network manipulation\f[R]: Modifying container network
configurations
.SS PREVENTION STRATEGIES
.IP \[bu] 2
\f[B]Socket access control\f[R]: Restrict docker.sock access using file
permissions
.IP \[bu] 2
\f[B]User namespaces\f[R]: Use user namespace remapping to limit
container privileges
.IP \[bu] 2
\f[B]Rootless Docker\f[R]: Run Docker daemon in rootless mode when
possible
.IP \[bu] 2
\f[B]SELinux/AppArmor\f[R]: Use mandatory access controls to restrict
socket access
.IP \[bu] 2
\f[B]Container runtime security\f[R]: Use security\-focused container
runtimes
.SS LEGITIMATE USE CASES
Some legitimate scenarios may trigger this detection:
.IP \[bu] 2
\f[B]CI/CD pipelines\f[R]: Build systems that need Docker access
.IP \[bu] 2
\f[B]Container orchestration\f[R]: Tools like Kubernetes accessing
Docker API
.IP \[bu] 2
\f[B]Monitoring tools\f[R]: System monitoring that requires container
inspection
.IP \[bu] 2
\f[B]Development tools\f[R]: Docker\-in\-Docker scenarios for
development
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]security_file_open\f[R]: Primary detection for docker.sock file
access
.IP \[bu] 2
\f[B]security_socket_connect\f[R]: Primary detection for socket
connections
.IP \[bu] 2
\f[B]container_create\f[R]: Container creation events for context
.IP \[bu] 2
\f[B]container_remove\f[R]: Container removal events for analysis
