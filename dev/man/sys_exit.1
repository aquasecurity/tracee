.\" Automatically generated by Pandoc 3.2
.\"
.TH "TRACEE\-SYS\-EXIT" "1" "" "" "Tracee Event Manual"
.SS NAME
\f[B]sys_exit\f[R] \- system call exit point monitoring
.SS DESCRIPTION
Triggered when any system call exit occurs at the kernel level through
the raw tracepoint infrastructure.
This event provides comprehensive syscall monitoring by capturing every
system call after it completes processing in the kernel, regardless of
the specific syscall type.
.PP
Unlike specific syscall events (e.g., \f[CR]open\f[R],
\f[CR]execve\f[R], \f[CR]read\f[R]) that use dedicated kprobes for
targeted monitoring, \f[CR]sys_exit\f[R] uses raw tracepoints to capture
all syscall completions generically.
This makes it ideal for broad system call analysis, performance
monitoring, and comprehensive auditing scenarios.
.PP
This event fires after the system call handler executes and before
returning to user space, providing visibility into all system call
outcomes across the entire system.
.SS EVENT SETS
\f[B]none\f[R]
.SS DATA FIELDS
.TP
\f[B]syscall\f[R] (\f[I]int32\f[R])
The system call number that was exited
.SS DEPENDENCIES
\f[B]Kernel Tracepoint:\f[R]
.IP \[bu] 2
raw_syscalls:sys_exit (required): Raw tracepoint for system call exit
.SS USE CASES
.IP \[bu] 2
\f[B]Security monitoring\f[R]: Track system call success and failure
patterns
.IP \[bu] 2
\f[B]Performance analysis\f[R]: Measure system call execution time with
sys_enter
.IP \[bu] 2
\f[B]Error analysis\f[R]: Monitor system call failures and error
conditions
.IP \[bu] 2
\f[B]System auditing\f[R]: Complete audit trail of system call results
.IP \[bu] 2
\f[B]Debugging\f[R]: Trace system call completion and return values
.SS IMPLEMENTATION NOTES
.IP \[bu] 2
\f[B]High volume\f[R]: This event generates very high volumes of data
since every system call triggers it
.IP \[bu] 2
\f[B]Raw tracepoint\f[R]: Uses kernel raw tracepoints for maximum
performance
.IP \[bu] 2
\f[B]Post\-execution\f[R]: Captures system calls after kernel processing
completes
.SS PERFORMANCE CONSIDERATIONS
\f[B]High Overhead Scenarios:\f[R] \- Systems with intensive system call
activity \- Applications making frequent system calls \- Multi\-threaded
applications with concurrent system calls
.PP
\f[B]Optimization Strategies:\f[R] \- Use process or container filtering
when possible \- Combine with specific system call events for targeted
monitoring \- Consider sampling for high\-frequency environments
.SS TIMING ANALYSIS
When combined with \f[B]sys_enter\f[R], enables:
.PP
\f[B]Execution Time Measurement:\f[R] \- Calculate system call duration
\- Identify performance bottlenecks \- Analyze system call overhead
patterns
.PP
\f[B]Flow Analysis:\f[R] \- Track complete system call lifecycle \-
Correlate entry and exit events \- Monitor system call state changes
.SS RELATED EVENTS
.IP \[bu] 2
\f[B]sys_enter\f[R]: System call entry point monitoring
.IP \[bu] 2
\f[B]Individual syscalls\f[R]: Specific system call events (execve,
open, read, write, etc.)
.IP \[bu] 2
\f[B]raw_syscalls\f[R]: Raw system call tracepoints
