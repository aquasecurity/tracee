---
description: Comprehensive guide for running tests in the Tracee project
globs:
  - "**/Makefile"
  - "**/*_test.go"
alwaysApply: false
---

# Tracee Testing Guide

## Unit Testing - ALWAYS Use make test-unit

**CRITICAL: For any BPF-related packages, NEVER use `go test` directly.** Always use `make test-unit` which sets up the proper BPF environment.

### Basic Usage
```bash
# Run all unit tests (recommended)
make test-unit

# Test specific package
make test-unit PKG=pkg/ebpf/probes

# Test specific function across all packages  
make test-unit TEST=TestKernelVersionRequirement_Basic

# Test specific function in specific package
make test-unit PKG=pkg/ebpf/probes TEST=TestProbeCompatibility_Basic
```

### Why make test-unit?
- Sets up proper BPF compilation environment (CGO flags, libbpf linking)
- Includes correct build tags (`-tags ebpf`)
- Handles cross-compilation for Linux targets
- Enables race detection and other essential test flags

### Test Environment Setup
The `make test-unit` target automatically configures:
- `GOOS=linux CC=clang GOARCH=amd64`
- `CGO_CFLAGS` with BPF header paths
- `CGO_LDFLAGS` with libbpf library paths
- Test flags: `-race -shuffle on -failfast -v`

## Other Test Types

### Integration Tests (Requires Root)
```bash
make test-integration  # Full system tests with real eBPF programs
```
**Note**: Integration tests require root privileges and kernel eBPF support.

### E2E Tests
```bash
# Network signature tests
make e2e-net-signatures
# Instrumentation signature tests
make e2e-inst-signatures
```

### Coverage Reports
```bash
make coverage           # View coverage summary
make coverage-html      # Generate HTML coverage report
```
**Target**: 60% coverage for new code, maintain current baseline for existing code.

### Module-Specific Tests
```bash
make test-types        # Types module (standalone)
make test-common       # Common module (standalone)
```

## Troubleshooting

### "fatal error: bpf/bpf.h: No such file or directory"
- **Solution**: Use `make test-unit` instead of `go test`
- This error occurs when trying to compile libbpfgo without proper environment

### Slow Test Execution
- Use package targeting: `make test-unit PKG=specific/package`
- Use function targeting: `make test-unit TEST=TestKernelVersionRequirement_Basic`

### Test Timeouts or Failures
- Check kernel eBPF support: `cat /sys/kernel/debug/tracing/available_events`
- Verify root privileges for integration tests
- Check for conflicting processes using eBPF resources

## Writing Tests

### Test Conventions
- Use `testify/assert` and `testify/require` for assertions
- Place `*_test.go` files alongside source files
- Use `testutils.SetTestLogger()` for log capture
- Always clean up with `defer` statements
- Check for goroutine leaks with `go.uber.org/goleak`
- Pay attention to privileges: avoid using code introducing new privileges to test suites

### Integration Test Patterns
```go
// Standard integration test lifecycle
ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
defer cancel()

trc, err := startTracee(ctx, t, config, nil, nil)
defer waitForTraceeStop(trc)

stream := trc.SubscribeAll()
defer trc.Unsubscribe(stream)
```

### Test File Organization
- Unit tests: Alongside source files (`pkg/*/`)
- Integration tests: `tests/integration/`
- E2E tests: `tests/e2e-*/`
- Test utilities: `tests/testutils/`