// This wrapper is a quick win for the POC to integrate trace.Event with cel-go without implementing ref.TypeProvider
// for Go structs.
//
// TODO Add make target to generate Go structs from event.proto.
//
// $ sudo apt-get install --yes protobuf-compiler
// $ go install github.com/golang/protobuf/protoc-gen-go
// $ export PATH=$PATH:$(go env GOPATH)/bin
// $ protoc pkg/rules/celsig/wrapper/event.proto --go_out=plugins=grpc:/vagrant --experimental_allow_proto3_optional
syntax = "proto3";

import "google/protobuf/timestamp.proto";

package wrapper;

option go_package = "pkg/rules/celsig/wrapper";

message Event {
  google.protobuf.Timestamp timestamp = 1;
  int64 processorID = 2;
  int64 processID = 3;
  uint64 cgroupID = 4;
  int64 threadID = 5;
  int64 parentProcessID = 6;
  int64 hostProcessID = 7;
  int64 hostThreadID = 8;
  int64 hostParentProcessID = 9;
  int64 userID = 10;
  int64 mountNS = 11;
  int64 PIDNS = 12;
  string processName = 13;
  string hostName = 14;
  string containerID = 15;
  string containerImage = 16;
  string containerName = 17;
  string podName = 18;
  string podNamespace = 19;
  string podUID = 20;
  int64 eventID = 21;
  string eventName = 22;
  int64 argsNum = 23;
  int64 returnValue = 24;
  repeated uint64 stackAddresses = 25;
  repeated Argument args = 26;
}

// ValueType enumerates types of Argument values.
enum ValueType {
  UNKNOWN_VALUE_TYPE = 0;
  STRING = 1;
  STRING_ARRAY = 2;
  UINT32 = 3;
  UINT64 = 4;
  INT32 = 5;
  INT64 = 6;
  // SOCKADDR is just an example of a complex type wrapped from trace.Event to Protocol Buffer message to demonstrate
  // CEL capabilities with more complex expressions.
  SOCKADDR = 7;
}

// Argument represents an argument associated with the given Event.
message Argument {

  // name is the name of this argument.
  string name = 1;

  // valueType the type of the value held by this argument.
  ValueType valueType = 2;

  // value the value held by this argument.
  Value value = 3;
}

// Value is a union-like structure that wraps the value of a given Argument.
// We are not using Oneof nor Any type because of their limitations. The Oneof
// type does not allow repeated values, whereas Any is not convenient to unpack
// structured values.
// A similar approach is taken by Kubernetes APIs. For example,
// PersistentVolumeSource holds mutually exclusive volume definitions.
// See https://github.com/kubernetes/api/blob/master/core/v1/generated.proto
message Value {

  optional string stringValue = 1;
  repeated string stringArrayValue = 2;
  optional uint32 uint32Value = 3;
  optional uint64 uint64Value = 4;
  optional int32 int32Value = 5;
  optional int64 int64Value = 6;
  optional sockaddr sockaddrValue = 7;
}

enum sa_family_t {
  SA_FAMILY_T_UNSPEC = 0;
  // POSIX.1g used the name AF_LOCAL as a synonym for AF_UNIX, but this
  // name is not used in SUSv3.
  AF_UNIX = 1;
  AF_INET = 2;
  AF_INET6 = 10;
}

message sockaddr {
  sa_family_t sa_family = 1;
  string sun_path = 2;
  string sin_addr = 3;
  uint32 sin_port = 4;
  string sin6_addr = 5;
  uint32 sin6_port = 6;
  uint32 sin6_flowinfo = 7;
  uint32 sin6_scopeid = 8;
}
