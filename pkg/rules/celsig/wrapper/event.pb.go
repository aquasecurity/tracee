// This wrapper is a quick win for the POC to integrate trace.Event with cel-go without implementing ref.TypeProvider
// for Go structs.
//
// TODO Add make target to generate Go structs from event.proto.
//
// $ sudo apt-get install --yes protobuf-compiler
// $ go install github.com/golang/protobuf/protoc-gen-go
// $ export PATH=$PATH:$(go env GOPATH)/bin
// $ protoc pkg/rules/celsig/wrapper/event.proto --go_out=plugins=grpc:/vagrant --experimental_allow_proto3_optional

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: pkg/rules/celsig/wrapper/event.proto

package wrapper

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ValueType enumerates types of Argument values.
type ValueType int32

const (
	ValueType_UNKNOWN_VALUE_TYPE ValueType = 0
	ValueType_STRING             ValueType = 1
	ValueType_STRING_ARRAY       ValueType = 2
	ValueType_UINT32             ValueType = 3
	ValueType_UINT64             ValueType = 4
	ValueType_INT32              ValueType = 5
	ValueType_INT64              ValueType = 6
	// SOCKADDR is just an example of a complex type wrapped from trace.Event to Protocol Buffer message to demonstrate
	// CEL capabilities with more complex expressions.
	ValueType_SOCKADDR ValueType = 7
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "UNKNOWN_VALUE_TYPE",
		1: "STRING",
		2: "STRING_ARRAY",
		3: "UINT32",
		4: "UINT64",
		5: "INT32",
		6: "INT64",
		7: "SOCKADDR",
	}
	ValueType_value = map[string]int32{
		"UNKNOWN_VALUE_TYPE": 0,
		"STRING":             1,
		"STRING_ARRAY":       2,
		"UINT32":             3,
		"UINT64":             4,
		"INT32":              5,
		"INT64":              6,
		"SOCKADDR":           7,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_rules_celsig_wrapper_event_proto_enumTypes[0].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_pkg_rules_celsig_wrapper_event_proto_enumTypes[0]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_rules_celsig_wrapper_event_proto_rawDescGZIP(), []int{0}
}

type SaFamilyT int32

const (
	SaFamilyT_SA_FAMILY_T_UNSPEC SaFamilyT = 0
	// POSIX.1g used the name AF_LOCAL as a synonym for AF_UNIX, but this
	// name is not used in SUSv3.
	SaFamilyT_AF_UNIX  SaFamilyT = 1
	SaFamilyT_AF_INET  SaFamilyT = 2
	SaFamilyT_AF_INET6 SaFamilyT = 10
)

// Enum value maps for SaFamilyT.
var (
	SaFamilyT_name = map[int32]string{
		0:  "SA_FAMILY_T_UNSPEC",
		1:  "AF_UNIX",
		2:  "AF_INET",
		10: "AF_INET6",
	}
	SaFamilyT_value = map[string]int32{
		"SA_FAMILY_T_UNSPEC": 0,
		"AF_UNIX":            1,
		"AF_INET":            2,
		"AF_INET6":           10,
	}
)

func (x SaFamilyT) Enum() *SaFamilyT {
	p := new(SaFamilyT)
	*p = x
	return p
}

func (x SaFamilyT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SaFamilyT) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_rules_celsig_wrapper_event_proto_enumTypes[1].Descriptor()
}

func (SaFamilyT) Type() protoreflect.EnumType {
	return &file_pkg_rules_celsig_wrapper_event_proto_enumTypes[1]
}

func (x SaFamilyT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SaFamilyT.Descriptor instead.
func (SaFamilyT) EnumDescriptor() ([]byte, []int) {
	return file_pkg_rules_celsig_wrapper_event_proto_rawDescGZIP(), []int{1}
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp           *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ProcessorID         int64                `protobuf:"varint,2,opt,name=processorID,proto3" json:"processorID,omitempty"`
	ProcessID           int64                `protobuf:"varint,3,opt,name=processID,proto3" json:"processID,omitempty"`
	CgroupID            uint64               `protobuf:"varint,4,opt,name=cgroupID,proto3" json:"cgroupID,omitempty"`
	ThreadID            int64                `protobuf:"varint,5,opt,name=threadID,proto3" json:"threadID,omitempty"`
	ParentProcessID     int64                `protobuf:"varint,6,opt,name=parentProcessID,proto3" json:"parentProcessID,omitempty"`
	HostProcessID       int64                `protobuf:"varint,7,opt,name=hostProcessID,proto3" json:"hostProcessID,omitempty"`
	HostThreadID        int64                `protobuf:"varint,8,opt,name=hostThreadID,proto3" json:"hostThreadID,omitempty"`
	HostParentProcessID int64                `protobuf:"varint,9,opt,name=hostParentProcessID,proto3" json:"hostParentProcessID,omitempty"`
	UserID              int64                `protobuf:"varint,10,opt,name=userID,proto3" json:"userID,omitempty"`
	MountNS             int64                `protobuf:"varint,11,opt,name=mountNS,proto3" json:"mountNS,omitempty"`
	PIDNS               int64                `protobuf:"varint,12,opt,name=PIDNS,proto3" json:"PIDNS,omitempty"`
	ProcessName         string               `protobuf:"bytes,13,opt,name=processName,proto3" json:"processName,omitempty"`
	HostName            string               `protobuf:"bytes,14,opt,name=hostName,proto3" json:"hostName,omitempty"`
	ContainerID         string               `protobuf:"bytes,15,opt,name=containerID,proto3" json:"containerID,omitempty"`
	ContainerImage      string               `protobuf:"bytes,16,opt,name=containerImage,proto3" json:"containerImage,omitempty"`
	ContainerName       string               `protobuf:"bytes,17,opt,name=containerName,proto3" json:"containerName,omitempty"`
	PodName             string               `protobuf:"bytes,18,opt,name=podName,proto3" json:"podName,omitempty"`
	PodNamespace        string               `protobuf:"bytes,19,opt,name=podNamespace,proto3" json:"podNamespace,omitempty"`
	PodUID              string               `protobuf:"bytes,20,opt,name=podUID,proto3" json:"podUID,omitempty"`
	EventID             int64                `protobuf:"varint,21,opt,name=eventID,proto3" json:"eventID,omitempty"`
	EventName           string               `protobuf:"bytes,22,opt,name=eventName,proto3" json:"eventName,omitempty"`
	ArgsNum             int64                `protobuf:"varint,23,opt,name=argsNum,proto3" json:"argsNum,omitempty"`
	ReturnValue         int64                `protobuf:"varint,24,opt,name=returnValue,proto3" json:"returnValue,omitempty"`
	StackAddresses      []uint64             `protobuf:"varint,25,rep,packed,name=stackAddresses,proto3" json:"stackAddresses,omitempty"`
	Args                []*Argument          `protobuf:"bytes,26,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rules_celsig_wrapper_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rules_celsig_wrapper_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pkg_rules_celsig_wrapper_event_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Event) GetProcessorID() int64 {
	if x != nil {
		return x.ProcessorID
	}
	return 0
}

func (x *Event) GetProcessID() int64 {
	if x != nil {
		return x.ProcessID
	}
	return 0
}

func (x *Event) GetCgroupID() uint64 {
	if x != nil {
		return x.CgroupID
	}
	return 0
}

func (x *Event) GetThreadID() int64 {
	if x != nil {
		return x.ThreadID
	}
	return 0
}

func (x *Event) GetParentProcessID() int64 {
	if x != nil {
		return x.ParentProcessID
	}
	return 0
}

func (x *Event) GetHostProcessID() int64 {
	if x != nil {
		return x.HostProcessID
	}
	return 0
}

func (x *Event) GetHostThreadID() int64 {
	if x != nil {
		return x.HostThreadID
	}
	return 0
}

func (x *Event) GetHostParentProcessID() int64 {
	if x != nil {
		return x.HostParentProcessID
	}
	return 0
}

func (x *Event) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Event) GetMountNS() int64 {
	if x != nil {
		return x.MountNS
	}
	return 0
}

func (x *Event) GetPIDNS() int64 {
	if x != nil {
		return x.PIDNS
	}
	return 0
}

func (x *Event) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *Event) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *Event) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *Event) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *Event) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *Event) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *Event) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *Event) GetPodUID() string {
	if x != nil {
		return x.PodUID
	}
	return ""
}

func (x *Event) GetEventID() int64 {
	if x != nil {
		return x.EventID
	}
	return 0
}

func (x *Event) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *Event) GetArgsNum() int64 {
	if x != nil {
		return x.ArgsNum
	}
	return 0
}

func (x *Event) GetReturnValue() int64 {
	if x != nil {
		return x.ReturnValue
	}
	return 0
}

func (x *Event) GetStackAddresses() []uint64 {
	if x != nil {
		return x.StackAddresses
	}
	return nil
}

func (x *Event) GetArgs() []*Argument {
	if x != nil {
		return x.Args
	}
	return nil
}

// Argument represents an argument associated with the given Event.
type Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of this argument.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// valueType the type of the value held by this argument.
	ValueType ValueType `protobuf:"varint,2,opt,name=valueType,proto3,enum=wrapper.ValueType" json:"valueType,omitempty"`
	// value the value held by this argument.
	Value *Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Argument) Reset() {
	*x = Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rules_celsig_wrapper_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rules_celsig_wrapper_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_pkg_rules_celsig_wrapper_event_proto_rawDescGZIP(), []int{1}
}

func (x *Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Argument) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_UNKNOWN_VALUE_TYPE
}

func (x *Argument) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Value is a union-like structure that wraps the value of a given Argument.
// We are not using Oneof nor Any type because of their limitations. The Oneof
// type does not allow repeated values, whereas Any is not convenient to unpack
// structured values.
// A similar approach is taken by Kubernetes APIs. For example,
// PersistentVolumeSource holds mutually exclusive volume definitions.
// See https://github.com/kubernetes/api/blob/master/core/v1/generated.proto
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue      *string   `protobuf:"bytes,1,opt,name=stringValue,proto3,oneof" json:"stringValue,omitempty"`
	StringArrayValue []string  `protobuf:"bytes,2,rep,name=stringArrayValue,proto3" json:"stringArrayValue,omitempty"`
	Uint32Value      *uint32   `protobuf:"varint,3,opt,name=uint32Value,proto3,oneof" json:"uint32Value,omitempty"`
	Uint64Value      *uint64   `protobuf:"varint,4,opt,name=uint64Value,proto3,oneof" json:"uint64Value,omitempty"`
	Int32Value       *int32    `protobuf:"varint,5,opt,name=int32Value,proto3,oneof" json:"int32Value,omitempty"`
	Int64Value       *int64    `protobuf:"varint,6,opt,name=int64Value,proto3,oneof" json:"int64Value,omitempty"`
	SockaddrValue    *Sockaddr `protobuf:"bytes,7,opt,name=sockaddrValue,proto3,oneof" json:"sockaddrValue,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rules_celsig_wrapper_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rules_celsig_wrapper_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_pkg_rules_celsig_wrapper_event_proto_rawDescGZIP(), []int{2}
}

func (x *Value) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *Value) GetStringArrayValue() []string {
	if x != nil {
		return x.StringArrayValue
	}
	return nil
}

func (x *Value) GetUint32Value() uint32 {
	if x != nil && x.Uint32Value != nil {
		return *x.Uint32Value
	}
	return 0
}

func (x *Value) GetUint64Value() uint64 {
	if x != nil && x.Uint64Value != nil {
		return *x.Uint64Value
	}
	return 0
}

func (x *Value) GetInt32Value() int32 {
	if x != nil && x.Int32Value != nil {
		return *x.Int32Value
	}
	return 0
}

func (x *Value) GetInt64Value() int64 {
	if x != nil && x.Int64Value != nil {
		return *x.Int64Value
	}
	return 0
}

func (x *Value) GetSockaddrValue() *Sockaddr {
	if x != nil {
		return x.SockaddrValue
	}
	return nil
}

type Sockaddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaFamily     SaFamilyT `protobuf:"varint,1,opt,name=sa_family,json=saFamily,proto3,enum=wrapper.SaFamilyT" json:"sa_family,omitempty"`
	SunPath      string    `protobuf:"bytes,2,opt,name=sun_path,json=sunPath,proto3" json:"sun_path,omitempty"`
	SinAddr      string    `protobuf:"bytes,3,opt,name=sin_addr,json=sinAddr,proto3" json:"sin_addr,omitempty"`
	SinPort      uint32    `protobuf:"varint,4,opt,name=sin_port,json=sinPort,proto3" json:"sin_port,omitempty"`
	Sin6Addr     string    `protobuf:"bytes,5,opt,name=sin6_addr,json=sin6Addr,proto3" json:"sin6_addr,omitempty"`
	Sin6Port     uint32    `protobuf:"varint,6,opt,name=sin6_port,json=sin6Port,proto3" json:"sin6_port,omitempty"`
	Sin6Flowinfo uint32    `protobuf:"varint,7,opt,name=sin6_flowinfo,json=sin6Flowinfo,proto3" json:"sin6_flowinfo,omitempty"`
	Sin6Scopeid  uint32    `protobuf:"varint,8,opt,name=sin6_scopeid,json=sin6Scopeid,proto3" json:"sin6_scopeid,omitempty"`
}

func (x *Sockaddr) Reset() {
	*x = Sockaddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rules_celsig_wrapper_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sockaddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sockaddr) ProtoMessage() {}

func (x *Sockaddr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rules_celsig_wrapper_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sockaddr.ProtoReflect.Descriptor instead.
func (*Sockaddr) Descriptor() ([]byte, []int) {
	return file_pkg_rules_celsig_wrapper_event_proto_rawDescGZIP(), []int{3}
}

func (x *Sockaddr) GetSaFamily() SaFamilyT {
	if x != nil {
		return x.SaFamily
	}
	return SaFamilyT_SA_FAMILY_T_UNSPEC
}

func (x *Sockaddr) GetSunPath() string {
	if x != nil {
		return x.SunPath
	}
	return ""
}

func (x *Sockaddr) GetSinAddr() string {
	if x != nil {
		return x.SinAddr
	}
	return ""
}

func (x *Sockaddr) GetSinPort() uint32 {
	if x != nil {
		return x.SinPort
	}
	return 0
}

func (x *Sockaddr) GetSin6Addr() string {
	if x != nil {
		return x.Sin6Addr
	}
	return ""
}

func (x *Sockaddr) GetSin6Port() uint32 {
	if x != nil {
		return x.Sin6Port
	}
	return 0
}

func (x *Sockaddr) GetSin6Flowinfo() uint32 {
	if x != nil {
		return x.Sin6Flowinfo
	}
	return 0
}

func (x *Sockaddr) GetSin6Scopeid() uint32 {
	if x != nil {
		return x.Sin6Scopeid
	}
	return 0
}

var File_pkg_rules_celsig_wrapper_event_proto protoreflect.FileDescriptor

var file_pkg_rules_celsig_wrapper_event_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x6c, 0x73,
	0x69, 0x67, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xee, 0x06, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x68, 0x6f, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x44,
	0x12, 0x30, 0x0a, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x68,
	0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x53, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x53, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x49, 0x44, 0x4e, 0x53, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x49, 0x44, 0x4e, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x55, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x55, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x67, 0x73, 0x4e, 0x75,
	0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72, 0x67, 0x73, 0x4e, 0x75, 0x6d,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x76, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x90, 0x03, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0b, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x02, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x0d, 0x73, 0x6f, 0x63, 0x6b, 0x61, 0x64, 0x64, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x73, 0x6f, 0x63, 0x6b, 0x61, 0x64, 0x64, 0x72, 0x48, 0x05, 0x52, 0x0d, 0x73, 0x6f, 0x63, 0x6b,
	0x61, 0x64, 0x64, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73,
	0x6f, 0x63, 0x6b, 0x61, 0x64, 0x64, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x90, 0x02, 0x0a,
	0x08, 0x73, 0x6f, 0x63, 0x6b, 0x61, 0x64, 0x64, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x61, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x61, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x5f, 0x74, 0x52, 0x08, 0x73, 0x61, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x75, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x69, 0x6e, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x69, 0x6e, 0x36, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69,
	0x6e, 0x36, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x69, 0x6e, 0x36, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x36, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x69, 0x6e, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x69, 0x6e, 0x36, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x36, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x69, 0x64, 0x2a,
	0x7d, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e,
	0x54, 0x33, 0x32, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4f, 0x43, 0x4b, 0x41, 0x44, 0x44, 0x52, 0x10, 0x07, 0x2a, 0x4d,
	0x0a, 0x0b, 0x73, 0x61, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x41, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x46, 0x5f, 0x55, 0x4e, 0x49, 0x58,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x36, 0x10, 0x0a, 0x42, 0x1a, 0x5a,
	0x18, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x6c, 0x73, 0x69,
	0x67, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pkg_rules_celsig_wrapper_event_proto_rawDescOnce sync.Once
	file_pkg_rules_celsig_wrapper_event_proto_rawDescData = file_pkg_rules_celsig_wrapper_event_proto_rawDesc
)

func file_pkg_rules_celsig_wrapper_event_proto_rawDescGZIP() []byte {
	file_pkg_rules_celsig_wrapper_event_proto_rawDescOnce.Do(func() {
		file_pkg_rules_celsig_wrapper_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_rules_celsig_wrapper_event_proto_rawDescData)
	})
	return file_pkg_rules_celsig_wrapper_event_proto_rawDescData
}

var file_pkg_rules_celsig_wrapper_event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pkg_rules_celsig_wrapper_event_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_rules_celsig_wrapper_event_proto_goTypes = []interface{}{
	(ValueType)(0),              // 0: wrapper.ValueType
	(SaFamilyT)(0),              // 1: wrapper.sa_family_t
	(*Event)(nil),               // 2: wrapper.Event
	(*Argument)(nil),            // 3: wrapper.Argument
	(*Value)(nil),               // 4: wrapper.Value
	(*Sockaddr)(nil),            // 5: wrapper.sockaddr
	(*timestamp.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_pkg_rules_celsig_wrapper_event_proto_depIdxs = []int32{
	6, // 0: wrapper.Event.timestamp:type_name -> google.protobuf.Timestamp
	3, // 1: wrapper.Event.args:type_name -> wrapper.Argument
	0, // 2: wrapper.Argument.valueType:type_name -> wrapper.ValueType
	4, // 3: wrapper.Argument.value:type_name -> wrapper.Value
	5, // 4: wrapper.Value.sockaddrValue:type_name -> wrapper.sockaddr
	1, // 5: wrapper.sockaddr.sa_family:type_name -> wrapper.sa_family_t
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_pkg_rules_celsig_wrapper_event_proto_init() }
func file_pkg_rules_celsig_wrapper_event_proto_init() {
	if File_pkg_rules_celsig_wrapper_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_rules_celsig_wrapper_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rules_celsig_wrapper_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rules_celsig_wrapper_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rules_celsig_wrapper_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sockaddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_rules_celsig_wrapper_event_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_rules_celsig_wrapper_event_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_rules_celsig_wrapper_event_proto_goTypes,
		DependencyIndexes: file_pkg_rules_celsig_wrapper_event_proto_depIdxs,
		EnumInfos:         file_pkg_rules_celsig_wrapper_event_proto_enumTypes,
		MessageInfos:      file_pkg_rules_celsig_wrapper_event_proto_msgTypes,
	}.Build()
	File_pkg_rules_celsig_wrapper_event_proto = out.File
	file_pkg_rules_celsig_wrapper_event_proto_rawDesc = nil
	file_pkg_rules_celsig_wrapper_event_proto_goTypes = nil
	file_pkg_rules_celsig_wrapper_event_proto_depIdxs = nil
}
