// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: types/api/v1beta1/tracee.proto

package v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TraceeClient is the client API for Tracee service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraceeClient interface {
	ListEventDefinitions(ctx context.Context, in *ListEventDefinitionRequest, opts ...grpc.CallOption) (*ListEventDefinitionResponse, error)
}

type traceeClient struct {
	cc grpc.ClientConnInterface
}

func NewTraceeClient(cc grpc.ClientConnInterface) TraceeClient {
	return &traceeClient{cc}
}

func (c *traceeClient) ListEventDefinitions(ctx context.Context, in *ListEventDefinitionRequest, opts ...grpc.CallOption) (*ListEventDefinitionResponse, error) {
	out := new(ListEventDefinitionResponse)
	err := c.cc.Invoke(ctx, "/tracee.v1beta1.Tracee/ListEventDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraceeServer is the server API for Tracee service.
// All implementations must embed UnimplementedTraceeServer
// for forward compatibility
type TraceeServer interface {
	ListEventDefinitions(context.Context, *ListEventDefinitionRequest) (*ListEventDefinitionResponse, error)
	mustEmbedUnimplementedTraceeServer()
}

// UnimplementedTraceeServer must be embedded to have forward compatible implementations.
type UnimplementedTraceeServer struct {
}

func (UnimplementedTraceeServer) ListEventDefinitions(context.Context, *ListEventDefinitionRequest) (*ListEventDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventDefinitions not implemented")
}
func (UnimplementedTraceeServer) mustEmbedUnimplementedTraceeServer() {}

// UnsafeTraceeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraceeServer will
// result in compilation errors.
type UnsafeTraceeServer interface {
	mustEmbedUnimplementedTraceeServer()
}

func RegisterTraceeServer(s grpc.ServiceRegistrar, srv TraceeServer) {
	s.RegisterService(&Tracee_ServiceDesc, srv)
}

func _Tracee_ListEventDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceeServer).ListEventDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracee.v1beta1.Tracee/ListEventDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceeServer).ListEventDefinitions(ctx, req.(*ListEventDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tracee_ServiceDesc is the grpc.ServiceDesc for Tracee service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tracee_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracee.v1beta1.Tracee",
	HandlerType: (*TraceeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEventDefinitions",
			Handler:    _Tracee_ListEventDefinitions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/api/v1beta1/tracee.proto",
}
