// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: types/api/v1beta1/event_data.proto

package v1beta1

import (
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SaFamilyT int32

const (
	SaFamilyT_SA_FAMILY_T_UNSPEC SaFamilyT = 0
	// POSIX.1g used the name AF_LOCAL as a synonym for AF_UNIX,
	// but this name is not used in SUSv3.
	SaFamilyT_AF_UNIX  SaFamilyT = 1
	SaFamilyT_AF_INET  SaFamilyT = 2
	SaFamilyT_AF_INET6 SaFamilyT = 10
)

// Enum value maps for SaFamilyT.
var (
	SaFamilyT_name = map[int32]string{
		0:  "SA_FAMILY_T_UNSPEC",
		1:  "AF_UNIX",
		2:  "AF_INET",
		10: "AF_INET6",
	}
	SaFamilyT_value = map[string]int32{
		"SA_FAMILY_T_UNSPEC": 0,
		"AF_UNIX":            1,
		"AF_INET":            2,
		"AF_INET6":           10,
	}
)

func (x SaFamilyT) Enum() *SaFamilyT {
	p := new(SaFamilyT)
	*p = x
	return p
}

func (x SaFamilyT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SaFamilyT) Descriptor() protoreflect.EnumDescriptor {
	return file_types_api_v1beta1_event_data_proto_enumTypes[0].Descriptor()
}

func (SaFamilyT) Type() protoreflect.EnumType {
	return &file_types_api_v1beta1_event_data_proto_enumTypes[0]
}

func (x SaFamilyT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SaFamilyT.Descriptor instead.
func (SaFamilyT) EnumDescriptor() ([]byte, []int) {
	return file_types_api_v1beta1_event_data_proto_rawDescGZIP(), []int{0}
}

// https://pkg.go.dev/kernel.org/pub/linux/libs/security/libcap/cap@v1.2.68#Value
type Capability int32

const (
	Capability_CAP_CHOWN              Capability = 0
	Capability_DAC_OVERRIDE           Capability = 1
	Capability_CAP_DAC_READ_SEARCH    Capability = 2
	Capability_CAP_FOWNER             Capability = 3
	Capability_CAP_FSETID             Capability = 4
	Capability_CAP_KILL               Capability = 5
	Capability_CAP_SETGID             Capability = 6
	Capability_CAP_SETUID             Capability = 7
	Capability_CAP_SETPCAP            Capability = 8
	Capability_CAP_NET_BIND_SERVICE   Capability = 10
	Capability_CAP_NET_BROADCAST      Capability = 11
	Capability_CAP_NET_ADMIN          Capability = 12
	Capability_CAP_NET_RAW            Capability = 13
	Capability_CAP_IPC_LOCK           Capability = 14
	Capability_CAP_IPC_OWNER          Capability = 15
	Capability_CAP_SYS_MODULE         Capability = 16
	Capability_CAP_SYS_RAWIO          Capability = 17
	Capability_CAP_SYS_CHROOT         Capability = 18
	Capability_CAP_SYS_PTRACE         Capability = 19
	Capability_CAP_SYS_PACCT          Capability = 20
	Capability_CAP_SYS_ADMIN          Capability = 21
	Capability_CAP_SYS_BOOT           Capability = 22
	Capability_CAP_SYS_NICE           Capability = 23
	Capability_CAP_SYS_RESOURCE       Capability = 24
	Capability_CAP_SYS_TIME           Capability = 25
	Capability_CAP_SYS_TTY_CONFIG     Capability = 26
	Capability_CAP_MKNOD              Capability = 27
	Capability_CAP_LEASE              Capability = 28
	Capability_CAP_AUDIT_WRITE        Capability = 29
	Capability_CAP_AUDIT_CONTROL      Capability = 30
	Capability_CAP_SETFCAP            Capability = 31
	Capability_CAP_MAC_OVERRIDE       Capability = 32
	Capability_CAP_MAC_ADMIN          Capability = 33
	Capability_CAP_SYSLOG             Capability = 34
	Capability_CAP_WAKE_ALARM         Capability = 35
	Capability_CAP_BLOCK_SUSPEND      Capability = 36
	Capability_CAP_AUDIT_READ         Capability = 37
	Capability_CAP_PERFMON            Capability = 38
	Capability_CAP_BPF                Capability = 39
	Capability_CAP_CHECKPOINT_RESTORE Capability = 40
)

// Enum value maps for Capability.
var (
	Capability_name = map[int32]string{
		0:  "CAP_CHOWN",
		1:  "DAC_OVERRIDE",
		2:  "CAP_DAC_READ_SEARCH",
		3:  "CAP_FOWNER",
		4:  "CAP_FSETID",
		5:  "CAP_KILL",
		6:  "CAP_SETGID",
		7:  "CAP_SETUID",
		8:  "CAP_SETPCAP",
		10: "CAP_NET_BIND_SERVICE",
		11: "CAP_NET_BROADCAST",
		12: "CAP_NET_ADMIN",
		13: "CAP_NET_RAW",
		14: "CAP_IPC_LOCK",
		15: "CAP_IPC_OWNER",
		16: "CAP_SYS_MODULE",
		17: "CAP_SYS_RAWIO",
		18: "CAP_SYS_CHROOT",
		19: "CAP_SYS_PTRACE",
		20: "CAP_SYS_PACCT",
		21: "CAP_SYS_ADMIN",
		22: "CAP_SYS_BOOT",
		23: "CAP_SYS_NICE",
		24: "CAP_SYS_RESOURCE",
		25: "CAP_SYS_TIME",
		26: "CAP_SYS_TTY_CONFIG",
		27: "CAP_MKNOD",
		28: "CAP_LEASE",
		29: "CAP_AUDIT_WRITE",
		30: "CAP_AUDIT_CONTROL",
		31: "CAP_SETFCAP",
		32: "CAP_MAC_OVERRIDE",
		33: "CAP_MAC_ADMIN",
		34: "CAP_SYSLOG",
		35: "CAP_WAKE_ALARM",
		36: "CAP_BLOCK_SUSPEND",
		37: "CAP_AUDIT_READ",
		38: "CAP_PERFMON",
		39: "CAP_BPF",
		40: "CAP_CHECKPOINT_RESTORE",
	}
	Capability_value = map[string]int32{
		"CAP_CHOWN":              0,
		"DAC_OVERRIDE":           1,
		"CAP_DAC_READ_SEARCH":    2,
		"CAP_FOWNER":             3,
		"CAP_FSETID":             4,
		"CAP_KILL":               5,
		"CAP_SETGID":             6,
		"CAP_SETUID":             7,
		"CAP_SETPCAP":            8,
		"CAP_NET_BIND_SERVICE":   10,
		"CAP_NET_BROADCAST":      11,
		"CAP_NET_ADMIN":          12,
		"CAP_NET_RAW":            13,
		"CAP_IPC_LOCK":           14,
		"CAP_IPC_OWNER":          15,
		"CAP_SYS_MODULE":         16,
		"CAP_SYS_RAWIO":          17,
		"CAP_SYS_CHROOT":         18,
		"CAP_SYS_PTRACE":         19,
		"CAP_SYS_PACCT":          20,
		"CAP_SYS_ADMIN":          21,
		"CAP_SYS_BOOT":           22,
		"CAP_SYS_NICE":           23,
		"CAP_SYS_RESOURCE":       24,
		"CAP_SYS_TIME":           25,
		"CAP_SYS_TTY_CONFIG":     26,
		"CAP_MKNOD":              27,
		"CAP_LEASE":              28,
		"CAP_AUDIT_WRITE":        29,
		"CAP_AUDIT_CONTROL":      30,
		"CAP_SETFCAP":            31,
		"CAP_MAC_OVERRIDE":       32,
		"CAP_MAC_ADMIN":          33,
		"CAP_SYSLOG":             34,
		"CAP_WAKE_ALARM":         35,
		"CAP_BLOCK_SUSPEND":      36,
		"CAP_AUDIT_READ":         37,
		"CAP_PERFMON":            38,
		"CAP_BPF":                39,
		"CAP_CHECKPOINT_RESTORE": 40,
	}
)

func (x Capability) Enum() *Capability {
	p := new(Capability)
	*p = x
	return p
}

func (x Capability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Capability) Descriptor() protoreflect.EnumDescriptor {
	return file_types_api_v1beta1_event_data_proto_enumTypes[1].Descriptor()
}

func (Capability) Type() protoreflect.EnumType {
	return &file_types_api_v1beta1_event_data_proto_enumTypes[1]
}

func (x Capability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Capability.Descriptor instead.
func (Capability) EnumDescriptor() ([]byte, []int) {
	return file_types_api_v1beta1_event_data_proto_rawDescGZIP(), []int{1}
}

type EventValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*EventValue_Int32
	//	*EventValue_Int64
	//	*EventValue_Uint32
	//	*EventValue_Uint64
	//	*EventValue_String_
	//	*EventValue_Bytes
	//	*EventValue_Bool
	//	*EventValue_StringArray
	//	*EventValue_IntArray
	//	*EventValue_Uint64Array
	//	*EventValue_Sockaddr
	//	*EventValue_Cred
	//	*EventValue_Timespec
	//	*EventValue_Args
	//	*EventValue_TriggerEvent
	Value isEventValue_Value `protobuf_oneof:"value"`
}

func (x *EventValue) Reset() {
	*x = EventValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_api_v1beta1_event_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventValue) ProtoMessage() {}

func (x *EventValue) ProtoReflect() protoreflect.Message {
	mi := &file_types_api_v1beta1_event_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventValue.ProtoReflect.Descriptor instead.
func (*EventValue) Descriptor() ([]byte, []int) {
	return file_types_api_v1beta1_event_data_proto_rawDescGZIP(), []int{0}
}

func (m *EventValue) GetValue() isEventValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *EventValue) GetInt32() *wrappers.Int32Value {
	if x, ok := x.GetValue().(*EventValue_Int32); ok {
		return x.Int32
	}
	return nil
}

func (x *EventValue) GetInt64() *wrappers.Int64Value {
	if x, ok := x.GetValue().(*EventValue_Int64); ok {
		return x.Int64
	}
	return nil
}

func (x *EventValue) GetUint32() *wrappers.UInt32Value {
	if x, ok := x.GetValue().(*EventValue_Uint32); ok {
		return x.Uint32
	}
	return nil
}

func (x *EventValue) GetUint64() *wrappers.UInt64Value {
	if x, ok := x.GetValue().(*EventValue_Uint64); ok {
		return x.Uint64
	}
	return nil
}

func (x *EventValue) GetString_() *wrappers.StringValue {
	if x, ok := x.GetValue().(*EventValue_String_); ok {
		return x.String_
	}
	return nil
}

func (x *EventValue) GetBytes() *wrappers.BytesValue {
	if x, ok := x.GetValue().(*EventValue_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *EventValue) GetBool() *wrappers.BoolValue {
	if x, ok := x.GetValue().(*EventValue_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *EventValue) GetStringArray() *StringArrayValue {
	if x, ok := x.GetValue().(*EventValue_StringArray); ok {
		return x.StringArray
	}
	return nil
}

func (x *EventValue) GetIntArray() *IntArrayValue {
	if x, ok := x.GetValue().(*EventValue_IntArray); ok {
		return x.IntArray
	}
	return nil
}

func (x *EventValue) GetUint64Array() *UInt64ArrayValue {
	if x, ok := x.GetValue().(*EventValue_Uint64Array); ok {
		return x.Uint64Array
	}
	return nil
}

func (x *EventValue) GetSockaddr() *SockAddrValue {
	if x, ok := x.GetValue().(*EventValue_Sockaddr); ok {
		return x.Sockaddr
	}
	return nil
}

func (x *EventValue) GetCred() *CredValue {
	if x, ok := x.GetValue().(*EventValue_Cred); ok {
		return x.Cred
	}
	return nil
}

func (x *EventValue) GetTimespec() *TimespecValue {
	if x, ok := x.GetValue().(*EventValue_Timespec); ok {
		return x.Timespec
	}
	return nil
}

func (x *EventValue) GetArgs() *ArgsValue {
	if x, ok := x.GetValue().(*EventValue_Args); ok {
		return x.Args
	}
	return nil
}

func (x *EventValue) GetTriggerEvent() *TriggerEvent {
	if x, ok := x.GetValue().(*EventValue_TriggerEvent); ok {
		return x.TriggerEvent
	}
	return nil
}

type isEventValue_Value interface {
	isEventValue_Value()
}

type EventValue_Int32 struct {
	Int32 *wrappers.Int32Value `protobuf:"bytes,1,opt,name=int32,proto3,oneof"` // intT
}

type EventValue_Int64 struct {
	Int64 *wrappers.Int64Value `protobuf:"bytes,2,opt,name=int64,proto3,oneof"` // longT
}

type EventValue_Uint32 struct {
	Uint32 *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=uint32,proto3,oneof"` // uintT, modeT, devT, u8T, u16T
}

type EventValue_Uint64 struct {
	Uint64 *wrappers.UInt64Value `protobuf:"bytes,4,opt,name=uint64,proto3,oneof"` // ulongT, offT, sizeT, pointerT
}

type EventValue_String_ struct {
	String_ *wrappers.StringValue `protobuf:"bytes,5,opt,name=string,proto3,oneof"` // strT
}

type EventValue_Bytes struct {
	Bytes *wrappers.BytesValue `protobuf:"bytes,6,opt,name=bytes,proto3,oneof"` // bytesT
}

type EventValue_Bool struct {
	Bool *wrappers.BoolValue `protobuf:"bytes,7,opt,name=bool,proto3,oneof"` // boolT
}

type EventValue_StringArray struct {
	StringArray *StringArrayValue `protobuf:"bytes,10,opt,name=string_array,json=stringArray,proto3,oneof"` // strArrT, argsArrT
}

type EventValue_IntArray struct {
	IntArray *IntArrayValue `protobuf:"bytes,11,opt,name=int_array,json=intArray,proto3,oneof"` // intArr2T
}

type EventValue_Uint64Array struct {
	Uint64Array *UInt64ArrayValue `protobuf:"bytes,12,opt,name=uint64_array,json=uint64Array,proto3,oneof"` // uint64ArrT
}

type EventValue_Sockaddr struct {
	Sockaddr *SockAddrValue `protobuf:"bytes,13,opt,name=sockaddr,proto3,oneof"` // sockaddrT
}

type EventValue_Cred struct {
	Cred *CredValue `protobuf:"bytes,14,opt,name=cred,proto3,oneof"` // credT
}

type EventValue_Timespec struct {
	Timespec *TimespecValue `protobuf:"bytes,15,opt,name=timespec,proto3,oneof"` // timespecT
}

type EventValue_Args struct {
	Args *ArgsValue `protobuf:"bytes,16,opt,name=args,proto3,oneof"`
}

type EventValue_TriggerEvent struct {
	TriggerEvent *TriggerEvent `protobuf:"bytes,17,opt,name=trigger_event,json=triggerEvent,proto3,oneof"`
}

func (*EventValue_Int32) isEventValue_Value() {}

func (*EventValue_Int64) isEventValue_Value() {}

func (*EventValue_Uint32) isEventValue_Value() {}

func (*EventValue_Uint64) isEventValue_Value() {}

func (*EventValue_String_) isEventValue_Value() {}

func (*EventValue_Bytes) isEventValue_Value() {}

func (*EventValue_Bool) isEventValue_Value() {}

func (*EventValue_StringArray) isEventValue_Value() {}

func (*EventValue_IntArray) isEventValue_Value() {}

func (*EventValue_Uint64Array) isEventValue_Value() {}

func (*EventValue_Sockaddr) isEventValue_Value() {}

func (*EventValue_Cred) isEventValue_Value() {}

func (*EventValue_Timespec) isEventValue_Value() {}

func (*EventValue_Args) isEventValue_Value() {}

func (*EventValue_TriggerEvent) isEventValue_Value() {}

type TriggerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data map[string]*EventValue `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TriggerEvent) Reset() {
	*x = TriggerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_api_v1beta1_event_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerEvent) ProtoMessage() {}

func (x *TriggerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_types_api_v1beta1_event_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerEvent.ProtoReflect.Descriptor instead.
func (*TriggerEvent) Descriptor() ([]byte, []int) {
	return file_types_api_v1beta1_event_data_proto_rawDescGZIP(), []int{1}
}

func (x *TriggerEvent) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TriggerEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerEvent) GetData() map[string]*EventValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type StringArrayValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Array []*wrappers.StringValue `protobuf:"bytes,1,rep,name=array,proto3" json:"array,omitempty"`
}

func (x *StringArrayValue) Reset() {
	*x = StringArrayValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_api_v1beta1_event_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArrayValue) ProtoMessage() {}

func (x *StringArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_types_api_v1beta1_event_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArrayValue.ProtoReflect.Descriptor instead.
func (*StringArrayValue) Descriptor() ([]byte, []int) {
	return file_types_api_v1beta1_event_data_proto_rawDescGZIP(), []int{2}
}

func (x *StringArrayValue) GetArray() []*wrappers.StringValue {
	if x != nil {
		return x.Array
	}
	return nil
}

type IntArrayValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Array []*wrappers.Int32Value `protobuf:"bytes,1,rep,name=array,proto3" json:"array,omitempty"`
}

func (x *IntArrayValue) Reset() {
	*x = IntArrayValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_api_v1beta1_event_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntArrayValue) ProtoMessage() {}

func (x *IntArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_types_api_v1beta1_event_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntArrayValue.ProtoReflect.Descriptor instead.
func (*IntArrayValue) Descriptor() ([]byte, []int) {
	return file_types_api_v1beta1_event_data_proto_rawDescGZIP(), []int{3}
}

func (x *IntArrayValue) GetArray() []*wrappers.Int32Value {
	if x != nil {
		return x.Array
	}
	return nil
}

type UInt64ArrayValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Array []*wrappers.UInt64Value `protobuf:"bytes,1,rep,name=array,proto3" json:"array,omitempty"`
}

func (x *UInt64ArrayValue) Reset() {
	*x = UInt64ArrayValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_api_v1beta1_event_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt64ArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt64ArrayValue) ProtoMessage() {}

func (x *UInt64ArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_types_api_v1beta1_event_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt64ArrayValue.ProtoReflect.Descriptor instead.
func (*UInt64ArrayValue) Descriptor() ([]byte, []int) {
	return file_types_api_v1beta1_event_data_proto_rawDescGZIP(), []int{4}
}

func (x *UInt64ArrayValue) GetArray() []*wrappers.UInt64Value {
	if x != nil {
		return x.Array
	}
	return nil
}

type CredValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid            *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`
	Suid           *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=suid,proto3" json:"suid,omitempty"`
	Sgid           *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=sgid,proto3" json:"sgid,omitempty"`
	Euid           *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=euid,proto3" json:"euid,omitempty"`
	Egid           *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=egid,proto3" json:"egid,omitempty"`
	Fsuid          *wrappers.UInt32Value `protobuf:"bytes,7,opt,name=fsuid,proto3" json:"fsuid,omitempty"`
	Fsgid          *wrappers.UInt32Value `protobuf:"bytes,8,opt,name=fsgid,proto3" json:"fsgid,omitempty"`
	UserNamespace  *wrappers.UInt32Value `protobuf:"bytes,9,opt,name=user_namespace,json=userNamespace,proto3" json:"user_namespace,omitempty"`
	SecureBits     *wrappers.UInt32Value `protobuf:"bytes,10,opt,name=secure_bits,json=secureBits,proto3" json:"secure_bits,omitempty"`
	CapInheritable []Capability          `protobuf:"varint,11,rep,packed,name=cap_inheritable,json=capInheritable,proto3,enum=tracee.v1beta1.Capability" json:"cap_inheritable,omitempty"`
	CapPermitted   []Capability          `protobuf:"varint,12,rep,packed,name=cap_permitted,json=capPermitted,proto3,enum=tracee.v1beta1.Capability" json:"cap_permitted,omitempty"`
	CapEffective   []Capability          `protobuf:"varint,13,rep,packed,name=cap_effective,json=capEffective,proto3,enum=tracee.v1beta1.Capability" json:"cap_effective,omitempty"`
	CapBounding    []Capability          `protobuf:"varint,14,rep,packed,name=cap_bounding,json=capBounding,proto3,enum=tracee.v1beta1.Capability" json:"cap_bounding,omitempty"`
	CapAmbient     []Capability          `protobuf:"varint,15,rep,packed,name=cap_ambient,json=capAmbient,proto3,enum=tracee.v1beta1.Capability" json:"cap_ambient,omitempty"`
}

func (x *CredValue) Reset() {
	*x = CredValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_api_v1beta1_event_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredValue) ProtoMessage() {}

func (x *CredValue) ProtoReflect() protoreflect.Message {
	mi := &file_types_api_v1beta1_event_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredValue.ProtoReflect.Descriptor instead.
func (*CredValue) Descriptor() ([]byte, []int) {
	return file_types_api_v1beta1_event_data_proto_rawDescGZIP(), []int{5}
}

func (x *CredValue) GetUid() *wrappers.UInt32Value {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *CredValue) GetGid() *wrappers.UInt32Value {
	if x != nil {
		return x.Gid
	}
	return nil
}

func (x *CredValue) GetSuid() *wrappers.UInt32Value {
	if x != nil {
		return x.Suid
	}
	return nil
}

func (x *CredValue) GetSgid() *wrappers.UInt32Value {
	if x != nil {
		return x.Sgid
	}
	return nil
}

func (x *CredValue) GetEuid() *wrappers.UInt32Value {
	if x != nil {
		return x.Euid
	}
	return nil
}

func (x *CredValue) GetEgid() *wrappers.UInt32Value {
	if x != nil {
		return x.Egid
	}
	return nil
}

func (x *CredValue) GetFsuid() *wrappers.UInt32Value {
	if x != nil {
		return x.Fsuid
	}
	return nil
}

func (x *CredValue) GetFsgid() *wrappers.UInt32Value {
	if x != nil {
		return x.Fsgid
	}
	return nil
}

func (x *CredValue) GetUserNamespace() *wrappers.UInt32Value {
	if x != nil {
		return x.UserNamespace
	}
	return nil
}

func (x *CredValue) GetSecureBits() *wrappers.UInt32Value {
	if x != nil {
		return x.SecureBits
	}
	return nil
}

func (x *CredValue) GetCapInheritable() []Capability {
	if x != nil {
		return x.CapInheritable
	}
	return nil
}

func (x *CredValue) GetCapPermitted() []Capability {
	if x != nil {
		return x.CapPermitted
	}
	return nil
}

func (x *CredValue) GetCapEffective() []Capability {
	if x != nil {
		return x.CapEffective
	}
	return nil
}

func (x *CredValue) GetCapBounding() []Capability {
	if x != nil {
		return x.CapBounding
	}
	return nil
}

func (x *CredValue) GetCapAmbient() []Capability {
	if x != nil {
		return x.CapAmbient
	}
	return nil
}

type TimespecValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *wrappers.DoubleValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TimespecValue) Reset() {
	*x = TimespecValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_api_v1beta1_event_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimespecValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimespecValue) ProtoMessage() {}

func (x *TimespecValue) ProtoReflect() protoreflect.Message {
	mi := &file_types_api_v1beta1_event_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimespecValue.ProtoReflect.Descriptor instead.
func (*TimespecValue) Descriptor() ([]byte, []int) {
	return file_types_api_v1beta1_event_data_proto_rawDescGZIP(), []int{6}
}

func (x *TimespecValue) GetValue() *wrappers.DoubleValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type ArgsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args []*EventValue `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ArgsValue) Reset() {
	*x = ArgsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_api_v1beta1_event_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgsValue) ProtoMessage() {}

func (x *ArgsValue) ProtoReflect() protoreflect.Message {
	mi := &file_types_api_v1beta1_event_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgsValue.ProtoReflect.Descriptor instead.
func (*ArgsValue) Descriptor() ([]byte, []int) {
	return file_types_api_v1beta1_event_data_proto_rawDescGZIP(), []int{7}
}

func (x *ArgsValue) GetArgs() []*EventValue {
	if x != nil {
		return x.Args
	}
	return nil
}

type SockAddrValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaFamily     SaFamilyT `protobuf:"varint,1,opt,name=sa_family,json=saFamily,proto3,enum=tracee.v1beta1.SaFamilyT" json:"sa_family,omitempty"`
	SunPath      string    `protobuf:"bytes,2,opt,name=sun_path,json=sunPath,proto3" json:"sun_path,omitempty"`
	SinAddr      string    `protobuf:"bytes,3,opt,name=sin_addr,json=sinAddr,proto3" json:"sin_addr,omitempty"`
	SinPort      uint32    `protobuf:"varint,4,opt,name=sin_port,json=sinPort,proto3" json:"sin_port,omitempty"`
	Sin6Addr     string    `protobuf:"bytes,5,opt,name=sin6_addr,json=sin6Addr,proto3" json:"sin6_addr,omitempty"`
	Sin6Port     uint32    `protobuf:"varint,6,opt,name=sin6_port,json=sin6Port,proto3" json:"sin6_port,omitempty"`
	Sin6Flowinfo uint32    `protobuf:"varint,7,opt,name=sin6_flowinfo,json=sin6Flowinfo,proto3" json:"sin6_flowinfo,omitempty"`
	Sin6Scopeid  uint32    `protobuf:"varint,8,opt,name=sin6_scopeid,json=sin6Scopeid,proto3" json:"sin6_scopeid,omitempty"`
}

func (x *SockAddrValue) Reset() {
	*x = SockAddrValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_api_v1beta1_event_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SockAddrValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SockAddrValue) ProtoMessage() {}

func (x *SockAddrValue) ProtoReflect() protoreflect.Message {
	mi := &file_types_api_v1beta1_event_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SockAddrValue.ProtoReflect.Descriptor instead.
func (*SockAddrValue) Descriptor() ([]byte, []int) {
	return file_types_api_v1beta1_event_data_proto_rawDescGZIP(), []int{8}
}

func (x *SockAddrValue) GetSaFamily() SaFamilyT {
	if x != nil {
		return x.SaFamily
	}
	return SaFamilyT_SA_FAMILY_T_UNSPEC
}

func (x *SockAddrValue) GetSunPath() string {
	if x != nil {
		return x.SunPath
	}
	return ""
}

func (x *SockAddrValue) GetSinAddr() string {
	if x != nil {
		return x.SinAddr
	}
	return ""
}

func (x *SockAddrValue) GetSinPort() uint32 {
	if x != nil {
		return x.SinPort
	}
	return 0
}

func (x *SockAddrValue) GetSin6Addr() string {
	if x != nil {
		return x.Sin6Addr
	}
	return ""
}

func (x *SockAddrValue) GetSin6Port() uint32 {
	if x != nil {
		return x.Sin6Port
	}
	return 0
}

func (x *SockAddrValue) GetSin6Flowinfo() uint32 {
	if x != nil {
		return x.Sin6Flowinfo
	}
	return 0
}

func (x *SockAddrValue) GetSin6Scopeid() uint32 {
	if x != nil {
		return x.Sin6Scopeid
	}
	return 0
}

var File_types_api_v1beta1_event_data_proto protoreflect.FileDescriptor

var file_types_api_v1beta1_event_data_proto_rawDesc = []byte{
	0x0a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x06, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x36, 0x0a,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x36, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x36, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x45, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x45, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x6f, 0x63, 0x6b,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x63, 0x6b,
	0x41, 0x64, 0x64, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6f, 0x63,
	0x6b, 0x61, 0x64, 0x64, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x63, 0x72, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70,
	0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x53, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x22, 0x42, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x22, 0x46, 0x0a, 0x10, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x22, 0xe2, 0x06, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x67, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04,
	0x73, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x67, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x04, 0x65, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x65, 0x75, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x65, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x65, 0x67,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x73, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x66, 0x73, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x73, 0x67, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x66, 0x73, 0x67, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x69, 0x74, 0x73, 0x12, 0x43,
	0x0a, 0x0f, 0x63, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x62, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x41, 0x6d, 0x62, 0x69, 0x65, 0x6e,
	0x74, 0x22, 0x43, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3b, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x0d, 0x53, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x61, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x61, 0x5f, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x5f, 0x74, 0x52, 0x08, 0x73, 0x61, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x75, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x6e, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x6e, 0x36, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x69, 0x6e, 0x36, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x69, 0x6e, 0x36, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69,
	0x6e, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x36, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x36, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x69, 0x64, 0x2a, 0x4d, 0x0a, 0x0b, 0x73, 0x61, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x74, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x41, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x46, 0x5f,
	0x55, 0x4e, 0x49, 0x58, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45,
	0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x36, 0x10,
	0x0a, 0x2a, 0x85, 0x06, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x50, 0x5f, 0x43, 0x48, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x41, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x50, 0x5f, 0x44, 0x41, 0x43, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41,
	0x50, 0x5f, 0x46, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41,
	0x50, 0x5f, 0x46, 0x53, 0x45, 0x54, 0x49, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41,
	0x50, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x50, 0x5f,
	0x53, 0x45, 0x54, 0x47, 0x49, 0x44, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x50, 0x5f,
	0x53, 0x45, 0x54, 0x55, 0x49, 0x44, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x50, 0x5f,
	0x53, 0x45, 0x54, 0x50, 0x43, 0x41, 0x50, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x50,
	0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x50, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41,
	0x50, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x0c, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x41, 0x50, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x0d, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x41, 0x50, 0x5f, 0x49, 0x50, 0x43, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x0e,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x50, 0x5f, 0x49, 0x50, 0x43, 0x5f, 0x4f, 0x57, 0x4e, 0x45,
	0x52, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x50, 0x5f, 0x53,
	0x59, 0x53, 0x5f, 0x52, 0x41, 0x57, 0x49, 0x4f, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41,
	0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x43, 0x48, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x12, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x50, 0x54, 0x52, 0x41, 0x43, 0x45,
	0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x50, 0x41,
	0x43, 0x43, 0x54, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x50, 0x5f,
	0x53, 0x59, 0x53, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41,
	0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x4e, 0x49, 0x43, 0x45, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f,
	0x54, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x41, 0x50, 0x5f, 0x4d, 0x4b, 0x4e, 0x4f, 0x44, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x41, 0x50, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x1c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41,
	0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x1d, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x41, 0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x45,
	0x54, 0x46, 0x43, 0x41, 0x50, 0x10, 0x1f, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x50, 0x5f, 0x4d,
	0x41, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x20, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x41, 0x50, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x21,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x10, 0x22,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x50, 0x5f, 0x57, 0x41, 0x4b, 0x45, 0x5f, 0x41, 0x4c, 0x41,
	0x52, 0x4d, 0x10, 0x23, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x50, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x41, 0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x25, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4d, 0x4f, 0x4e, 0x10, 0x26,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x50, 0x5f, 0x42, 0x50, 0x46, 0x10, 0x27, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x41, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x28, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x2f, 0x61, 0x71, 0x75, 0x61, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_api_v1beta1_event_data_proto_rawDescOnce sync.Once
	file_types_api_v1beta1_event_data_proto_rawDescData = file_types_api_v1beta1_event_data_proto_rawDesc
)

func file_types_api_v1beta1_event_data_proto_rawDescGZIP() []byte {
	file_types_api_v1beta1_event_data_proto_rawDescOnce.Do(func() {
		file_types_api_v1beta1_event_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_api_v1beta1_event_data_proto_rawDescData)
	})
	return file_types_api_v1beta1_event_data_proto_rawDescData
}

var file_types_api_v1beta1_event_data_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_types_api_v1beta1_event_data_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_types_api_v1beta1_event_data_proto_goTypes = []interface{}{
	(SaFamilyT)(0),               // 0: tracee.v1beta1.sa_family_t
	(Capability)(0),              // 1: tracee.v1beta1.Capability
	(*EventValue)(nil),           // 2: tracee.v1beta1.EventValue
	(*TriggerEvent)(nil),         // 3: tracee.v1beta1.TriggerEvent
	(*StringArrayValue)(nil),     // 4: tracee.v1beta1.StringArrayValue
	(*IntArrayValue)(nil),        // 5: tracee.v1beta1.IntArrayValue
	(*UInt64ArrayValue)(nil),     // 6: tracee.v1beta1.UInt64ArrayValue
	(*CredValue)(nil),            // 7: tracee.v1beta1.CredValue
	(*TimespecValue)(nil),        // 8: tracee.v1beta1.TimespecValue
	(*ArgsValue)(nil),            // 9: tracee.v1beta1.ArgsValue
	(*SockAddrValue)(nil),        // 10: tracee.v1beta1.SockAddrValue
	nil,                          // 11: tracee.v1beta1.TriggerEvent.DataEntry
	(*wrappers.Int32Value)(nil),  // 12: google.protobuf.Int32Value
	(*wrappers.Int64Value)(nil),  // 13: google.protobuf.Int64Value
	(*wrappers.UInt32Value)(nil), // 14: google.protobuf.UInt32Value
	(*wrappers.UInt64Value)(nil), // 15: google.protobuf.UInt64Value
	(*wrappers.StringValue)(nil), // 16: google.protobuf.StringValue
	(*wrappers.BytesValue)(nil),  // 17: google.protobuf.BytesValue
	(*wrappers.BoolValue)(nil),   // 18: google.protobuf.BoolValue
	(*wrappers.DoubleValue)(nil), // 19: google.protobuf.DoubleValue
}
var file_types_api_v1beta1_event_data_proto_depIdxs = []int32{
	12, // 0: tracee.v1beta1.EventValue.int32:type_name -> google.protobuf.Int32Value
	13, // 1: tracee.v1beta1.EventValue.int64:type_name -> google.protobuf.Int64Value
	14, // 2: tracee.v1beta1.EventValue.uint32:type_name -> google.protobuf.UInt32Value
	15, // 3: tracee.v1beta1.EventValue.uint64:type_name -> google.protobuf.UInt64Value
	16, // 4: tracee.v1beta1.EventValue.string:type_name -> google.protobuf.StringValue
	17, // 5: tracee.v1beta1.EventValue.bytes:type_name -> google.protobuf.BytesValue
	18, // 6: tracee.v1beta1.EventValue.bool:type_name -> google.protobuf.BoolValue
	4,  // 7: tracee.v1beta1.EventValue.string_array:type_name -> tracee.v1beta1.StringArrayValue
	5,  // 8: tracee.v1beta1.EventValue.int_array:type_name -> tracee.v1beta1.IntArrayValue
	6,  // 9: tracee.v1beta1.EventValue.uint64_array:type_name -> tracee.v1beta1.UInt64ArrayValue
	10, // 10: tracee.v1beta1.EventValue.sockaddr:type_name -> tracee.v1beta1.SockAddrValue
	7,  // 11: tracee.v1beta1.EventValue.cred:type_name -> tracee.v1beta1.CredValue
	8,  // 12: tracee.v1beta1.EventValue.timespec:type_name -> tracee.v1beta1.TimespecValue
	9,  // 13: tracee.v1beta1.EventValue.args:type_name -> tracee.v1beta1.ArgsValue
	3,  // 14: tracee.v1beta1.EventValue.trigger_event:type_name -> tracee.v1beta1.TriggerEvent
	11, // 15: tracee.v1beta1.TriggerEvent.data:type_name -> tracee.v1beta1.TriggerEvent.DataEntry
	16, // 16: tracee.v1beta1.StringArrayValue.array:type_name -> google.protobuf.StringValue
	12, // 17: tracee.v1beta1.IntArrayValue.array:type_name -> google.protobuf.Int32Value
	15, // 18: tracee.v1beta1.UInt64ArrayValue.array:type_name -> google.protobuf.UInt64Value
	14, // 19: tracee.v1beta1.CredValue.uid:type_name -> google.protobuf.UInt32Value
	14, // 20: tracee.v1beta1.CredValue.gid:type_name -> google.protobuf.UInt32Value
	14, // 21: tracee.v1beta1.CredValue.suid:type_name -> google.protobuf.UInt32Value
	14, // 22: tracee.v1beta1.CredValue.sgid:type_name -> google.protobuf.UInt32Value
	14, // 23: tracee.v1beta1.CredValue.euid:type_name -> google.protobuf.UInt32Value
	14, // 24: tracee.v1beta1.CredValue.egid:type_name -> google.protobuf.UInt32Value
	14, // 25: tracee.v1beta1.CredValue.fsuid:type_name -> google.protobuf.UInt32Value
	14, // 26: tracee.v1beta1.CredValue.fsgid:type_name -> google.protobuf.UInt32Value
	14, // 27: tracee.v1beta1.CredValue.user_namespace:type_name -> google.protobuf.UInt32Value
	14, // 28: tracee.v1beta1.CredValue.secure_bits:type_name -> google.protobuf.UInt32Value
	1,  // 29: tracee.v1beta1.CredValue.cap_inheritable:type_name -> tracee.v1beta1.Capability
	1,  // 30: tracee.v1beta1.CredValue.cap_permitted:type_name -> tracee.v1beta1.Capability
	1,  // 31: tracee.v1beta1.CredValue.cap_effective:type_name -> tracee.v1beta1.Capability
	1,  // 32: tracee.v1beta1.CredValue.cap_bounding:type_name -> tracee.v1beta1.Capability
	1,  // 33: tracee.v1beta1.CredValue.cap_ambient:type_name -> tracee.v1beta1.Capability
	19, // 34: tracee.v1beta1.TimespecValue.value:type_name -> google.protobuf.DoubleValue
	2,  // 35: tracee.v1beta1.ArgsValue.args:type_name -> tracee.v1beta1.EventValue
	0,  // 36: tracee.v1beta1.SockAddrValue.sa_family:type_name -> tracee.v1beta1.sa_family_t
	2,  // 37: tracee.v1beta1.TriggerEvent.DataEntry.value:type_name -> tracee.v1beta1.EventValue
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_types_api_v1beta1_event_data_proto_init() }
func file_types_api_v1beta1_event_data_proto_init() {
	if File_types_api_v1beta1_event_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_api_v1beta1_event_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_api_v1beta1_event_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_api_v1beta1_event_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringArrayValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_api_v1beta1_event_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntArrayValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_api_v1beta1_event_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UInt64ArrayValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_api_v1beta1_event_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_api_v1beta1_event_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimespecValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_api_v1beta1_event_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_api_v1beta1_event_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SockAddrValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_api_v1beta1_event_data_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EventValue_Int32)(nil),
		(*EventValue_Int64)(nil),
		(*EventValue_Uint32)(nil),
		(*EventValue_Uint64)(nil),
		(*EventValue_String_)(nil),
		(*EventValue_Bytes)(nil),
		(*EventValue_Bool)(nil),
		(*EventValue_StringArray)(nil),
		(*EventValue_IntArray)(nil),
		(*EventValue_Uint64Array)(nil),
		(*EventValue_Sockaddr)(nil),
		(*EventValue_Cred)(nil),
		(*EventValue_Timespec)(nil),
		(*EventValue_Args)(nil),
		(*EventValue_TriggerEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_api_v1beta1_event_data_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_api_v1beta1_event_data_proto_goTypes,
		DependencyIndexes: file_types_api_v1beta1_event_data_proto_depIdxs,
		EnumInfos:         file_types_api_v1beta1_event_data_proto_enumTypes,
		MessageInfos:      file_types_api_v1beta1_event_data_proto_msgTypes,
	}.Build()
	File_types_api_v1beta1_event_data_proto = out.File
	file_types_api_v1beta1_event_data_proto_rawDesc = nil
	file_types_api_v1beta1_event_data_proto_goTypes = nil
	file_types_api_v1beta1_event_data_proto_depIdxs = nil
}
