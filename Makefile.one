.PHONY: all
all:
	$(MAKE) env
	$(MAKE) reqs
	$(MAKE) tracee-ebpf tracee-rules rules

# make

PARALLEL = $(shell $(CMD_GREP) -c ^processor /proc/cpuinfo)

NORM_MAKE = make -j$(PARALLEL)

MAKE = make -f Makefile.one
MAKEFLAGS += --no-print-directory
MAKEFLAGS += -j$(PARALLEL)

# tools

CMD_GIT ?= git
CMD_CLANG ?= clang
CMD_LLC ?= llc
CMD_STRIP ?= llvm-strip
CMD_RM ?= rm
CMD_INSTALL ?= install
CMD_MKDIR ?= mkdir
CMD_PKGCONFIG ?= pkg-config
CMD_GO ?= go
CMD_GREP ?= grep
CMD_OPA ?= opa # https://github.com/open-policy-agent/opa/releases/download/v0.33.1/opa_linux_amd64

check_%:
	@command -v $* >/dev/null || (echo "missing required tool $*" ; exit 1)

# libs

LIB_ELF ?= libelf
LIB_ZLIB ?= zlib

checklib_%:
	@$(CMD_PKGCONFIG) --silence-errors --validate $* 2>/dev/null || \
		(echo "missing lib $*" ; exit 1)

# version

LAST_GIT_TAG ?= $(shell $(CMD_GIT) describe --tags --match 'v*' 2>/dev/null)
VERSION ?= $(if $(RELEASE_TAG),$(RELEASE_TAG),$(LAST_GIT_TAG))

# environment

UNAME_M := $(shell uname -m)
UNAME_R := $(shell uname -r)

ifeq ($(UNAME_M),x86_64)
   ARCH = x86_64
   LINUX_ARCH = x86
   GO_ARCH = amd64
endif

ifeq ($(UNAME_M),aarch64)
   ARCH = arm64
   LINUX_ARCH = arm64
   GO_ARCH = arm64
endif

.PHONY: env
env:
	@echo ---------------------------------------
	@echo "Makefile Environment:"
	@echo ---------------------------------------
	@echo "PARALLEL                 $(PARALLEL)"
	@echo ---------------------------------------
	@echo "CMD_CLANG                $(CMD_CLANG)"
	@echo "CMD_GIT                  $(CMD_GIT)"
	@echo "CMD_GO                   $(CMD_GO)"
	@echo "CMD_GREP                 $(CMD_GREP)"
	@echo "CMD_INSTALL              $(CMD_INSTALL)"
	@echo "CMD_LLC                  $(CMD_LLC)"
	@echo "CMD_MKDIR                $(CMD_MKDIR)"
	@echo "CMD_OPA                  $(CMD_OPA)"
	@echo "CMD_PKGCONFIG            $(CMD_PKGCONFIG)"
	@echo "CMD_RM                   $(CMD_RM)"
	@echo "CMD_STRIP                $(CMD_STRIP)"
	@echo ---------------------------------------
	@echo "LIB_ELF                  $(LIB_ELF)"
	@echo "LIB_ZLIB                 $(LIB_ZLIB)"
	@echo ---------------------------------------
	@echo "VERSION                  $(VERSION)"
	@echo "LAST_GIT_TAG             $(LAST_GIT_TAG)"
	@echo "BPF_NOCORE_TAG           $(BPF_NOCORE_TAG)"
	@echo ---------------------------------------
	@echo "UNAME_M                  $(UNAME_M)"
	@echo "UNAME_R                  $(UNAME_R)"
	@echo "ARCH                     $(ARCH)"
	@echo "LINUX_ARCH               $(LINUX_ARCH)"
	@echo ---------------------------------------
	@echo "OUTPUT_DIR               $(OUTPUT_DIR)"
	@echo ---------------------------------------
	@echo "KERN_RELEASE             $(KERN_RELEASE)"
	@echo "KERN_BUILD_PATH          $(KERN_BUILD_PATH)"
	@echo "KERN_SRC_PATH            $(KERN_SRC_PATH)"
	@echo ---------------------------------------
	@echo "LIBBPF_CFLAGS            $(LIBBPF_CFLAGS)"
	@echo "LIBBPF_LDLAGS            $(LIBBPF_LDFLAGS)"
	@echo "LIBBPF_SRC               $(LIBBPF_SRC)"
	@echo ---------------------------------------
	@echo "STATIC                   $(STATIC)"
	@echo ---------------------------------------
	@echo "BPF_VCPU                 $(BPF_VCPU)"
	@echo "TRACEE_EBPF_OBJ_SRC      $(TRACEE_EBPF_OBJ_SRC)"
	@echo ---------------------------------------
	@echo "GO_ARCH                  $(GO_ARCH)"
	@echo "GO_TAGS_EBPF             $(GO_TAGS_EBPF)"
	@echo "GO_TAGS_RULES            $(GO_TAGS_RULES)"
	@echo ---------------------------------------
	@echo "CUSTOM_CGO_CFLAGS        $(CUSTOM_CGO_CFLAGS)"
	@echo "CUSTOM_CGO_LDFLAGS       $(CUSTOM_CGO_LDFLAGS)"
	@echo "CGO_EXT_LDFLAGS_EBPF     $(CGO_EXT_LDFLAGS_EBPF)"
	@echo "CGO_EXT_LDFLAGS_RULES    $(CGO_EXT_LDFLAGS_RULES)"
	@echo ---------------------------------------
	@echo "GO_ENV_EBPF              $(GO_ENV_EBPF)"
	@echo "GO_ENV_RULES             $(GO_ENV_RULES)"
	@echo ---------------------------------------
	@echo "TRACEE_EBPF_SRC          $(TRACEE_EBPF_SRC)"
	@echo ---------------------------------------
	@echo "GOSIGNATURES_DIR         $(GOSIGNATURES_DIR)"
	@echo "GOSIGNATURES_SRC         $(GOSIGNATURES_SRC)"
	@echo ---------------------------------------
	@echo "REGO_SIGNATURES_DIR      $(REGO_SIGNATURES_DIR)"
	@echo "REGO_SIGNATURES_SRC      $(REGO_SIGNATURES_SRC)"
	@echo ---------------------------------------

# usage

.PHONY: help
help:
	@echo ""
	@echo "$ make env                  # show makefile environment/variables"
	@echo "$ make reqs                 # verify build requirements"
	@echo ""
	@echo "# build"
	@echo ""
	@echo "$ make all                  # build tracee-ebpf, tracee-rules & rules"
	@echo "$ make bpf-core             # build ./dist/tracee.bpf.core.o"
	@echo "$ make bpf-nocore           # build ./dist/tracee.bpf.XXX.o"
	@echo "$ make tracee-ebpf          # build ./dist/tracee-ebpf"
	@echo "$ make tracee-rules         # build ./dist/tracee-rules"
	@echo "$ make rules                # build ./dist/rules"
	@echo ""
	@echo "# clean"
	@echo ""
	@echo "$ make clean                # wipe ./dist/"
	@echo "$ make clean-bpf-core       # wipe ./dist/tracee.bpf.core.o"
	@echo "$ make clean-bpf-nocore     # wipe ./dist/tracee.bpf.XXX.o"
	@echo "$ make clean-tracee-ebpf    # wipe ./dist/tracee-ebpf"
	@echo "$ make clean-tracee-rules   # wipe ./dist/tracee-rules"
	@echo "$ make clean-rules          # wipe ./dist/rules"
	@echo ""
	@echo "# test"
	@echo ""
	@echo "$ make test                 # run all go & opa tests"
	@echo "$ make test-tracee-ebpf     # go test tracee-ebpf"
	@echo "$ make test-tracee-rules    # go test tracee-rules"
	@echo "$ make test-rules           # opa test (tracee-rules)"
	@echo ""

# variables

BPF_VCPU = v2

# requirements

.PHONY: reqs_cmds
reqs_cmds: \
	check_$(CMD_GIT) \
	check_$(CMD_CLANG) \
	check_$(CMD_LLC) \
	check_$(CMD_STRIP) \
	check_$(CMD_RM) \
	check_$(CMD_GREP) \
	check_$(CMD_INSTALL) \
	check_$(CMD_MKDIR) \
	check_$(CMD_PKGCONFIG) \
	check_$(CMD_GO) \
	check_$(CMD_OPA)

.PHONY: reqs_libs
reqs_libs: \
	checklib_$(LIB_ELF) \
	checklib_$(LIB_ZLIB)

.PHONY: reqs
reqs:
	$(MAKE) reqs_cmds
	$(MAKE) reqs_libs

# output dir

OUTPUT_DIR = ./dist

$(OUTPUT_DIR):
	$(CMD_MKDIR) -p $@
	$(CMD_MKDIR) -p $@/libbpf
	$(CMD_MKDIR) -p $@/libbpf/obj

# bundle

.PHONY: $(OUTPUT_DIR)/tracee.bpf
$(OUTPUT_DIR)/tracee.bpf:
	$(CMD_MKDIR) -p $@
	$(CMD_INSTALL) -m 0640 ./3rdparty/include/* $@
	$(CMD_INSTALL) -m 0640 $(OUTPUT_DIR)/libbpf/bpf/*.h $@
	$(CMD_INSTALL) -m 0640 $(TRACEE_EBPF_OBJ_SRC) $@

#
# libbpf
#

LIBBPF_CFLAGS =
LIBBPF_LDLAGS =
LIBBPF_SRC = ./3rdparty/libbpf/src

$(OUTPUT_DIR)/libbpf/libbpf.a: $(LIBBPF_SRC) $(wildcard $(LIBBPF_SRC)/*.[ch]) | $(OUTPUT_DIR)
	CC="$(CMD_CLANG)" \
		CFLAGS="$(LIBBPF_CFLAGS)" \
		LD_FLAGS="$(LIBBPF_LDFLAGS)" \
		$(NORM_MAKE) -C $(LIBBPF_SRC) \
		BUILD_STATIC_ONLY=1 \
		DESTDIR=$(abspath ./$(OUTPUT_DIR)/libbpf/) \
		OBJDIR=$(abspath ./$(OUTPUT_DIR)/libbpf/obj) \
		INCLUDEDIR= LIBDIR= UAPIDIR= prefix= libdir= \
		install install_uapi_headers

$(LIBBPF_SRC):
ifeq ($(wildcard $@), )
	$(CMD_GIT) submodule update --init --recursive
endif

#
# non co-re ebpf
#

TRACEE_EBPF_OBJ_SRC = ./tracee-ebpf/tracee/tracee.bpf.c

KERN_RELEASE ?= $(UNAME_R)
KERN_BUILD_PATH ?= $(if $(KERN_HEADERS),$(KERN_HEADERS),/lib/modules/$(KERN_RELEASE)/build)
KERN_SRC_PATH ?= $(if $(KERN_HEADERS),$(KERN_HEADERS),$(if $(wildcard /lib/modules/$(KERN_RELEASE)/source),/lib/modules/$(KERN_RELEASE)/source,$(KERN_BUILD_PATH)))

BPF_NOCORE_TAG = $(subst .,_,$(KERN_RELEASE)).$(subst .,_,$(VERSION))

.PHONY: bpf-nocore
bpf-nocore: $(OUTPUT_DIR)/tracee.bpf.$(BPF_NOCORE_TAG).o

$(OUTPUT_DIR)/tracee.bpf.$(BPF_NOCORE_TAG).o: $(OUTPUT_DIR)/libbpf/libbpf.a \
	$(TRACEE_EBPF_OBJ_SRC)
	$(MAKE) $(OUTPUT_DIR)/tracee.bpf
	$(CMD_CLANG) -S -nostdinc \
		-D__TARGET_ARCH_$(LINUX_ARCH) \
		-D__BPF_TRACING__ \
		-D__KERNEL__ \
		-include $(KERN_SRC_PATH)/include/linux/kconfig.h \
		-I $(KERN_SRC_PATH)/arch/$(LINUX_ARCH)/include \
		-I $(KERN_SRC_PATH)/arch/$(LINUX_ARCH)/include/uapi \
		-I $(KERN_BUILD_PATH)/arch/$(LINUX_ARCH)/include/generated \
		-I $(KERN_BUILD_PATH)/arch/$(LINUX_ARCH)/include/generated/uapi \
		-I $(KERN_SRC_PATH)/include \
		-I $(KERN_BUILD_PATH)/include \
		-I $(KERN_SRC_PATH)/include/uapi \
		-I $(KERN_BUILD_PATH)/include/generated \
		-I $(KERN_BUILD_PATH)/include/generated/uapi \
		-I$(OUTPUT_DIR)/tracee.bpf \
		-Wunused \
		-Wall \
		-Wno-frame-address \
		-Wno-unused-value \
		-Wno-unknown-warning-option \
		-Wno-pragma-once-outside-header \
		-Wno-pointer-sign \
		-Wno-gnu-variable-sized-type-not-at-end \
		-Wno-deprecated-declarations \
		-Wno-compare-distinct-pointer-types \
		-Wno-address-of-packed-member \
		-fno-stack-protector \
		-fno-jump-tables \
		-fno-unwind-tables \
		-fno-asynchronous-unwind-tables \
		-xc -O2 -g -emit-llvm \
		-c $(TRACEE_EBPF_OBJ_SRC) \
		-o $(@:.o=.ll)
	$(CMD_LLC) \
		-march=bpf -mcpu=$(BPF_VCPU) \
		-filetype=obj \
		-o $@ \
		$(@:.o=.ll)
	$(CMD_RM) $(@:.o=.ll)

.PHONY: clean-bpf-nocore
clean-bpf-nocore:
	$(CMD_RM) -rf $(OUTPUT_DIR)/tracee.bpf.$(BPF_NOCORE_TAG).o

#
# co-re ebpf
#

TRACEE_EBPF_OBJ_CORE_HEADERS = $(shell find tracee-ebpf -name *.h)

.PHONY: bpf-core
bpf-core: $(OUTPUT_DIR)/tracee.bpf.core.o

$(OUTPUT_DIR)/tracee.bpf.core.o: $(OUTPUT_DIR)/libbpf/libbpf.a \
	$(TRACEE_EBPF_OBJ_SRC) \
	$(TRACEE_EBPF_OBJ_CORE_HEADERS)
	$(MAKE) $(OUTPUT_DIR)/tracee.bpf
	$(CMD_CLANG) \
		-D__TARGET_ARCH_$(LINUX_ARCH) \
		-D__BPF_TRACING__ \
		-DCORE \
		-I./tracee-ebpf/tracee/co-re/ \
		-I$(OUTPUT_DIR)/tracee.bpf \
		-target bpf \
		-O2 -g \
		-target bpf -march=bpf -mcpu=$(BPF_VCPU) \
		-c $(TRACEE_EBPF_OBJ_SRC) \
		-o $@

.PHONY: clean-bpf-core
clean-bpf-core:
	$(CMD_RM) -rf $(OUTPUT_DIR)/tracee.bpf.core.o

#
# tracee-ebpf
#

STATIC ?= 0
GO_TAGS_EBPF = core,ebpf
CGO_EXT_LDFLAGS_EBPF =

ifeq ($(STATIC), 1)
    CGO_EXT_LDFLAGS_EBPF += -static
    GO_TAGS_EBPF := $(GO_TAGS_EBPF),netgo
endif

CUSTOM_CGO_CFLAGS = "-I$(abspath $(OUTPUT_DIR)/libbpf)"
CUSTOM_CGO_LDFLAGS = "-lelf -lz $(abspath $(OUTPUT_DIR)/libbpf/libbpf.a)"

GO_ENV_EBPF =
GO_ENV_EBPF += GOOS=linux
GO_ENV_EBPF += CC=$(CMD_CLANG)
GO_ENV_EBPF += GOARCH=$(GO_ARCH)
GO_ENV_EBPF += CGO_CFLAGS=$(CUSTOM_CGO_CFLAGS)
GO_ENV_EBPF += CGO_LDFLAGS=$(CUSTOM_CGO_LDFLAGS)

TRACEE_EBPF_SRC=$(shell find ./tracee-ebpf/ -type f -name '*.go' ! -name '*_test.go')

.PHONY: tracee-ebpf
tracee-ebpf: $(OUTPUT_DIR)/tracee-ebpf

$(OUTPUT_DIR)/tracee-ebpf: $(OUTPUT_DIR)/tracee.bpf.core.o $(TRACEE_EBPF_SRC) ./embedded-ebpf.go
	$(GO_ENV_EBPF) $(CMD_GO) build \
		-tags $(GO_TAGS_EBPF) \
		-ldflags="-w \
			-extldflags \"$(CGO_EXT_LDFLAGS_EBPF)\" \
			-X main.version=\"$(VERSION)\" \
			" \
		-v -o $@ \
		./cmd/tracee-ebpf

.PHONY: clean-tracee-ebpf
clean-tracee-ebpf:
	$(CMD_RM) -rf $(OUTPUT_DIR)/tracee-ebpf

.PHONY: test-tracee-ebpf
test-tracee-ebpf: $(OUTPUT_DIR)/tracee.bpf.core.o
	$(GO_ENV_EBPF) $(CMD_GO) test \
		-tags $(GO_TAGS_EBPF) \
		-v \
		./tracee-ebpf/... \
		./cmd/tracee-ebpf/...

#
# tracee-rules
#

STATIC ?= 0
GO_TAGS_RULES =
CGO_EXT_LDFLAGS_RULES =

ifeq ($(STATIC), 1)
    CGO_EXT_LDFLAGS_RULES += -static
    GO_TAGS_RULES := netgo
endif

GO_ENV_RULES =
GO_ENV_RULES += GOOS=linux
GO_ENV_RULES += CC=$(CMD_CLANG)
GO_ENV_RULES += GOARCH=$(GO_ARCH)
GO_ENV_RULES += CGO_CFLAGS=
GO_ENV_RULES += CGO_LDFLAGS=

TRACEE_RULES_SRC=$(shell find ./tracee-rules/ -type f -name '*.go')

.PHONY: tracee-rules
tracee-rules: $(OUTPUT_DIR)/tracee-rules

$(OUTPUT_DIR)/tracee-rules: $(TRACEE_RULES_SRC) | $(OUTPUT_DIR)
	$(GO_ENV_RULES) $(CMD_GO) build \
		-tags $(GO_TAGS_RULES) \
		-ldflags="-w \
			-extldflags \"$(CGO_EXT_LDFLAGS_RULES)\" \
			" \
		-v -o $@ \
		./cmd/tracee-rules

.PHONY: clean-tracee-rules
clean-tracee-rules:
	$(CMD_RM) -rf $(OUTPUT_DIR)/tracee-rules

.PHONY: test-tracee-rules
test-tracee-rules:
	$(GO_ENV_RULES) $(CMD_GO) test \
		-tags $(GO_TAGS_RULES) \
		-v \
		./cmd/tracee-rules/... \
		./tracee-rules/...

# rules

GOSIGNATURES_DIR ?= signatures/golang
GOSIGNATURES_SRC :=	$(shell find $(GOSIGNATURES_DIR) \
			-type f \
			-name '*.go' \
			! -name '*_test.go' \
			! -path '$(GOSIGNATURES_DIR)/examples/*' \
			)

REGO_SIGNATURES_DIR ?= signatures/rego
REGO_SIGNATURES_SRC :=	$(shell find $(REGO_SIGNATURES_DIR) \
			-type f \
			-name '*.rego' \
			! -name '*_test.rego' \
			! -path '$(REGO_SIGNATURES_DIR)/examples/*' \
			)

.PHONY: rules
rules: $(OUTPUT_DIR)/rules

$(OUTPUT_DIR)/rules: $(GOSIGNATURES_SRC) $(REGO_SIGNATURES_SRC) | $(OUTPUT_DIR)
	mkdir -p $@
	$(GO_ENV_RULES) $(CMD_GO) build \
		--buildmode=plugin \
		-o $@/builtin.so \
		$(GOSIGNATURES_SRC)
	$(CMD_INSTALL) -m 0640 $(REGO_SIGNATURES_SRC) $@

.PHONY: clean-rules
clean-rules:
	$(CMD_RM) -rf $(OUTPUT_DIR)/rules

.PHONY: test-rules
test-rules:
	$(CMD_OPA) test $(REGO_SIGNATURES_DIR) --verbose

# test

.PHONY: test
test:
	$(MAKE) test-tracee-ebpf
	$(MAKE) test-tracee-rules
	$(MAKE) test-rules

# clean

.PHONY: clean
clean:
	$(CMD_RM) -rf $(OUTPUT_DIR)
