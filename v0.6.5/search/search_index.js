var __index = Promise.resolve({"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+","tags":false},"docs":[{"location":"","text":"<p></p> <p>   </p>","title":"Getting Started"},{"location":"#tracee-runtime-security-and-forensics-using-ebpf","text":"<p>Tracee is a Runtime Security and forensics tool for Linux. It is using Linux eBPF technology to trace your system and applications at runtime, and analyze collected events to detect suspicious behavioral patterns. It is delivered as a Docker image that monitors the OS and detects suspicious behavior based on a predefined set of behavioral patterns.</p> <p>Watch a quick video demo of Tracee:  </p> <p>Check out the Tracee video hub for more.</p>","title":"Tracee: Runtime Security and Forensics using eBPF"},{"location":"#quickstart","text":"<p>Before you proceed, make sure you follow the minimum requirements for running Tracee.</p> <p>If running on BTF enabled kernel:</p> <pre><code>docker run --name tracee --rm -it --pid=host --cgroupns=host --privileged \\\n  -v /tmp/tracee:/tmp/tracee \\\n  aquasec/tracee:0.6.5\n</code></pre>  <p>Note</p> <p>Running with BTF requires access to the kernel configuration file. Depending on the Linux distribution it can be in either <code>/proc/config.gz</code> (which docker mounts by default) or <code>/boot/config-$(uname -r)</code> (which must be mounted explicitly).</p>  <p>If running on BTF disabled kernel: <pre><code>docker run --name tracee --rm -it --pid=host --cgroupns=host --privileged \\\n  -v /tmp/tracee:/tmp/tracee \\\n  -v /lib/modules/:/lib/modules/:ro \\\n  -v /usr/src:/usr/src:ro \\\n  aquasec/tracee:0.6.5\n</code></pre></p>  <p>Note</p> <p>You may need to change the volume mounts for the kernel headers based on your setup. See Linux Headers section for more info.</p>  <p>This will run Tracee with default settings and start reporting detections to standard output. In order to simulate a suspicious behavior, you can run <code>strace ls</code> in another terminal, which will trigger the \"Anti-Debugging\" signature, which is loaded by default.</p>","title":"Quickstart"},{"location":"#trace","text":"<p>In some cases, you might want to leverage Tracee's eBPF event collection capabilities directly, without involving the detection engine. This might be useful for debugging/troubleshooting/analysis/research/education. In this case you can run Tracee with the <code>trace</code> sub-command, which will start dumping raw data directly into standard output. There are many configurations and options available so you can control exactly what is being collected and how. see the Documentation or add the <code>--help</code> flag for more.</p>","title":"Trace"},{"location":"#components","text":"<p>Tracee is composed of the following sub-projects, which are hosted in the aquasecurity/tracee repository:</p> <ul> <li>Tracee-eBPF - Linux Tracing and Forensics using eBPF</li> <li>Tracee-Rules - Runtime Security Detection Engine</li> </ul>  <p>Tracee is an Aqua Security open source project. Learn about our open source work and portfolio here. Join the community, and talk to us about any matter in GitHub Discussion or Slack.</p>","title":"Components"},{"location":"architecture/","text":"","title":"Architecture"},{"location":"architecture/#high-level-overview","text":"<p></p>","title":"High level overview"},{"location":"config/","text":"<p>By default, rules are discovered from the <code>rules</code> directory next to the <code>tracee-rules</code> executable binary (you can specify a different location with the <code>--rules-dir</code> flag). By default, all discovered rules will be loaded unless specific rules are selected using the <code>--rules</code> flag.</p>","title":"Configuration Options"},{"location":"faq/","text":"","title":"FAQ - Frequently Asked Questions"},{"location":"faq/#secure-tracing","text":"<p>When Tracee-eBPF reads information from user programs it is subject to a race condition where the user program might be able to change the arguments after Tracee has read them. For example, a program invoked <code>execve(\"/bin/ls\", NULL, 0)</code>, Tracee picked that up and will report that, then the program changed the first argument from <code>/bin/ls</code> to <code>/bin/bash</code>, and this is what the kernel will execute. To mitigate this, Tracee also provides \"LSM\" (Linux Security Module) based events, for example, the <code>bprm_check</code> event which can be reported by Tracee and cross-referenced with the reported regular syscall event.</p>","title":"Secure tracing"},{"location":"integrations/","text":"<p>When a detection is made by any of the signatures, it will always be printed to stdout. You can customize the output format using a go template:</p> <pre><code>tracee-rules --output-template /path/to/my.tmpl\n</code></pre> <p>In addition, Tracee can notify a web service when a detection is made using a custom webhook:</p> <pre><code>tracee-rules --webhook http://my.webhook/endpoint \\\n  --webhook-template /path/to/my.tmpl \\\n  --webhook-content-type application/json\n</code></pre>","title":"Integrations"},{"location":"integrations/#included-go-templates","text":"<p>The following Go templates are included in the Tracee container image and are available for use under the <code>/tracee/templates/</code> directory in the container:</p>    File name Description Content-Type Source     falcosidekick.tmpl For compatibility with falcosidekick <code>application/json</code> source   rawjson.tmpl Dumps the Finding object as raw JSON <code>application/json</code> source","title":"Included Go templates"},{"location":"integrations/#go-template-authoring","text":"<p>When authoring a Go template for either stdout or webhook, you have Tracee's <code>types.Finding</code> struct as the data source:</p> <pre><code>//Finding is the main output of a signature. It represents a match result for the signature business logic\ntype Finding struct {\n    SigMetadata SignatureMetadata //information about the signature that made the detection\n    Context     Event //the raw event that triggered the detection\n    Data        map[string]interface{} //detection specific information\n}\n</code></pre> <p>The Go template can utilize helper functions from Sprig.</p> <p>For example templates, see tracee/cmd/tracee-rules/templates.</p>","title":"Go Template Authoring"},{"location":"integrations/#prometheus","text":"<p>Tracee is enabled for prometheus scraping by default. Scraping can be done through the following URLs:1 1. <code>tracee-ebpf</code> can be scraped through <code>:3366/metrics</code> 2. <code>tracee-rules</code> can be scraped through <code>:4466/metrics</code></p> <p>The metrics addresses can be changed through running with the <code>metrics</code> and <code>metrics-addr</code> in the cli.</p>","title":"Prometheus"},{"location":"integrations/#examples","text":"","title":"Examples"},{"location":"integrations/#raw-json-stdout","text":"<p>The following example configures Tracee to output detections to stdout as raw JSON:</p> <pre><code>docker run --rm -it --privileged --pid=host --cgroupns=host \\\n  -v /lib/modules/:/lib/modules/:ro \\\n  -v /usr/src:/usr/src:ro \\\n  -v /tmp/tracee:/tmp/tracee \\\n  aquasec/tracee:0.6.5 \\\n  --output-template /tracee/templates/rawjson.tmpl\n</code></pre>","title":"Raw JSON stdout"},{"location":"integrations/#falcosidekick-webhook","text":"<p>falcosidekick is a useful webhook server that can be configured to connect to various \"outputs\" such as: Slack, Mattermost, Teams, Datadog, Prometheus, StatsD, Email, Elasticsearch, Loki, PagerDuty, OpsGenie, and many more.</p> <p>To use Tracee with falcosidekick:</p> <ol> <li>Obtain connection credentials to the system you want to integrate with.<ol> <li>Consult the system's documentation and look for how to configure an incoming webhook.</li> </ol> </li> <li>Start the falcosidekick container, configured with the obtained output credentials:<ol> <li>See the falcosidekick Readme for full documentation.</li> </ol> </li> <li>Start Tracee while configuring it to post detections to the falcosidekick endpoint.<ol> <li>If using Docker, you can use the simple link flag to allow the containers to communicate</li> <li>Use the webhook flag to point to the falcosidekick container's endpoint</li> <li>Tracee ships with a built-in template for falcosidekick</li> </ol> </li> </ol> <pre><code># Start falcosidekick configured to post to Slack\ndocker run --name falcosidekick -p 2801:2801 \\\n  -e SLACK_WEBHOOKURL=https://hooks.slack.com/services/XXX/YYY/ZZZ \\\n  falcosecurity/falcosidekick\n\n# Start Tracee, linking it to the falcosidekick container, and configuring it to call it on detections\ndocker run --name tracee --rm -it --privileged --pid=host --cgroupns=host \\\n  -v /lib/modules/:/lib/modules/:ro \\\n  -v /usr/src:/usr/src:ro \\\n  -v /tmp/tracee:/tmp/tracee \\\n  --link falcosidekick aquasec/tracee:0.6.5 \\\n  --webhook-template /tracee/templates/falcosidekick.tmpl \\\n  --webhook-content-type application/json \\\n  --webhook http://FALCOSIDEKICK:2801\n</code></pre>","title":"falcosidekick webhook"},{"location":"rules-authoring/","text":"<p>Tracee supports authoring rules in Golang) or in Rego (the language of Open Policy Agent).</p>","title":"Authoring Rules"},{"location":"rules-authoring/#rego-rules","text":"<p>Create a <code>.rego</code> file in the rules directory that has the following Rego Rules (in this context rules are Rego's language constructs):</p> <ol> <li><code>__rego_metadoc__</code>: A document rule that defines the rule's metadata.</li> <li><code>tracee_selected_events</code>: A set rule that defines the event selectors.</li> <li><code>tracee_match</code>: A boolean or a document rule that defines the logic of the signature. If bool is \"returned\", a true evaluation will generate a Finding with no data. If a document is \"returned\", any non-empty evaluation will generate a Finding with the returned document as the Finding's \"Data\".</li> </ol> <p>See signatures/rego for example Rego signatures.</p>","title":"Rego Rules"},{"location":"rules-authoring/#golang-rules","text":"<p>Tracee exports a <code>Signature</code> interface that you can implement. We use Go Plugins to load Go signatures.</p> <ol> <li>Create a new Go project with a package <code>main</code>.</li> <li>Import <code>github.com/aquasecurity/tracee/types</code> and implement the <code>types.Signature</code> interface.</li> <li>Export a package level variable called <code>ExportedSignatures</code> of type <code>[]types.Signature</code> that declares the implemented signature (or more) that your package exports.</li> <li>Compile using goplugins <code>go build -buildmode=plugin -o yourplugin.so yoursource.go</code>.</li> <li>Place the resulting compiled file in the rules directory, and it will be automatically discovered by Tracee.</li> </ol> <p>See signatures/golang/examples for example Go signatures.</p>","title":"Golang Rules"},{"location":"rules-index/","text":"<p>To view the list of available rules, run Tracee with the <code>--list</code> flag.</p> <p>We are currently working on creating a library of behavioral signature detections. Currently, the following are available:</p>    Name Description Tags     Standard Input/Output Over Socket Redirection of process's standard input/output to socket \"linux\", \"container\"   Anti-Debugging Process uses anti-debugging technique to block debugger \"linux\", \"container\"   Code injection Possible code injection into another process \"linux\", \"container\"   Dynamic Code Loading Writing to executable allocated memory region \"linux\", \"container\"   Fileless Execution Executing a process from memory, without a file in the disk \"linux\", \"container\"   kernel module loading Attempt to load a kernel module detection \"linux\", \"container\"   LD_PRELOAD Usage of LD_PRELOAD to allow hooks on process \"linux\", \"container\"   Container Host Mount Mounting of the host filesystem into a container \"container\"   Dropped Executable Creation or dropping of an executable file from a container at runtime \"linux\", \"container\"   Illegitimate Shell Spawning of a shell program \"linux\", \"container\"   K8S API Connection Connection to the Kubernetes cluster API server \"container\"   K8S Service Account Use Reading of the Kubernetes service account token file in a container \"container\"   K8S TLS Certificate Theft Accessing of the TLS certificate used for secure communication between Kubernetes components \"linux\", \"container\"","title":"Available Rules"},{"location":"building/containers/","text":"<p>These instructions are meant to describe how to build the official tracee containers images, instead of just downloading them from the Docker Hub. If you would like to have a local building building and execution environment, read this instead.</p>","title":"Creating Tracee container images"},{"location":"building/containers/#generating-tracee-containers","text":"<p>Tracee containers come in 2 flavors:</p> <ul> <li><code>tracee:latest</code> (CO-RE enabled embedded tracee bpf object)</li> </ul> <pre><code>$ BTFHUB={0,1} make -f builder/Makefile.tracee-container build-tracee\n</code></pre> <ul> <li><code>tracee:full</code> (Contains tracee bpf source code and compiler tool chain) </li> </ul> <pre><code>$ BTFHUB={0,1} make -f builder/Makefile.tracee-container build-tracee-full\n</code></pre>  <p>Note: BTFHUB=1 adds support to some older kernels so user doesn't need to build specific non CO-RE eBPF objects to them.</p>","title":"Generating Tracee containers"},{"location":"building/containers/#running-tracee-containers","text":"<p>Containers are supposed to be executed through docker cmdline directly, from the official built images. Nevertheless, during the image building process, it may be usefull to execute them with correct arguments to see if they're working.</p> <p>User may execute built containers through <code>Makefile.tracee-container</code> file with the \"run\" targets:</p> <ul> <li>To run the <code>tracee:latest</code> container:</li> </ul> <pre><code>$ make -f builder/Makefile.tracee-container run-tracee\n</code></pre> <ul> <li>To run the <code>tracee:full</code> container:</li> </ul> <pre><code>$ make -f builder/Makefile.tracee-container run-tracee-full\n</code></pre>  <p>Note: tracee-ebpf arguments are passed through the ARG=\"\" variable</p> <pre><code>$ make -f builder/Makefile.tracee-container run-tracee ARG=\"--help\"\n</code></pre>","title":"Running Tracee containers"},{"location":"building/containers/#running-tracee-ebpf-only","text":"<p>Generated containers allow user to run tracee, as a complete security solution (tracee-ebpf passes events to tracee-rules &amp; tracee-rules process events based on existing security signatures) OR to run tracee-ebpf only, as an introspection tool.</p> <ul> <li>To run the <code>tracee:latest</code> container with <code>tracee-ebpf</code> only:</li> </ul> <pre><code>$ make -f builder/Makefile.tracee-container run-tracee-ebpf\n</code></pre> <ul> <li>To run the <code>tracee:full</code> container with <code>tracee-ebpf</code> only:</li> </ul> <pre><code>$ make -f builder/Makefile.tracee-container run-tracee-ebpf-full\n</code></pre>  <p>Note: tracee-ebpf arguments are passed through the ARG=\"\" variable</p> <pre><code>$ make -f builder/Makefile.tracee-container run-tracee-ebpf ARG=\"--debug\"\n</code></pre>","title":"Running Tracee-eBPF only"},{"location":"building/environment/","text":"<p>These instructions are meant to describe how to create a local building and execution environment. If you would like to build tracee container(s) image(s), read this instead.</p>","title":"Creating a local building environment"},{"location":"building/environment/#quick-steps-impatient-readers","text":"<ul> <li>Build and execute <code>tracee-ebpf</code>:</li> </ul> <pre><code>$ make -f builder/Makefile.tracee-make alpine-prepare\n$ make -f builder/Makefile.tracee-make alpine-shell\n\ntracee@f64bb4a2f0b1[/tracee]$ make clean\ntracee@f64bb4a2f0b1[/tracee]$ make tracee-ebpf\ntracee@f64bb4a2f0b1[/tracee]$ sudo ./dist/tracee-ebpf \\\n  -o option:parse-arguments \\\n  --trace comm=bash \\\n  --trace follow \\\n  --trace event!='sched*'\n</code></pre> <p>Now, in your host's bash shell, execute a command. You will see all events (except scheduler ones) being printed, in \"table format\", to stdout.</p> <ul> <li>Build and execute <code>tracee</code>:</li> </ul> <pre><code>$ make -f builder/Makefile.tracee-make alpine-prepare\n$ make -f builder/Makefile.tracee-make alpine-shell\n\ntracee@f64bb4a2f0b1[/tracee]$ make clean\ntracee@f64bb4a2f0b1[/tracee]$ make all\ntracee@f64bb4a2f0b1[/tracee]$ sudo ./dist/tracee-ebpf \\\n  -o format:json \\\n  -o option:parse-arguments \\\n  --trace comm=bash \\\n  --trace follow \\\n  --trace event!='sched*' | \\\n  ./dist/tracee-rules \\\n  --input-tracee file:stdin \\\n  --input-tracee format:json\n</code></pre> <p>Now, in your host's bash shell, execute: <code>sudo strace /bin/ls</code> and observe tracee warning you about a possible risk (with its Anti-Debugging signature).</p> <p>Now, for more patient readers ...</p>","title":"Quick steps (impatient readers)"},{"location":"building/environment/#how-to-build-and-use-the-environment","text":"<p>In order to have a controlled building environment for tracee, tracee provides a <code>Makefile.tracee-make</code> file that allows you to create and use docker controlled environments to build &amp; test <code>tracee-ebpf</code> and <code>tracee-rules</code>.</p> <p>Two different environments are maintained for building tracee:</p> <ul> <li>Alpine</li> <li>Ubuntu</li> </ul> <p>The reason for that is that Alpine Linux is based in the musl C standard library, while the Ubuntu Linux uses glibc. By supporting both building environments we can always be sure that the project builds (and executes) correctly in both environments.</p> <p>Be aware: locally created containers, called <code>alpine-tracee-make</code> or <code>ubuntu-tracee-make</code>, share the host source code directory. This means that, if you build tracee binaries using <code>alpine</code> distribution, binaries <code>tracee-ebpf</code> and <code>tracee-rules</code> might not be compatible to the Linux distribution from your host OS.</p>","title":"How to build and use the environment"},{"location":"building/environment/#creating-a-builder-environment","text":"<p>To create an alpine-tracee-make container:</p> <pre><code>$ make -f builder/Makefile.tracee-make alpine-prepare\n</code></pre> <p>To create an ubuntu-tracee-make container:</p> <pre><code>$ make -f builder/Makefile.tracee-make ubuntu-prepare\n</code></pre>","title":"Creating a builder environment"},{"location":"building/environment/#executing-a-builder-environment","text":"<p>To execute an alpine-tracee-make shell:</p> <pre><code>$ make -f builder/Makefile.tracee-make alpine-shell\n</code></pre> <p>To execute an ubuntu-tracee-make shell:</p> <pre><code>$ make -f builder/Makefile.tracee-make ubuntu-shell\n</code></pre>","title":"Executing a builder environment"},{"location":"building/environment/#using-build-environment-as-a-make-replacement","text":"<p>Instead of executing a builder shell, you may use <code>alpine-tracee-make</code>, or <code>ubuntu-tracee-make</code>, as a replacement for the <code>make</code> command:</p> <pre><code>$ make -f builder/Makefile.tracee-make ubuntu-prepare\n$ make -f builder/Makefile.tracee-make ubuntu-make ARG=\"help\"\n$ make -f builder/Makefile.tracee-make ubuntu-make ARG=\"clean\"\n$ make -f builder/Makefile.tracee-make ubuntu-make ARG=\"bpf-core\"\n$ make -f builder/Makefile.tracee-make ubuntu-make ARG=\"tracee-ebpf\"\n$ make -f builder/Makefile.tracee-make ubuntu-make ARG=\"all\"\n</code></pre> <p>And, after the compilation, run the commands directly in your host:</p> <pre><code>$ sudo ./dist/tracee-ebpf \\\n    -o option:parse-arguments \\\n    --trace comm=bash \\\n    --trace follow \\\n    --trace event!='sched*'\n</code></pre>  <p>Note: the generated binary must be compatible to your host (depending on glibc version, for example).</p>  <p>If you don't want to depend on host's libraries versions, or if you are using the <code>alpine-tracee-make</code> container as a replacement for <code>make</code>, and your host is not an Alpine Linux, then you may set STATIC=1 variable so you can run compiled binaries in your host:</p> <pre><code>$ make -f builder/Makefile.tracee-make alpine-prepare\n$ make -f builder/Makefile.tracee-make alpine-make ARG=\"help\"\n$ STATIC=1 make -f builder/Makefile.tracee-make alpine-make ARG=\"all\"\n</code></pre> <p>and execute the static binary from your host:</p> <pre><code>$ ldd dist/tracee-ebpf\n    not a dynamic executable\n</code></pre>  <p>Warning: compiling <code>tracee-rules</code> with STATIC=1 won't allow you to use golang based signatures:</p> <pre><code>2021/12/13 13:27:21 error opening plugin /tracee/dist/rules/builtin.so:\nplugin.Open(\"/tracee/dist/rules/builtin.so\"): Dynamic loading not supported\n</code></pre>","title":"Using build environment as a make replacement"},{"location":"building/headers/","text":"<p>In order to compile the kernel version specific eBPF object, Tracee needs some of the Linux kernel headers. Depending on your Linux distribution, there may be different ways to obtain them.  </p> <ul> <li>On Ubuntu/Debian/Arch/Manjaro install the <code>linux-headers</code> package.</li> <li>On CentOS/Fedora install the <code>kernel-headers</code> and <code>kernel-devel</code> packages.</li> <li>On Docker for Mac follow the following guidelines</li> </ul> <p>Normally the files will be installed in <code>/lib/modules/${kernel_version}/build</code> which is where Tracee expects them. If you have the headers elsewhere, you can set the <code>KERN_HEADERS</code> environment variable with the correct location.</p>  <p>Note</p> <p>It's important that the kernel headers match the exact version of the kernel you are running. To check the current kernel version, run the command <code>uname -r</code>. To install a specific kernel headers version append the version to the package name: <code>linux-headers-$(uname -r)</code>.</p>   <p>Warning</p> <p>More often than not the kernel headers files contains filesystem links to other files in other directories. Therefore, when passing the kernel headers to Tracee docker container, make sure all the necessary directories are mounted. This is why the quickstart example mounts <code>/usr/src</code> in addition to <code>/lib/modules</code>.</p>","title":"Linux Headers"},{"location":"building/nocore-ebpf/","text":"<p>These instructions are meant to describe how to build tracee's eBPF object for your running kernel when it does not support CO-RE.</p>","title":"Running non CO-RE Tracee"},{"location":"building/nocore-ebpf/#introduction","text":"<p>Tracee consists of:</p> <ul> <li>tracee-ebpf:</li> <li>Userspace agent - handles lifecycle of ebpf programs, receives events from eBPF programs</li> <li> <p>eBPF code - programs loaded into the kernel for data collection</p> </li> <li> <p>tracee-rules:</p> </li> <li>OPA signatures</li> <li>golang signatures</li> </ul> <p><code>tracee-ebpf</code> leverages Linux's eBPF technology, which requires some kernel level integration. Tracee supports two eBPF integration modes:</p> <ul> <li>CO-RE: a portable mode, which will seamlessly run on all supported envs.</li> </ul> <p>The portable option, also known as CO-RE (compile once, run everywhere),   requires that your operating system support BTF   (BPF Type Format). Tracee will automatically run in CO-RE mode if it detects   that the environment supports it. The <code>tracee-ebpf</code> binary has a CO-RE eBPF   object embedded on it. When executed, it loads the CO-RE eBPF object into the   kernel and each of its object's eBPF programs are executed when triggered by   kernel probes, or tracepoints, for example.</p> <p>This mode requires no intervention or preparation on your side.  You can   manually detect if your environments supports it by checking if the following   file exists on your machine: <code>/sys/kernel/btf/vmlinux</code>.</p> <ul> <li>non CO-RE: a kernel-specific mode, requiring eBPF object to be built.</li> </ul> <p>If you want to run Tracee on a host without BTF support, there are 2 options:</p> <ol> <li> <p>to use BTF files from BTFhub and      provide the TRACEE_BTF_FILE environment variable pointing to the BTF file      of your running kernel.</p> </li> <li> <p>to have <code>../../Makefile</code> build and install the eBPF object for you      (instructions in this file). This will depend on having clang and a kernel      version specific kernel-header package.</p> </li> </ol>","title":"Introduction"},{"location":"building/nocore-ebpf/#the-need-for-a-non-co-re-ebpf-object-build","text":"<p>Until recently, <code>tracee-ebpf</code> was capable of building a non CO-RE (portable) eBPF object when the running kernel did not support BTF, one of the kernel features needed for eBPF portability among different kernels.</p> <p>That now is changed:</p> <p>It is the user responsibility to have the non CO-RE eBPF object correctly placed in <code>/tmp/tracee</code> directory. Tracee will load it, instead of loading the embedded CO-RE eBPF object, as a last resource if there is no:</p> <ol> <li>BTF file available in running kernel (<code>/sys/kernel/btf/vmlinux</code>).</li> <li>BTF file pointed by <code>TRACEE_BTF_FILE</code> environment variable.</li> <li>BTF file embedded into \"tracee-ebpf\" binary (BTFhub).</li> </ol>  <p>NOTE: Installing the non CO-RE eBPF object does not mean you will run <code>tracee-ebpf</code> with it by default. It only means that if your running kernel doesn't support CO-RE, it will be loaded. To force <code>tracee-ebpf</code> to always run non CO-RE eBPF object you have to specific TRACEE_BPF_FILE= environment variable.</p>  <p>Reasoning behind this change</p> <p>With BTFhub, it is now possible to run <code>tracee-ebpf</code> without compiling the eBPF object to each different kernel, thus removing the automatic builds (although the functionality is still kept through the Makefile).</p>","title":"The need for a non CO-RE eBPF object build"},{"location":"building/nocore-ebpf/#install-the-non-co-re-ebpf-object","text":"<p>By running:</p> <pre><code>$ make clean\n$ make all\n$ make install-bpf-nocore\n</code></pre> <p>make installs an eBPF object file under <code>/tmp/tracee</code> for the current running kernel. Example:</p> <pre><code>$ find /tmp/tracee\n/tmp/tracee\n/tmp/tracee/tracee.bpf.5_4_0-91-generic.v0_6_5-80-ge723a22.o\n</code></pre>  <p>NOTE: In this example, the Ubuntu Focal kernel 5.4.0-91-generic supports CO-RE, but the kernel does not have embedded BTF information available. In cases like this, the user may opt to either use BTFhub btf files (with an environment variable TRACEE_BTF_FILE=.../5.4.0-91-generic.btf) OR to install the non CO-RE eBPF object and run <code>tracee-ebpf</code> command without an env variable.</p>","title":"Install the non CO-RE eBPF object"},{"location":"building/nocore-ebpf/#run-tracee-ebpf-with-the-non-co-re-ebpf-object","text":"<p>If you install the non CO-RE eBPF object and run <code>tracee-ebpf</code> in an environment that needs it, then the debug output will look like:</p> <pre><code>$ sudo ./dist/tracee-ebpf --debug --trace 'event!=sched*'\n\nOSInfo: ARCH: x86_64\nOSInfo: VERSION: \"20.04.3 LTS (Focal Fossa)\"\nOSInfo: ID: ubuntu\nOSInfo: ID_LIKE: debian\nOSInfo: PRETTY_NAME: \"Ubuntu 20.04.3 LTS\"\nOSInfo: VERSION_ID: \"20.04\"\nOSInfo: VERSION_CODENAME: focal\nOSInfo: KERNEL_RELEASE: 5.8.0-63-generic\nBTF: bpfenv = false, btfenv = false, vmlinux = false\nBPF: no BTF file was found or provided, trying non CO-RE eBPF at\n     /tmp/tracee/tracee.bpf.5_8_0-63-generic.v0_6_5-20-g3353501.o\n</code></pre> <p>You can see that <code>tracee-ebpf</code> was picked the file from <code>/tmp/tracee</code> directory.</p> <p>One way of forcing <code>tracee-ebpf</code> to use non CO-RE eBPF object, even in a kernel that supports CO-RE, is by setting the <code>TRACEE_BPF_FILE</code> environment, like this:</p> <pre><code>$ sudo TRACEE_BPF_FILE=/tmp/tracee/tracee.bpf.5_4_0-91-generic.v0_6_5-80-ge723a22.o ./dist/tracee-ebpf --debug -o option:parse-arguments --trace comm=bash --trace follow --trace event!='sched*'\nOSInfo: PRETTY_NAME: \"Ubuntu 20.04.3 LTS\"\nOSInfo: VERSION_ID: \"20.04\"\nOSInfo: VERSION_CODENAME: focal\nOSInfo: KERNEL_RELEASE: 5.4.0-91-generic\nOSInfo: ARCH: x86_64\nOSInfo: VERSION: \"20.04.3 LTS (Focal Fossa)\"\nOSInfo: ID: ubuntu\nOSInfo: ID_LIKE: debian\nBTF: bpfenv = true, btfenv = false, vmlinux = false\nBPF: using BPF object from environment: /tmp/tracee/tracee.bpf.5_4_0-91-generic.v0_6_5-80-ge723a22.o\nTIME             UID    COMM             PID     TID     RET              EVENT                ARGS\n...\n</code></pre>","title":"Run <code>tracee-ebpf</code> with the non CO-RE eBPF object"},{"location":"building/nocore-ebpf/#use-the-building-environment","text":"<p>If you're willing to generate the non CO-RE eBPF object using the <code>tracee-make</code> building environment container, you're able to by doing:</p> <pre><code>$ make -f builder/Makefile.tracee-make alpine-prepare\n$ make -f builder/Makefile.tracee-make alpine-shell\n</code></pre> <p>or</p> <pre><code>$ make -f builder/Makefile.tracee-make ubuntu-prepare\n$ make -f builder/Makefile.tracee-make ubuntu-shell\n</code></pre> <p>and then, inside the docker container:</p> <pre><code>tracee@f65bab137305[/tracee]$ make clean\ntracee@f65bab137305[/tracee]$ make tracee-ebpf\ntracee@f65bab137305[/tracee]$ make install-bpf-nocore\n\ntracee@f65bab137305[/tracee]$ sudo ./dist/tracee-ebpf --debug --trace 'event!=sched*'\nKConfig: warning: could not check enabled kconfig features\n(could not read /boot/config-5.8.0-63-generic: ...)\nKConfig: warning: assuming kconfig values, might have unexpected behavior\nOSInfo: KERNEL_RELEASE: 5.8.0-63-generic\nOSInfo: ARCH: x86_64\nOSInfo: VERSION: \"21.04 (Hirsute Hippo)\"\nOSInfo: ID: ubuntu\nOSInfo: ID_LIKE: debian\nOSInfo: PRETTY_NAME: \"Ubuntu 21.04\"\nOSInfo: VERSION_ID: \"21.04\"\nOSInfo: VERSION_CODENAME: hirsute\nBTF: bpfenv = false, btfenv = false, vmlinux = false\nBPF: no BTF file was found or provided\nBPF: trying non CO-RE eBPF at /tmp/tracee/tracee.bpf.5_8_0-63-generic.v0_6_5-20-g0b921b1.o\nKConfig: warning: assuming kconfig values, might have unexpected behavior\nTIME             UID    COMM             PID     TID     RET ...\n</code></pre>","title":"Use the building environment"},{"location":"building/packaging/","text":"<p>These instructions are meant to describe how to build Linux distributions packages If you would like to have a local building building and execution environment, read this instead.</p>  <ol> <li>Ubuntu</li> <li>Fedora</li> </ol>","title":"Creating Tracee Linux packages"},{"location":"building/packaging/#ubuntu-linux","text":"<p>You may use <code>builder/Makefile.packaging</code> to generate Ubuntu deb packages. It will use docker containers to generate appropriate packages, so you don't need to install build depencies in your OS.</p>","title":"Ubuntu Linux"},{"location":"building/packaging/#building","text":"<ul> <li>Bionic (LTS)</li> </ul> <pre><code>$ make -f builder/Makefile.packaging ubuntu-bin-bionic\n</code></pre> <ul> <li>Focal (LTS)</li> </ul> <pre><code>$ make -f builder/Makefile.packaging ubuntu-bin-focal\n</code></pre> <ul> <li>Impish (Current)</li> </ul> <pre><code>$ make -f builder/Makefile.packaging ubuntu-bin-impish\n</code></pre> <ul> <li>Jammy (Devel)</li> </ul> <pre><code>$ make -f builder/Makefile.packaging ubuntu-bin-jammy\n</code></pre>","title":"Building"},{"location":"building/packaging/#versioning","text":"<p>The ubuntu <code>.deb</code> packages have the following versioning format:</p> <p><code>tracee-{ebpf,rules}_version~ubuntuver~builddate-lastcommit_arch.deb</code></p> <p>Examples:</p> <pre><code># bionic\ntracee-ebpf_0.6.5-111~18.04~2201281255-3a6874a_amd64.deb\ntracee-rules_0.6.5-111~18.04~2201281255-3a6874a_amd64.deb\n\n# focal\ntracee-ebpf_0.6.5-111~20.04~2201281302-3a6874a_amd64.deb\ntracee-rules_0.6.5-111~20.04~2201281302-3a6874a_amd64.deb\n\n# impish\ntracee-ebpf_0.6.5-111~21.10~2201281314-3a6874a_amd64.deb\ntracee-rules_0.6.5-111~21.10~2201281314-3a6874a_amd64.deb\n</code></pre> <p>This allows upgrades among future releases of tracee AND ubuntu. It also allows you to upgrade to \"in between releases\" versions if a fix is needed.</p>","title":"Versioning"},{"location":"building/packaging/#location","text":"<p>The packages will be generated in <code>dist/</code> directory.</p>","title":"Location"},{"location":"building/packaging/#fedora-linux","text":"<p>You may use <code>builder/Makefile.packaging</code> to generate Fedora rpm packages. It will use docker containers to generate appropriate packages, so you don't need to install build depencies in your OS.</p>","title":"Fedora Linux"},{"location":"building/packaging/#building_1","text":"<ul> <li> <p>34 (still maintained)</p> <pre><code>make -f builder/Makefile.packaging fedora-bin-34\n</code></pre> </li> <li> <p>35 (latest)</p> <pre><code>make -f builder/Makefile.packaging fedora-bin-35\n</code></pre> </li> <li> <p>36 (devel)</p> <pre><code>make -f builder/Makefile.packaging fedora-bin-36\n</code></pre> </li> </ul>","title":"Building"},{"location":"building/packaging/#versioning_1","text":"<p>The fedora <code>.rpm</code> packages have the following versioning format:</p> <p><code>tracee-{ebpf,rules}-version-f{34,35,36}.builddate.lastcommit.arch.rpm</code></p> <p>Examples:</p> <pre><code># f34\ntracee-ebpf-0.6.5.163-f34.2202140510.ef35306d.x86_64.rpm\ntracee-rules-0.6.5.163-f34.2202140510.ef35306d.x86_64.rpm\n\n# f35\ntracee-ebpf-0.6.5.163-f35.2202140512.ef35306d.x86_64.rpm\ntracee-rules-0.6.5.163-f35.2202140512.ef35306d.x86_64.rpm\n\n# f36\ntracee-ebpf-0.6.5.163-f36.2202140514.ef35306d.x86_64.rpm\ntracee-rules-0.6.5.163-f36.2202140514.ef35306d.x86_64.rpm\n</code></pre> <p>This allows upgrades among future releases of tracee AND fedora. It also allows you to upgrade to \"in between releases\" versions if a fix is needed.</p>","title":"Versioning"},{"location":"building/packaging/#location_1","text":"<p>The packages will be generated in <code>dist/</code> directory.</p>","title":"Location"},{"location":"install/docker-mac/","text":"<p>Docker for Mac does not come with Kernel headers. You need to do the following to make Tracee work:</p> <ol> <li>Identify your docker version:    <pre><code>dockerver=$(docker version | grep  Version | head -n 1 | cut -d ':' -f 2 | xargs)\n</code></pre></li> <li>Run a container with Docker CLI, while mounting to the host path:    <pre><code>docker run -it -v /:/host -v /var/run/docker.sock:/var/run/docker.sock docker:$dockerver /bin/sh\n</code></pre></li> <li>Get the Kernel Header files from the linuxkit Docker image and copy it to the host /usr/src path:    <pre><code>mkdir /host/kheader\ncd /host/kheader\nlinux_version=\"${VERSION:-$(uname -r | cut -d - -f 1)}\"\ndocker pull \"linuxkit/kernel:$linux_version\"\ndocker save \"linuxkit/kernel:$linux_version\" &gt; \"linuxkit.tar\"\ntar -xf \"linuxkit.tar\"\nlayertar=$(find . -name layer.tar)\ntar -xf \"$layertar\"\ntar -xf \"kernel-dev.tar\" --directory /host/\n</code></pre></li> <li>You can now run Tracee on your Docker for Mac</li> </ol>","title":"Docker for Mac"},{"location":"install/kubernetes/","text":"<p>In the deploy/kubernetes directory you can find Yaml files to deploy Tracee in a Kubernetes environment. This will deploy Tracee as a DaemonSet, alongside a message routing application that will help you consume the detections in your preferred way (e.g. slack, email, JIRA and more).</p>","title":"Deploy on Kubernetes"},{"location":"install/kubernetes/#install-tracee","text":"","title":"Install Tracee"},{"location":"install/kubernetes/#with-postee","text":"<p>To install Tracee with Postee, simply run:</p> <pre><code>kubectl create \\\n  -f https://raw.githubusercontent.com/aquasecurity/postee/main/deploy/kubernetes/postee.yaml \\\n  -f https://raw.githubusercontent.com/aquasecurity/tracee/tracee/deploy/kubernetes/tracee-postee/tracee.yaml\n</code></pre> <p>You can edit the configMap <code>postee-config</code> the was created, see an example configuration here: https://github.com/aquasecurity/postee/blob/main/cfg.yaml.</p> <p>You can also use the Postee UI to configure integrations.</p>","title":"With Postee"},{"location":"install/kubernetes/#with-falcosidekick","text":"<p>To install Tracee with Falcosidekick, simply run:</p> <pre><code>kubectl create \\\n  -f https://raw.githubusercontent.com/aquasecurity/tracee/tracee/deploy/kubernetes/tracee-falcosidekick/falcosidekick.yaml \\\n  -f https://raw.githubusercontent.com/aquasecurity/tracee/tracee/deploy/kubernetes/tracee-falcosidekick/tracee.yaml\n</code></pre> <p>You can edit the configMap <code>falcosidekick-config</code> the was created, see an example configuration here: https://github.com/falcosecurity/falcosidekick/blob/master/config_example.yaml</p>","title":"With Falcosidekick"},{"location":"install/kubernetes/#platform-support","text":"<p>This approach assumes that host nodes have either BTF available or kernel headers available under conventional location. See Tracee's prerequisites for more info. For the major Kubernetes platforms this should work out-of-the-box, including GKE, EKS, AKS, minikube.</p>","title":"Platform Support"},{"location":"install/prerequisites/","text":"<ul> <li>Linux kernel version &gt;= 4.18</li> </ul> <p>One of the following:</p> <ul> <li>BTF available under <code>/sys/kernel/btf/vmlinux</code> (see libbpf CO-RE documentation for more info).</li> <li>Linux kernel headers available under conventional location (see Linux Headers section for more info).   In this case system libraries libelf and zlib are required as well.</li> </ul>","title":"Prerequisites"},{"location":"install/prerequisites/#permissions","text":"<p>For using the eBPF Linux subsystem, Tracee needs to run with sufficient capabilities:</p> <ul> <li><code>CAP_SYS_RESOURCE</code> (to manage eBPF maps limits)</li> <li><code>CAP_BPF</code>+<code>CAP_PERFMON</code> which are available on recent kernels (&gt;=5.8), or <code>CAP_SYS_ADMIN</code> on older kernels (to load   and attach the eBPF programs).</li> <li>On some environments (e.g. Ubuntu) <code>CAP_IPC_LOCK</code> might be required as well.</li> </ul> <p>Alternatively, run as <code>root</code> or with the <code>--privileged</code> flag of Docker.</p>","title":"Permissions"},{"location":"tracee-ebpf/","text":"<p>In some cases, you might want to leverage Tracee's eBPF event collection capabilities directly, without involving the detection engine. This might be useful for debugging/troubleshooting/analysis/research/education. In this case you can use Tracee's eBPF collector component, which will start dumping raw data directly into standard output.</p> <p>Watch a quick video demo of Tracee's eBPF tracing capabilities</p>","title":"Tracing"},{"location":"tracee-ebpf/#quickstart","text":"<p>Before you proceed, make sure you follow the minimum requirements for running Tracee.</p> <pre><code>docker run --name tracee --rm --pid=host --cgroupns=host --privileged -it aquasec/tracee:0.6.5 trace\n</code></pre> <p>Here we are running the same <code>aquasec/tracee</code> container, but with the <code>trace</code> sub-command, which will start just a raw trace (Tracee-eBPF), without the detection engine (Tracee-Rules). Here's a sample output of running with no additional arguments:</p> <pre><code>TIME(s)        UID    COMM             PID     TID     RET             EVENT                ARGS\n176751.746515  1000   zsh              14726   14726   0               execve               pathname: /usr/bin/ls, argv: [ls]\n176751.746772  1000   zsh              14726   14726   0               security_bprm_check  pathname: /usr/bin/ls, dev: 8388610, inode: 777\n176751.747044  1000   ls               14726   14726  -2               access               pathname: /etc/ld.so.preload, mode: R_OK\n176751.747077  1000   ls               14726   14726   0               security_file_open   pathname: /etc/ld.so.cache, flags: O_RDONLY|O_LARGEFILE, dev: 8388610, inode: 533737\n...\n</code></pre> <p>Each line is a single event collected by Tracee-eBPF, with the following information:</p> <ol> <li>TIME - shows the event time relative to system boot time in seconds</li> <li>UID - real user id (in host user namespace) of the calling process</li> <li>COMM - name of the calling process</li> <li>PID - pid of the calling process</li> <li>TID - tid of the calling thread</li> <li>RET - value returned by the function</li> <li>EVENT - identifies the event (e.g. syscall name)</li> <li>ARGS - list of arguments given to the function</li> </ol>","title":"Quickstart"},{"location":"tracee-ebpf/#getting-tracee-ebpf","text":"<p>You can obtain Tracee-eBPF in any of the following ways:</p> <ol> <li>Download from the GitHub Releases (<code>tracee.tar.gz</code>).</li> <li>Use the docker image from Docker Hub: <code>aquasec/tracee:0.6.5</code> with the <code>trace</code> sub-command.</li> <li>Build the executable from source using <code>make build</code>. For that you will need additional development tooling.</li> <li>Build the executable from source in a Docker container which includes all development tooling, using <code>make build DOCKER=1</code>.</li> </ol> <p>All of the other setup options and considerations listed under Tracee's Installation section applies to Tracee-eBPF as well.</p>","title":"Getting Tracee-eBPF"},{"location":"tracee-ebpf/capture/","text":"<p>Tracee has a unique feature that lets you capture interesting artifacts from running applications, using the <code>--capture</code> flag.</p> <p>All captured artifacts are saved in Tracee's \"output directory\" which can be configured using <code>--capture dir:/path/to/dir</code>.</p> <p>Tracee can capture the following types of artifacts:</p> <ol> <li>Written files: Anytime a file is being written to, the contents of the file will be captured. Written files can be filtered using an optional path prefix.</li> <li>Executed files: Anytime a binary is being executed, the binary file will be captured. If the same binary is executed multiple times, it will be captured just once.</li> <li>Memory files: Anytime a \"memory unpacker\" is detected, the suspicious memory region will be captured. This is triggered when memory protection changes from Write+Execute to Write.</li> <li>Network pcap files: Anytime a packet goes through the network interface, the packet is captured into the pcap file. only packets that are generated by traced processes are being captured.</li> <li>Loaded kernel modules: Anytime a kernel module is being loaded, the binary file will be captured. If the same binary is executed multiple times, it will be captured just once.</li> </ol>","title":"Capturing Artifacts"},{"location":"tracee-ebpf/capture/#cli-options","text":"CLI Option Description     <code>[artifact:]write[=/path/prefix*]</code> capture written files. A filter can be given to only capture file writes whose path starts with some prefix (up to 50 characters). Up to 3 filters can be given.   <code>[artifact:]exec</code> capture executed files.   <code>[artifact:]mem</code> capture memory regions that had write+execute (w+x) protection, and then changed to execute (x) only.   <code>[artifact:]net=&lt;network_interface&gt;</code> capture network packets generated by traced processes, that goes through . Only TCP/UDP protocols are currently supported.   <code>profile</code> creates a runtime profile of program executions and their metadata for forensics use.   <code>dir:/path/to/dir</code> path where tracee will save produced artifacts. the artifact will be saved into an 'out' subdirectory. (default: /tmp/tracee).   <code>clear-dir</code> clear the captured artifacts output dir before starting (default: false).    <p>(Use this flag multiple times to choose multiple capture options)</p>","title":"CLI Options"},{"location":"tracee-ebpf/capture/#examples","text":"<p>Capture executed files into the default output directory</p> <pre><code>--capture exec\n</code></pre> <p>Capture kernel modules into the default output directory</p> <pre><code>--capture module\n</code></pre> <p>Delete /my/dir/out and then capture executed files into it</p> <pre><code>--capture exec --capture dir:/my/dir --capture clear-dir\n</code></pre> <p>Capture files that were written into anywhere under <code>/usr/bin/</code> or <code>/etc/</code></p> <pre><code>--capture write=/usr/bin/* --capture write=/etc/* \n</code></pre> <p>Capture pcap files</p> <pre><code>--capture net=enp0s3\n</code></pre> <p>Creates a runtime profile of program executions and their metadata for forensics use. The profiles created can be compared among executions to identify if there is any difference. For example, use it as a github action to identify if any new process was executed since the last pipeline, useful for supply chain security.</p> <pre><code>--capture profile\n</code></pre>","title":"Examples"},{"location":"tracee-ebpf/output/","text":"<p>Control how and where output is printed.</p>","title":"Output Options"},{"location":"tracee-ebpf/output/#cli-options","text":"CLI Option Description     <code>[format:]{table,table-verbose,json,gob,gotemplate=/path/to/template}</code> output events in the specified format. for gotemplate, specify the mandatory template file   <code>none</code> ignore stream of events output, usually used with <code>--capture</code>   <code>out-file:/path/to/file</code> write the output to a specified file. the path to the file will be created if not existing and the file will be deleted if existing (default: stdout)   <code>err-file:/path/to/file</code> write the errors to a specified file. the path to the file will be created if not existing and the file will be deleted if existing (default: stderr)   <code>option:{stack-addresses,detect-syscall,exec-env,exec-hash,relative-time,parse-arguments}</code> augment output according to given options (default: none)   stack-addresses include stack memory addresses for each event   detect-syscall when tracing kernel functions which are not syscalls, detect and show the original syscall that called that function   exec-env when tracing execve/execveat, show the environment variables that were used for execution   exec-hash when tracing sched_process_exec, show the file hash(sha256)   relative-time use relative timestamp instead of wall timestamp for events   parse-arguments do not show raw machine-readable values for event arguments, instead parse into human readable strings    <p>(Use this flag multiple times to choose multiple capture options)</p>","title":"CLI Options"},{"location":"tracee-ebpf/output/#examples","text":"<p>output as json</p> <pre><code>--output json\n</code></pre> <p>output as the provided go template</p> <pre><code>--output gotemplate=/path/to/my.tmpl\n</code></pre> <p>output to <code>/my/out</code> and errors to <code>/my/err</code></p> <pre><code>--output out-file:/my/out --output err-file:/my/err\n</code></pre>","title":"Examples"},{"location":"tracee-ebpf/override-os-needed-files/","text":"<p>Tracee supports eBPF CO-RE (Compile Once - Run Everywhere) technology and, because of that, it might need some information about the Linux OS it is running at. Tracee, through libbpfgo, must have access to /etc/os-release file AND either /boot/config-$(uname-r) OR /proc/config.gz files (KernelConfig API at helpers/kernel_config).</p>  <p>Note that, despite having this need, tracee will try to execute as CO-RE eBPF program in any environment it is executed.</p>","title":"Overriding OS needed files"},{"location":"tracee-ebpf/override-os-needed-files/#etcos-release","text":"<p>Tracee will show you collected information about the running Linux OS with the <code>--debug</code> argument:</p> <pre><code>$ sudo ./dist/tracee-ebpf --debug --trace uid=1000 --trace pid=new --trace event=execve\nOSInfo: VERSION_ID: \"21.04\"\nOSInfo: VERSION_CODENAME: hirsute\nOSInfo: KERNEL_RELEASE: 5.11.0-31-generic\nOSInfo: VERSION: \"21.04 (Hirsute Hippo)\"\nOSInfo: ID: ubuntu\nOSInfo: ID_LIKE: debian\nOSInfo: PRETTY_NAME: \"Ubuntu 21.04\"\nBTF: bpfenv = false, btfenv = false, vmlinux = true\nBPF: using embedded BPF object\nunpacked CO:RE bpf object file into memory\nTIME             UID    COMM             PID     TID     RET              EVENT                ARGS\n02:34:43:212623  1000   bash             2787679 2787679 0                execve               pathname: /bin/true, argv: [/bin/true]\n</code></pre> <p>If, because you're running in a distribution that does not have /etc/os-release, or because you're running inside a container that does not support it, you may face:</p> <pre><code>$ sudo ./dist/tracee-ebpf --debug --trace uid=1000 --trace pid=new --trace event=execve\nOSInfo: KERNEL_RELEASE: 5.14.0-rc5+\nOSInfo: warning: os-release file could not be found\n(open /etc/os-release: no such file or directory)\nBTF: bpfenv = false, btfenv = false, vmlinux = true\nBPF: using embedded BPF object\nunpacked CO:RE bpf object file into memory\nTIME             UID    COMM             PID     TID     RET              EVENT                ARGS\n05:37:02:831787  1000   bash             13940   13940   0                execve               pathname: /bin/true, argv: [/bin/true]\n\nEnd of events stream\nStats: {EventCount:1 ErrorCount:0 LostEvCount:0 LostWrCount:0 LostNtCount:0}\n</code></pre> <p>But do note that tracee-ebpf shall continue working (informing only the KERNEL_RELEASE OSInfo option).</p> <p>If you need to override the underlaying Linux OS information, because you're running inside a container that already has /etc/os-release file, for example, you may create another os-release file and inform tracee-ebpf by using LIBBPFGO's environment variable <code>LIBBPFGO_OSRELEASE_FILE</code>:</p> <pre><code>$ sudo LIBBPFGO_OSRELEASE_FILE=/etc/os-release.orig ./dist/tracee-ebpf --debug --trace uid=1000 --trace pid=new --trace event=execve\nOSInfo: VERSION_CODENAME: impish\nOSInfo: ID: ubuntu\nOSInfo: ID_LIKE: debian\nOSInfo: KERNEL_RELEASE: 5.14.0-rc5+\nOSInfo: PRETTY_NAME: \"Ubuntu Impish Indri (development branch)\"\nOSInfo: VERSION_ID: \"21.10\"\nOSInfo: VERSION: \"21.10 (Impish Indri)\"\nBTF: bpfenv = false, btfenv = false, vmlinux = true\nBPF: using embedded BPF object\nunpacked CO:RE bpf object file into memory\nTIME             UID    COMM             PID     TID     RET              EVENT                ARGS\n05:39:24:100006  1000   bash             14014   14014   0                execve               pathname: /bin/true, argv: [/bin/true]\n</code></pre>  <p>If you're running tracee inside a docker container, you can simply bind mount /etc/os-release from the host as /etc/os-release-host into the guest and inform that through the <code>LIBBPFGO_OSRELEASE_FILE</code> environment variable.</p>","title":"/etc/os-release"},{"location":"tracee-ebpf/override-os-needed-files/#procconfiggz-or-bootconfig-uname-r","text":"<p>Tracee needs access to kconfig file in order to:</p> <ol> <li>Check if the kernel of your running environment supports needed eBPF features</li> <li>Provide kconfig variables to its eBPF counter-part (so eBPF program take decisions)</li> </ol> <p>Tracee should NOT fail when it cannot find a kconfig file:</p> <pre><code>$ sudo ./dist/tracee-ebpf --debug --trace uid=1000 --trace pid=new --trace event=execve\nKConfig: warning: could not check enabled kconfig features\n(could not read /boot/config-5.14.0-rc5+: stat /boot/config-5.14.0-rc5+: no such file or directory)\nOSInfo: KERNEL_RELEASE: 5.14.0-rc5+\nOSInfo: PRETTY_NAME: \"Ubuntu Impish Indri (development branch)\"\nOSInfo: VERSION_ID: \"21.10\"\nOSInfo: VERSION: \"21.10 (Impish Indri)\"\nOSInfo: VERSION_CODENAME: impish\nOSInfo: ID: ubuntu\nOSInfo: ID_LIKE: debian\nBTF: bpfenv = false, btfenv = false, vmlinux = true\nBPF: using embedded BPF object\nunpacked CO:RE bpf object file into memory\nTIME             UID    COMM             PID     TID     RET              EVENT                ARGS\n05:44:18:877838  1000   bash             14089   14089   0                execve               pathname: /bin/true, argv: [/bin/true]\n</code></pre> <p>but do have in mind it is assuming some things from the host environment and its behavior might have inconsistencies.</p> <p>If you are running tracee in an environment that does not have a kconfig file (nor /proc/config.gz support), it is recommended that you provide the host kconfig file location to tracee through the <code>LIBBPFGO_KCONFIG_FILE</code> environment variable:</p> <pre><code>$ sudo LIBBPFGO_KCONFIG_FILE=/boot/config-5.14.0-rc5+.orig ./dist/tracee-ebpf --debug --trace uid=1000 --trace pid=new --trace event=execve\nOSInfo: VERSION_CODENAME: impish\nOSInfo: ID: ubuntu\nOSInfo: ID_LIKE: debian\nOSInfo: KERNEL_RELEASE: 5.14.0-rc5+\nOSInfo: PRETTY_NAME: \"Ubuntu Impish Indri (development branch)\"\nOSInfo: VERSION_ID: \"21.10\"\nOSInfo: VERSION: \"21.10 (Impish Indri)\"\nBTF: bpfenv = false, btfenv = false, vmlinux = true\nBPF: using embedded BPF object\nunpacked CO:RE bpf object file into memory\nTIME             UID    COMM             PID     TID     RET              EVENT                ARGS\n05:47:45:245869  1000   bash             14165   14165   0                execve               pathname: /bin/true, argv: [/bin/true]\n</code></pre>  <p>If you're running tracee inside a docker container, you can simply bind mount /boot/config-$(uname -r) from the host as /boot/config-$(uname -r) into the guest and inform that through the <code>LIBBPFGO_OSRELEASE_FILE</code> environment variable.</p>","title":"/proc/config.gz OR /boot/config-$(uname -r)"},{"location":"tracee-ebpf/override-os-needed-files/#attention-in-case-kconfig-file-is-not-found","text":"<p>In case no kconfig file is found, tracee takes some decisions blindly and it may give you unexpected errors. Example:</p> <pre><code>$ sudo ./dist/tracee-ebpf --debug --trace uid=1000 --trace pid=new --trace event=execve\nKConfig: warning: could not check enabled kconfig features\n(could not read /boot/config-5.14.0-rc5+: stat /boot/config-5.14.0-rc5+: no such file or directory)\nOSInfo: PRETTY_NAME: \"Ubuntu Impish Indri (development branch)\"\nOSInfo: VERSION_ID: \"21.10\"\nOSInfo: VERSION: \"21.10 (Impish Indri)\"\nOSInfo: VERSION_CODENAME: impish\nOSInfo: ID: ubuntu\nOSInfo: ID_LIKE: debian\nOSInfo: KERNEL_RELEASE: 5.14.0-rc5+\nBTF: bpfenv = false, btfenv = false, vmlinux = true\nBPF: using embedded BPF object\nunpacked CO:RE bpf object file into memory\nTIME             UID    COMM             PID     TID     RET              EVENT                ARGS\n05:50:53:742705  1000   bash             14244   14244   0                execve               pathname:  , argv: []\n</code></pre> <p>In this example tracee has assumed the environment had <code>CONFIG_ARCH_HAS_SYSCALL_WRAPPER=y</code> kconfig option set but that wasn't the case. It led tracee not to be able to get syscalls arguments correctly.</p>","title":"ATTENTION: in case kconfig file is NOT found"},{"location":"tracee-ebpf/trace-options/","text":"<p>Trace output can easily become unwieldy when tracing all of the events from all of the system. Luckily, Tracee has a powerful mechanism to accurately trace just the information that is relevant to you, using the <code>--trace</code> flag. Using the <code>--trace</code> you define expressions that tells Tracee-eBPF what you are interested in by means of event metadata, and process metadata. Only events that match this criteria will be traced.</p> <p>You can filter by most of the visible fields on a Tracee event. For example to trace only events related to user ID 1000, use <code>--trace uid=1000</code>. You can combine trace expressions into more complex criteria. For example, to trace only events related to user ID 1000, which come from process ID 1234, use <code>--trace uid=1000 --trace pid=1234</code>.  </p> <p>A special <code>pid</code> value is <code>new</code> which let's you trace all newly created processes (that were created after Tracee started tracing). Tracee-eBPF lets you easily trace events that originate in containers using <code>--trace container</code> or only new containers (that were created after Tracee started) using <code>--trace container=new</code>.</p> <p>Event metadata can be used in trace expression as well. For example, to trace only <code>openat</code> syscalls, use <code>--trace event:openat</code>. But you can also filter on a specific argument of the event, e.g <code>--trace openat.pathname=/bin/ls</code> which will show only <code>openat</code> syscalls that operate on the file <code>/bin/ls</code>.</p> <p>A useful trace mode is the <code>--trace follow</code> which, if specified, will trace not only processes that match the given trace expressions, but also their child processes. For example, the following will trace all the events that originate from zsh shell, including all of the processes that it will spawn: <code>--trace comm=zsh --trace follow</code>.</p>","title":"Trace Options"},{"location":"tracee-ebpf/trace-options/#cli-options","text":"<p>Only events that match all trace expressions will be traced (trace flags are ANDed). The following types of expressions are supported:</p> <p>Numerical expressions which compare numbers and allow the following operators: '=', '!=', '&lt;', '&gt;'. Available numerical expressions: uid, pid, mntns, pidns.</p> <p>String expressions which compares text and allow the following operators: '=', '!='. Available string expressions: event, set, uts, comm, container.</p> <p>Boolean expressions that check if a boolean is true and allow the following operator: '!'. Available boolean expressions: container.</p> <p>Event arguments can be accessed using 'event_name.event_arg' and provide a way to filter an event by its arguments. Event arguments allow the following operators: '=', '!='. Strings can be compared as a prefix if ending with '*'.</p> <p>Event return value can be accessed using 'event_name.retval' and provide a way to filter an event by its return value. Event return value expression has the same syntax as a numerical expression.</p> <p>Non-boolean expressions can compare a field to multiple values separated by ','. Multiple values are ORed if used with equals operator '=', but are ANDed if used with any other operator.</p> <p>The field 'container' and 'pid' also support the special value 'new' which selects new containers or pids, respectively.</p> <p>The field 'set' selects a set of events to trace according to predefined sets, which can be listed by using the 'list' flag.</p> <p>The special 'follow' expression declares that not only processes that match the criteria will be traced, but also their descendants.</p> <p>Note: some of the above operators have special meanings in different shells. To 'escape' those operators, please use single quotes, e.g.: 'uid&gt;0'</p>","title":"CLI Options"},{"location":"tracee-ebpf/trace-options/#examples","text":"<p>only trace events from new processes</p> <pre><code>--trace pid=new\n</code></pre> <p>only trace events from pid 510 or pid 1709</p> <pre><code>--trace pid=510,1709\n</code></pre> <p>only trace events from pid 510 or pid 1709 (same as above)</p> <pre><code>--trace p=510 --trace p=1709\n</code></pre> <p>only trace events from newly created containers</p> <pre><code>--trace container=new\n</code></pre> <p>only trace events from container id ab356bc4dd554</p> <pre><code>--trace container=ab356bc4dd554\n</code></pre> <p>only trace events from containers</p> <pre><code>--trace container\n</code></pre> <p>only trace events from containers (same as above)</p> <pre><code>--trace c\n</code></pre> <p>only trace events from the host</p> <pre><code>--trace '!container'\n</code></pre> <p>only trace events from uid 0</p> <pre><code>--trace uid=0\n</code></pre> <p>only trace events from mntns id 4026531840</p> <pre><code>--trace mntns=4026531840\n</code></pre> <p>only trace events from pidns id not equal to 4026531840</p> <pre><code>--trace pidns!=4026531836\n</code></pre> <p>only trace events from uids greater than 0</p> <pre><code>--trace 'uid&gt;0'\n</code></pre> <p>only trace events from pids between 0 and 1000</p> <pre><code>--trace 'pid&gt;0' --trace 'pid&lt;1000'\n</code></pre> <p>only trace events from uids greater than 0 but not 1000</p> <pre><code>--trace 'u&gt;0' --trace u!=1000\n</code></pre> <p>only trace execve and open events</p> <pre><code>--trace event=execve,open\n</code></pre> <p>only trace events prefixed by \"open\"</p> <pre><code>--trace event=open*\n</code></pre> <p>don't trace events prefixed by \"open\" or \"dup\"</p> <pre><code>--trace event!=open*,dup*\n</code></pre> <p>trace all file-system related events <pre><code>--trace set=fs\n</code></pre></p> <p>trace all file-system related events, but not open(at)</p> <pre><code>--trace s=fs --trace e!=open,openat\n</code></pre> <p>don't trace events from uts name ab356bc4dd554</p> <pre><code>--trace uts!=ab356bc4dd554\n</code></pre> <p>only trace events from ls command</p> <pre><code>--trace comm=ls\n</code></pre> <p>only trace 'close' events that have 'fd' equals 5</p> <pre><code>--trace close.fd=5\n</code></pre> <p>only trace 'openat' events that have 'pathname' prefixed by \"/tmp\"</p> <pre><code>--trace openat.pathname=/tmp*\n</code></pre> <p>don't trace 'openat' events that have 'pathname' equals /tmp/1 or /bin/ls</p> <pre><code>--trace openat.pathname!=/tmp/1,/bin/ls\n</code></pre> <p>trace all events that originated from bash or from one of the processes spawned by bash</p> <pre><code>--trace comm=bash --trace follow\n</code></pre>","title":"Examples"}]})